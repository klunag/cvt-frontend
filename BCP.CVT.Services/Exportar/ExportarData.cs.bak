using BCP.CVT.Cross;
using BCP.CVT.DTO;
using BCP.CVT.Services.Interface;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Extensions;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Globalization;
using BCP.CVT.DTO.Custom;
using BCP.CVT.DTO.Grilla;
using System.Data;
using BCP.CVT.DTO.Storage;
using BCP.CVT.Services.Interface.PortafolioAplicaciones;
using BCP.PAPP.Common.Custom;
using BCP.PAPP.Common.Cross;
using Newtonsoft.Json;

namespace BCP.CVT.Services.Exportar
{
    public class ExportarData
    {
        public byte[] ExportarReporteRelaciones(string aplicacion,
            string equipo,
            int tipo,
            string estado,
            int perfilId,
            string matricula,
            string tecnologia,
            string subdominioIds,
            string ambiente,
            DateTime FechaConsulta)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = new List<ReporteGerenciaDivisionDto>();
                    if (perfilId == (int)EPerfilBCP.Administrador
                        || perfilId == (int)EPerfilBCP.Coordinador
                        || perfilId == (int)EPerfilBCP.ETICMDB
                        || perfilId == (int)EPerfilBCP.GestorTecnologia
                        || perfilId == (int)EPerfilBCP.Seguridad
                        || perfilId == (int)EPerfilBCP.Auditoria
                        || perfilId == (int)EPerfilBCP.Operador)
                        datos = ServiceManager<ReporteDAO>.Provider.GetExportar(aplicacion, equipo, tipo, estado, tecnologia, subdominioIds, ambiente, FechaConsulta);
                    else
                        datos = ServiceManager<ReporteDAO>.Provider.GetExportarConsultor(aplicacion, equipo, tipo, estado, matricula, tecnologia, subdominioIds, ambiente, FechaConsulta);

                    int k = 1;
                    var sheetName = "Aplicaciones y tecnologías";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 15D, CustomWidth = true });//K                    
                    //columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L   
                    //columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M
                    //columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 15D, CustomWidth = true });//N
                    //columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 15D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 20D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 20D, CustomWidth = true });//S

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código de aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado del equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado de la relación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Relevancia", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Modificado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Fecha de última modificación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagActivoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Relevancia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.FechaFinToString);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.Number;
                            //cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.Number;
                            //cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.Number;
                            //cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioModificacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaModificacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Componente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "N", 2, "N", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "O", 2, "O", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTipo(string nombre, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<TipoDAO>.Provider.GetTipo(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tipos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Registro principal", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagEstandarToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFamilia(string nombre, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<FamiliaDAO>.Provider.GetFamilia(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Familias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 25D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de familias", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:I1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "# Tecnologías", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Existencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Facilidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Riesgo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Vulnerabilidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.NumTecAsociadas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Existencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Facilidad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Riesgo.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Vulnerabilidad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarDominio(string nombre, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<DominioDAO>.Provider.GetDominio(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Dominios";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de dominios", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "# Subdominios", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.NumSubdominios.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarSubdominio(string nombre, int dominioId, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<SubdominioDAO>.Provider.GetSubdom(dominioId, nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Subdominios";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de subdominios", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Peso", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "# Tecnologias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DomNomAsociado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Peso.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.NumTecAsociadas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarProducto(string nombre, int? estadoObsolescenciaId, int? dominioId, int? subdominioId, int? tipoProductoId, bool activo, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ProductoDAO>.Provider.GetProducto(nombre, estadoObsolescenciaId, dominioId, subdominioId, tipoProductoId, activo, 1, int.MaxValue, sortName, sortOrder, out totalRows, true);

                    int k = 2;
                    var sheetName = "Productos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 20D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 20D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 20D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 20D, CustomWidth = true });//R

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologias", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:R1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado Obsolescencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tribu/Coe/Unidad Organizacional", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Responsable de la Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Grupo Soporte Remedy", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "¿Es Aplicación?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Tipo Ciclo de Vida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Esquema Licenciamiento/Suscripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Total Tecnologías", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Creado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Fecha Creación", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A - Fabricante
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B - Nombre
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C - Descripción
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D - Dominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E - Subdominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubDominioStr); //Estado Tecnologia
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F - Tipo Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoProductoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G - Estado Obsolescencia
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoObsolescenciaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H - Tribu/Coe/Unidad Organizacional
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I - Squad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J - Responsable de la Unidad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.OwnerDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K - Grupo Soporte Remedy
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoTicketRemedyNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L - ¿Es Aplicación?
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EsAplicacion ? "SÍ" : "NO");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // M - Código
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Codigo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // N - Tipo Ciclo de Vida
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoCicloVidaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // O - Esquema Licenciamiento/Suscripción
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EsquemaLicenciamientoSuscripcionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);
                            
                            // P - Total Tecnologías
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CantidadTecnologiasRegistradas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // Q - Creado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // R - Fecha Creación
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologia(string nombre, int dominioId, int subdominioId, string aplica, string codigo, string dueno, string equipo, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTec(dominioId, subdominioId, nombre, aplica, codigo, dueno, equipo, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    //columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologías", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de Aprobación", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha Registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoTecnologiaStr); //Estado Tecnologia
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.TipoStr);
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoTecnologiaToString); //Estado Tecnologia
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarConsolidadoNewTecnologia(string nombre, List<int> dominioIds, List<int> subdominioIds, int? productoId, string aplica, string codigo, string dueno, List<int> tipoTecIds, List<int> estObsIds, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetNewTecSP(productoId, dominioIds, subdominioIds, nombre, aplica, codigo, dueno, tipoTecIds, estObsIds, false, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 20D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//N

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte consolidado de tecnologias", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:O1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado de la Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Motivo de fecha indefinida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "URL de fecha indefinida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha para cálculo obsolescencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Fecha fin soporte/regular", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Fecha extendida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Fecha interna", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Tipo de fecha interna", string.Empty, estilos.INDICE_CABECERA);                    


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A - Dominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B - SubDominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C - Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante + " " + item.ProductoNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E - Tipo de Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F - Estado BCP Sin Deprecada
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoTecnologiaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G - Tipo de fecha
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue((item.FlagFechaFinSoporte ?? (bool?)false).Value == true ? item.FechaCalculoTecStr : "Indefinida"); //Estado Tecnologia
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H - Motivo de fecha indefinida
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SustentoMotivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I - URL de fecha indefinida
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SustentoUrl);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J - Fecha para calculo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            if(item.FlagFechaFinSoporte != true)                            
                                cell.CellValue = new CellValue("Fecha indefinida");
                            else
                            {                                
                                cell.CellValue = new CellValue((item.FlagFechaFinSoporte ?? (bool?)false).Value == true ? item.FechaCalculoTec.HasValue ? item.FechaCalculoTec.Value == (int)FechaCalculoTecnologia.FechaExtendida ? item.FechaExtendidaToString : item.FechaCalculoTec.Value == (int)FechaCalculoTecnologia.FechaInterna ? item.FechaAcordadaToString : item.FechaCalculoTec.Value == (int)FechaCalculoTecnologia.FechaFinSoporte ? item.FechaFinSoporteToString : "Sin fecha fin configurada" : "Sin fecha fin configurada" : "Sin fecha fin configurada");
                            }
                                
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K - Fuente
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue((item.FlagFechaFinSoporte ?? (bool?)false).Value == true ? item.FuenteStr : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L - Fecha fin soporte/regular
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue((item.FlagFechaFinSoporte ?? (bool?)false).Value == true ? item.FechaFinSoporteStr : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // M - Fecha extendida
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue((item.FlagFechaFinSoporte ?? (bool?)false).Value == true ? item.FechaExtendidaStr : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // N - Fecha interna
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue((item.FlagFechaFinSoporte ?? (bool?)false).Value == true ? item.FechaAcordadaStr : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // O - Tipo de fecha interna
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);                            

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarDetalladoNewTecnologia(string nombre, List<int> dominioIds, List<int> subdominioIds, int? productoId, string aplica, string codigo, string dueno, List<int> tipoTecIds, List<int> estObsIds, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetNewTecSP(productoId, dominioIds, subdominioIds, nombre, aplica, codigo, dueno, tipoTecIds, estObsIds, true, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 30D, CustomWidth = true });//X
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 30D, CustomWidth = true });//Y
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 30D, CustomWidth = true });//Z
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 30D, CustomWidth = true });//AA
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 30D, CustomWidth = true });//AB
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 30D, CustomWidth = true });//AC
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 30D, CustomWidth = true });//AD
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 30D, CustomWidth = true });//AE
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 30D, CustomWidth = true });//AF
                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 30D, CustomWidth = true });//AG
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 30D, CustomWidth = true });//AH
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 30D, CustomWidth = true });//AI
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 30D, CustomWidth = true });//AJ
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 30D, CustomWidth = true });//AK
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 30D, CustomWidth = true });//AL
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 30D, CustomWidth = true });//AM
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 30D, CustomWidth = true });//AN
                    columns1.Append(new Column() { Min = 41U, Max = 41U, Width = 30D, CustomWidth = true });//AO
                    columns1.Append(new Column() { Min = 42U, Max = 42U, Width = 30D, CustomWidth = true });//AP
                    columns1.Append(new Column() { Min = 43U, Max = 43U, Width = 30D, CustomWidth = true });//AQ
                    columns1.Append(new Column() { Min = 44U, Max = 44U, Width = 30D, CustomWidth = true });//AR
                    columns1.Append(new Column() { Min = 45U, Max = 45U, Width = 30D, CustomWidth = true });//AS
                    columns1.Append(new Column() { Min = 46U, Max = 46U, Width = 30D, CustomWidth = true });//AT
                    columns1.Append(new Column() { Min = 47U, Max = 47U, Width = 30D, CustomWidth = true });//AU
                    columns1.Append(new Column() { Min = 48U, Max = 48U, Width = 30D, CustomWidth = true });//AV
                    columns1.Append(new Column() { Min = 49U, Max = 49U, Width = 30D, CustomWidth = true });//AW
                    columns1.Append(new Column() { Min = 50U, Max = 50U, Width = 30D, CustomWidth = true });//AX
                    columns1.Append(new Column() { Min = 51U, Max = 51U, Width = 30D, CustomWidth = true });//AY
                    columns1.Append(new Column() { Min = 52U, Max = 52U, Width = 30D, CustomWidth = true });//AZ
                    columns1.Append(new Column() { Min = 53U, Max = 53U, Width = 30D, CustomWidth = true });//BA

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte Detallado de tecnologias", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:BA1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Versión", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "¿Mostrar el Site de Estándares?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "¿Tiene equivalencias?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Motivo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Código de Productos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "¿La tecnología tiene script que automatiza su implementación?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Revisión de Seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Fecha de lanzamiento de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "¿Tiene fecha fin de soporte?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Motivo de fecha indefinida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Url de fecha indefinida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Fecha para cálculo de obsolescencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Fecha fin soporte de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Fecha fin extendida de la tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Fecha fin interna de la tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Tipo Fecha Fin Interna", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Comentarios asociados a la fecha fin de soporte de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Lineamiento de tecnología (URL de confluence)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "Caso de uso", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "Indicar la plataforma a la que aplica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "Compatibilidad de SO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "Compatibilidad de Cloud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Requisitos de HW/SW", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Conocimiento de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "Riesgo de mantenerse obsoleto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "Facilidad de actualización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "Vulnerabilidad de seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Roadmap de la tecnología (Opcional)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "Referencias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Plan de transferencia de conocimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "Esquema monitoreo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "Definición del esquema de patch management", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "Responsable de la Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, "Equipo de administración y punto de contacto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, "Grupo de Soporte REMEDY", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AS", k, TipoDato.Cadena, "Conformidad de arquitecto de seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AT", k, TipoDato.Cadena, "Conformidad de arquitecto de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AU", k, TipoDato.Cadena, "Esquema de licenciamiento/subscripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AV", k, TipoDato.Cadena, "Equipo de Aprovisionamiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AW", k, TipoDato.Cadena, "Aplicaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AX", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AY", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AZ", k, TipoDato.Cadena, "Modificado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BA", k, TipoDato.Cadena, "Fecha de última modificación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(string.IsNullOrEmpty(item.ProductoNombre) ? "" : $"{item.Fabricante} {item.ProductoNombre}");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Fabricante
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Nombre
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D  - Versión
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Versiones);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E  - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F  - Descripción
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G  - ¿Mostrar el Site de Estándares?
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagSiteEstandarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);
                            // H  - ¿Tiene equivalencias?
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagTieneEquivalencias ? "SÍ" : "NO");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I  - Motivo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MotivoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J  - Tipo de Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K  - Código de Productos
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoProducto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L  - ¿La tecnología tiene script que automatiza su implementación?
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AutomatizacionImplementadaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // M  - Revisión de Seguridad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue($"{item.RevisionSeguridadStr} - {item.RevisionSeguridadDescripcion}");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // N  - Fecha de lanzamiento de tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaLanzamientoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // O  - ¿Tiene fecha fin de soporte?
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagFechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // P  - Motivo Sin Fecha Fin Soporte
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SustentoMotivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // Q  - Url Sin Fecha Fin de Soporte
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SustentoUrl);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // R  - Fuente
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // S  - Fecha para cálculo de obsolescencia
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // T  - Fecha fin soporte de tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // U  - Fecha fin extendida de la tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaExtendidaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // V  - Fecha fin interna de la tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAcordadaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // W  - Tipo Fecha Fin Interna
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoFechaInterna);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // X  - Comentarios asociados a la fecha fin de soporte de tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ComentariosFechaFin);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // Y  - Lineamiento de tecnología (URL de confluence)
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UrlConfluence);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // Z  - Caso de uso
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CasoUso);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AA  - Indicar la plataforma a la que aplica
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplica);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AB - Compatibilidad de SO
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CompatibilidadSO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AC - Compatibilidad de Cloud
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CompatibilidadCloud);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AD - Requisitos de HW/SW
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Requisitos);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AE - Conocimiento de tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Existencia.HasValue ? item.Existencia.Value.ToString() : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AF - Riesgo de mantenerse obsoleto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Riesgo.HasValue ? item.Riesgo.Value.ToString() : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AG - Facilidad de actualización
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Facilidad.HasValue ? item.Facilidad.Value.ToString() : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AH - Vulnerabilidad de seguridad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Vulnerabilidad.HasValue ? item.Vulnerabilidad.ToString() : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AI - Dominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AJ - Subdominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AK - Roadmap de la tecnología (Opcional)
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RoadmapOpcional);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AL - Referencias
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Referencias);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AM - Plan de transferencia de conocimiento
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.PlanTransConocimiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AN - Esquema monitoreo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EsqMonitoreo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AO - Definición del esquema de patch management
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EsqPatchManagement);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AP - Responsable de la Unidad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dueno);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AQ - Equipo de administración y punto de contacto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EqAdmContacto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AR - Grupo de Soporte REMEDY
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoSoporteRemedy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AS - Conformidad de arquitecto de seguridad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ConfArqSeg);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AT - Conformidad de arquitecto de tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ConfArqTec);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AU - Esquema de licenciamiento/subscripción
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EsqLicenciamiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AV - Equipo de Aprovisionamiento
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoAprovisionamiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AW - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ListaAplicacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AW - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AW - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AW - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioModificacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // AW - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaModificacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaSTD(string nombre, List<int> dominioIds, List<int> subdominioIds, string familiaId, int estadoFecSop, string casoUso, List<int> estadoTecs, string aplica, string codigo, string dueno, string equipo, List<int> tipoTecIds, List<int> estObsIds, int? flagActivo, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecSTD(dominioIds, subdominioIds, casoUso, nombre, estadoTecs, familiaId, estadoFecSop, aplica, codigo, dueno, equipo, tipoTecIds, estObsIds, flagActivo, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologias STD";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologias STD", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:M1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de Aprobación", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Aprobado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "¿Vigencia indefinida?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "¿Se muestra en vista de estándares?", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoTecnologiaStr); //Estado Tecnologia
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.TipoStr);
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAprobacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteSite);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioAprobacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagVigenteIndefinido);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagSiteEstandarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarQualy(string qualyId, string titulo, string nivelSeveridad, string productoStr, string tecnologiaStr, bool asignadas, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<QualyDAO>.Provider.GetQualys(qualyId, titulo, nivelSeveridad, productoStr, tecnologiaStr, asignadas, false, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Qualys";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 20D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 20D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 20D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 20D, CustomWidth = true });//R
                    

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Vulnerabilidades - Qualys", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:R1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "QID", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Categoría", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo Vulnerabilidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nivel Severidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Título", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha Publicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Lista Software", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Diagnóstico", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Solución", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Referencia Vendedor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Malware Asociado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "PCI Vuln", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Explotabilidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Amenaza", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Impacto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Código Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A - QID
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Id.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B - Categoría
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Categoria);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C - Tipo de Vulnerabilidad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoVulnerabilidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D - Nivel de Severidad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NivelSeveridad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E - Título
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Titulo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F - Fecha de Publicación
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaPublicacion == null ? null : item.FechaPublicacion.Value.ToString("dd/MM/yyyy"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G - Lista Software
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ListaSoftware);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H - Diagnóstico
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Diagnostico);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I - Solución
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Solucion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J - Referencia Vendedor
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ReferenciaVendedor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K - Malware Asociado
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MalwareAsociado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L - PCI Vuln
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.PCIVuln);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // M - Explotabilidad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Explotabilidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // N - Amenaza
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Amenaza);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // O - Impacto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Impacto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // P - Código Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ProductoId.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // Q - Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto == null ? null : item.Producto.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // R - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        void ListarReporteConsolidadoQualyAddSheetData(List<QualyConsolidadoDto> datos, SheetData sheetData, EstilosExcel estilos)
        {
            Console.WriteLine("***** Asignando valores *****");
            for (int index = 0; index < datos.Count; index++)
            {
                var item = datos[index];

                Row newRow = new Row();
                Cell cell = new Cell();

                // A - Dominio
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.DominioStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // B - SubDominio
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.SubDominioStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // C - Producto
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.ProductoStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // D - Tecnología
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TecnologiaStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // E - Owner
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TribuCoeStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // F - Squad
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.SquadStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // G - Equipo
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.EquipoStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // H - QID
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.QID.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // I - IP
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.IP);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // J - DNS
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.DNS);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // K - NetBIOS
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.NetBIOS);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // L - TRACKING_METHOD
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TrackingMethod);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // M - SO
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.SO);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // N - IP_STATUS
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.IPStatus);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // O - TITLE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Title);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // P - VULN_STATUS
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.VulnStatus);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // Q - TYPE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Type);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // R - SEVERITY
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Severity);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // S - PORT
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Port);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // T - PROTOCOL
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Protocol);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // U - FQDN
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.FQDN);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // V - SSL
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.SSL);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // W - FIRST_DETECTED
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.FirstDetected);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // X - LAST_DETECTED
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.LastDetected);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // Y - TIMES_DETECTED
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TimesDetected);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // Z - DATE_LAST_FIXED
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.DateLastFixed);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AA - FIRST_REOPENED
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.FirstReopened);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AB - LAST_REOPENED
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.LastReopened);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AC - TIMES_REOPENED
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TimesReopened);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AD - CVE_ID
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVEId);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AE - VENDOR_REFERENCE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.VendorReference);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AF - BUGTRAQ_ID
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.BugtraqId);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AG - CVSS
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVSS);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AH - CVSS_BASE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVSSBase);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AI - CVSS_TEMPORAL
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVSSTemporal);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AJ - CVSS_ENVIRONMENT
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVSSEnvironment);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AK - CVSS3
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVSS3);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AL - CVSS3_BASE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVSS3Base);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AM - CVSS3_TEMPORAL
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.CVSS3Temporal);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AN - THREAT
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Threat);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AO - IMPACT
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Impact);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AP - SOLUTION
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Solution);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AQ - EXPLOITABILITY
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Exploitability);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AR - ASSOCIATED_MALWARE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.AssociatedMalware);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AS - RESULTS
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Results);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AT - PCI_VULN
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PCIVuln);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AU - TICKET_STATE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TicketState);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AV - INSTANCE
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Instance);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AW - CATEGORY
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Category);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AX - ASSOCIATED_TAGS
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.AssociatedTags);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AY - EQUIPOS QUE ESTAN EN CVT(SI/ NO)
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TieneEquipoStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // AZ - TECNOLOGÍAS QUE ESTAN EN CVT(SI / NO)
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TieneTecnologiaStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // BB - PRODUCTOS QUE ESTAN EN CVT(SI / NO)
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TieneProductoStr);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                sheetData.AppendChild(newRow);
            }
        }

        public byte[] ExportarReporteConsolidadoQualy(string dominioIds, string subDominioIds, string productoStr, string tecnologiaStr, int? unidadOrganizativaId, int? squadId, string equipoStr, string estadosVulnerabilidad, bool? tieneEquipoAsignado, bool? tieneProductoAsignado, bool? tieneTecnologiaAsignado)
        {
            Console.WriteLine("***** Obteniendo Ruta de Plantilla *****");
            var rutaExe = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "App_Data", "Plantilla");
            Console.WriteLine("***** Obteniendo Ruta de Plantilla en bytes *****");
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaExe, "PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    Console.WriteLine("***** Obteniendo Estilos *****");
                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    //var totalRows = 0;
                    
                    int k = 2;
                    var sheetName = "Qualys";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    Console.WriteLine("***** Asignando columnas del Reporte *****");
                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });  //A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });  //B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });  //C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });  //D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });  //E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });  //F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });  //G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });  //H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });  //I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 20D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 20D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 20D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 20D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 20D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 20D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 20D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 20D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 20D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 20D, CustomWidth = true });//X
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 20D, CustomWidth = true });//Y
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 20D, CustomWidth = true });//Z
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 20D, CustomWidth = true });//AA
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 20D, CustomWidth = true });//AB
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 20D, CustomWidth = true });//AC
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 20D, CustomWidth = true });//AD
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 20D, CustomWidth = true });//AE
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 20D, CustomWidth = true });//AF
                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 20D, CustomWidth = true });//AG
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 20D, CustomWidth = true });//AH
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 20D, CustomWidth = true });//AI
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 20D, CustomWidth = true });//AJ
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 20D, CustomWidth = true });//AK
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 20D, CustomWidth = true });//AL
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 20D, CustomWidth = true });//AM
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 20D, CustomWidth = true });//AN
                    columns1.Append(new Column() { Min = 41U, Max = 41U, Width = 20D, CustomWidth = true });//AO
                    columns1.Append(new Column() { Min = 42U, Max = 42U, Width = 20D, CustomWidth = true });//AP
                    columns1.Append(new Column() { Min = 43U, Max = 43U, Width = 20D, CustomWidth = true });//AQ
                    columns1.Append(new Column() { Min = 44U, Max = 44U, Width = 20D, CustomWidth = true });//AR
                    columns1.Append(new Column() { Min = 45U, Max = 45U, Width = 20D, CustomWidth = true });//AS
                    columns1.Append(new Column() { Min = 46U, Max = 46U, Width = 20D, CustomWidth = true });//AT
                    columns1.Append(new Column() { Min = 47U, Max = 47U, Width = 20D, CustomWidth = true });//AU
                    columns1.Append(new Column() { Min = 48U, Max = 48U, Width = 20D, CustomWidth = true });//AV
                    columns1.Append(new Column() { Min = 49U, Max = 49U, Width = 20D, CustomWidth = true });//AW
                    columns1.Append(new Column() { Min = 50U, Max = 50U, Width = 20D, CustomWidth = true });//AX
                    columns1.Append(new Column() { Min = 51U, Max = 51U, Width = 20D, CustomWidth = true });//AY
                    columns1.Append(new Column() { Min = 52U, Max = 52U, Width = 20D, CustomWidth = true });//AZ
                    columns1.Append(new Column() { Min = 53U, Max = 53U, Width = 20D, CustomWidth = true });//BB

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Productos con interacciones entre servidores", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:BB1" });

                    Console.WriteLine("***** Asignando Títulos *****");
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "SubDominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "QID", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "DNS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "NetBIOS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "TRACKING METHOD", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "SO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "IP STATUS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "TITLE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "VULN STATUS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "TYPE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "SEVERITY", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "PORT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "PROTOCOL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "FQDN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "SSL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "FIRST DETECTED", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "LAST DETECTED", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "TIMES DETECTED", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "DATE LAST FIXED", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "FIRST REOPENED", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "LAST REOPENED", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "TIMES REOPENED", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "CVE ID", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "VENDOR REFERENCE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "BUGTRAQ ID", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "CVSS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "CVSS BASE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "CVSS TEMPORAL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "CVSS ENVIROMENT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "CVSS3", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "CVSS3 BASE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "CVSS3 TEMPORAL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "THREAT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "IMPACT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "SOLUTION", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, "EXPLOITABILITY", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, "ASSOCIATED MALWARE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AS", k, TipoDato.Cadena, "RESULTS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AT", k, TipoDato.Cadena, "PCI VULN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AU", k, TipoDato.Cadena, "TICKET STATE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AV", k, TipoDato.Cadena, "INSTANCE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AW", k, TipoDato.Cadena, "CATEGORY", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AX", k, TipoDato.Cadena, "ASSOCIATED TAGS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AY", k, TipoDato.Cadena, "EQUIPOS QUE ESTAN EN CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AZ", k, TipoDato.Cadena, "TECNOLOGÍAS QUE ESTAN EN CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BB", k, TipoDato.Cadena, "PRODUCTOS QUE ESTAN EN CVT", string.Empty, estilos.INDICE_CABECERA);

                    Console.WriteLine("***** Obteniendo Datos de la BD - bloque 1 *****");
                    //var datos = new List<QualyConsolidadoDto>();
                    decimal pageNumber = 1M;
                    decimal pageSize = 300000M;
                    if (worksheetPart != null)
                    {
                        //var datos = ServiceManager<QualyDAO>.Provider.GetQualysConsolidadoExportar(dominioIds, subDominioIds, productoStr, tecnologiaStr, unidadOrganizativaId, squadId, equipoStr, estadosVulnerabilidad, tieneEquipoAsignado, tieneProductoAsignado, tieneTecnologiaAsignado, (int)pageNumber, (int)pageSize, out int totalRows);
                        var datos = ServiceManager<QualyDAO>.Provider.GetQualysConsolidadoExportar((int)pageNumber, (int)pageSize, out int totalRows);
                        if (datos.Count > 0)
                        {
                            SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                            //ListarReporteConsolidadoQualyAddSheetData(datos, sheetData, estilos);
                            //datos.AddRange(datosTemporal);
                            //decimal pageNumberMax = Math.Ceiling(totalRows / pageSize);

                            //for (int i = (int)pageNumber + 1; i <= (int)pageNumberMax; i++)
                            //{
                            //    datos = new List<QualyConsolidadoDto>();
                            //    Console.WriteLine($"***** Obteniendo Datos de la BD - bloque {i} *****");
                            //    datos = ServiceManager<QualyDAO>.Provider.GetQualysConsolidadoExportar(i, (int)pageSize, out totalRows);
                            //    ListarReporteConsolidadoQualyAddSheetData(datos, sheetData, estilos);
                            //    //datos.AddRange(datosTemporal);
                            //}
                        }
                    }


                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarArquetipo(string nombre, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ArquetipoDAO>.Provider.GetArquetipo(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Arquetipos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de arquetipos", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Entorno", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo arquetipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "# Tecnologias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fecha Registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EntornoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoArquetipoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Codigo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.NumTecAsociadas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarRelacion(string codigoAPT, string componente/*int equipoId*/, string username, string sortName, string sortOrder, int? tipoRelacionId, int? estadoId, int perfil)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<RelacionDAO>.Provider.GetRelacionSP(codigoAPT, componente, 1, int.MaxValue, sortName, sortOrder, username, tipoRelacionId, estadoId, perfil, out totalRows);

                    int k = 2;
                    var sheetName = "Relación de Tecnologías";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Relación", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Aplicacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología / Servidor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Relevancia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Usuario Creador", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AplicacionStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoTecnologiaStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RelevanciaStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecAsocASubdom(string nombre, int subdominioId, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<SubdominioDAO>.Provider.GetTecBySubdom(subdominioId, nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologías asociadas al subdominio";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 25D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 25D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 25D, CustomWidth = true });//J
                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologías asociadas", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:J1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Versión", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Dueño", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de lanzamiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha extendida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fecha fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha interna", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubdominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Versiones);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dueno);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaLanzamientoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaExtendidaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAcordadaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAplicaciones(string nombre
            , string sortName
            , string sortOrder
            , string gerencias
            , string divisiones
            , string unidades
            , string areas
            , string estados
            , string aplicacion
            , string jefeequipo
            , string owner
            , int perfilId
            , string matricula
            ,string pci)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginacionAplicacion paginacion = new PaginacionAplicacion();
                    paginacion.nombre = nombre;
                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;
                    paginacion.Gerencias = gerencias == null ? new List<string>() : gerencias.Split('|').ToList();
                    paginacion.Divisiones = divisiones == null ? new List<string>() : divisiones.Split('|').ToList();
                    paginacion.Unidades = unidades == null ? new List<string>() : unidades.Split('|').ToList();
                    paginacion.Areas = areas == null ? new List<string>() : areas.Split('|').ToList();
                    paginacion.Estados = estados == null ? new List<string>() : estados.Split('|').ToList();
                    paginacion.PCIS = pci == null ? new List<string>() : pci.Split('|').ToList();
                    paginacion.JefeEquipo = jefeequipo;
                    paginacion.Owner = owner;
                    paginacion.Aplicacion = aplicacion;
                    paginacion.PerfilId = perfilId;
                    paginacion.Matricula = matricula;

                    if (paginacion.Gerencias.Count == 1)
                    {
                        var tmp = paginacion.Gerencias[0];
                        if (string.IsNullOrWhiteSpace(tmp))
                            paginacion.Gerencias.Clear();
                    }

                    if (paginacion.Divisiones.Count == 1)
                    {
                        var tmp = paginacion.Divisiones[0];
                        if (string.IsNullOrWhiteSpace(tmp))
                            paginacion.Divisiones.Clear();
                    }

                    if (paginacion.Unidades.Count == 1)
                    {
                        var tmp = paginacion.Unidades[0];
                        if (string.IsNullOrWhiteSpace(tmp))
                            paginacion.Unidades.Clear();
                    }

                    if (paginacion.Areas.Count == 1)
                    {
                        var tmp = paginacion.Areas[0];
                        if (string.IsNullOrWhiteSpace(tmp))
                            paginacion.Areas.Clear();
                    }

                    if (paginacion.Estados.Count == 1)
                    {
                        var tmp = paginacion.Estados[0];
                        if (string.IsNullOrWhiteSpace(tmp))
                            paginacion.Estados.Clear();
                    }
                    if (paginacion.PCIS.Count == 1)
                    {
                        var tmp = paginacion.PCIS[0];
                        if (string.IsNullOrWhiteSpace(tmp))
                            paginacion.PCIS.Clear();
                    }
                    var datos = new List<AplicacionDTO>();

                    if (perfilId == (int)EPerfilBCP.Administrador)
                        datos = ServiceManager<AplicacionDAO>.Provider.GetAplicacion(paginacion, out totalRows);
                    else
                        datos = ServiceManager<AplicacionDAO>.Provider.GetAplicacionVistaConsultor(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 50D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 50D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 50D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 50D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 50D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 50D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 50D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 50D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 50D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 50D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 50D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 50D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 50D, CustomWidth = true });//O

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de aplicaciones", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:O1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Total de servidores relacionados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Nombre de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Owner/Líder Usuario/Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Experto/Especialista", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Tipo activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Gerencia central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Fecha de ultima actualización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Tratamiento PCI DSS", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalEquiposRelacionados.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CriticidadToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreEquipo_Squad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JefeEquipo_ExpertoAplicacionUserIT_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Owner_LiderUsuario_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Experto_Especialista);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GerenciaCentral);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ListaPCI);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarExcepcion(string filtro, string username, string sortName, string sortOrder, string codigoAPT, int? tecnologiaId, int? equipoId, int? tipoExcepcionId, string tituloMensaje)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ExcepcionDAO>.Provider.GetList(filtro, username, 1, int.MaxValue, sortName, sortOrder, codigoAPT, tecnologiaId, equipoId, tipoExcepcionId, out totalRows);

                    int k = 2;
                    var sheetName = tituloMensaje;//"Excepciones por riesgo";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 40D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    //columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte de {0}", tituloMensaje)/*"BCP - Reporte de Excepciones por Riesgo"*/, string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha fin de la excepción", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue("-");
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TecnologiaStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubdominioStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.FechaFinExcepcionFormato);
                            //newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasTecnicas(DateTime fechaConsulta, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<AlertaDAO>.Provider.GetAlertasTecnicasExportar(fechaConsulta, sortName, sortOrder);

                    int k = 2;
                    var sheetName = "Alertas técnicas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 12D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 80D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 90D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 90D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas técnicas", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo Alerta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Alerta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Detalle", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Utilitarios.GetEnumDescription2(ETipoAlerta.Tecnica));
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Alerta.Nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Detalle);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaHoraCreacionFormato);
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo1(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var idsEstados = new List<int>{
                                (int)EstadoTecnologia.Registrado,
                                (int)EstadoTecnologia.EnRevision
                            };
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiasXEstado(idsEstados, 1, 99999999, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 28D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 28D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 24D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Registro de una tecnología con estado pendiente", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Clave tecnológica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Usuario de Registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaHoraCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo2(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiasSinEquivalencia(1, 99999999, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 28D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 28D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 45D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 24D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Presencia de una tecnología sin equivalencia en el catálogo  ", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Clave tecnológica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Usuario de Registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaHoraCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo3(int idSubdominio, DateTime fechaConsulta, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var datos = ServiceManager<EquipoDAO>.Provider.GetEquiposSinSistemaOperativo(idSubdominio, fechaConsulta, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Equipos sin sistema operativo", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Temporal", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha Último Escaneo Correcto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Último Escaneo Error", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalDescripcion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoErrorStr);
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo4(DateTime fechaConsulta, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var datos = ServiceManager<EquipoDAO>.Provider.GetEquiposSinTecnologias(fechaConsulta, 1, 99999999, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Equipos sin tecnologías instaladas", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Temporal", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha Último Escaneo Correcto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Último Escaneo Error", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalDescripcion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoErrorStr);
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo5(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;
                    var idsTipoEquipo = new int[]{
                        (int)ETipoEquipo.Servidor,
                        (int)ETipoEquipo.ServidorAgencia
                    };

                    var datos = ServiceManager<EquipoDAO>.Provider.GetEquiposSinRelaciones(idsTipoEquipo, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Equipos (del tipo servidor) sin relación a aplicaciones del portafolio", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha Último Escaneo Correcto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Último Escaneo Error", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalToString);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoErrorStr);
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo6(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiasSinFechasSoporte(1, 99999999, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 28D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 28D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 24D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 24D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Tecnologías sin fechas de soporte configuradas en la solución", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Clave tecnológica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Cálculo Tec", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Usuario de Registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTec.HasValue ? item.FechaCalculoTec.Value.ToString() : "-");
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaHoraCreacionFormato);
                            newRow.AppendChild(cell);



                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo7(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;
                    var idsTipoEquipo = new int[]{
                        (int)ETipoEquipo.ServicioNube
                    };

                    var datos = ServiceManager<EquipoDAO>.Provider.GetEquiposSinRelaciones(idsTipoEquipo, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 40D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 40D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 40D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Equipos (del tipo servicio en nube) sin relación a aplicaciones del portafolio", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha Último Escaneo Correcto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Último Escaneo Error", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Suscripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Grupo recursos", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoErrorStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SuscripcionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRecursosStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo8(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var datos = ServiceManager<UrlAplicacionDAO>.Provider.GetAlertaFuncional_UrlHuerfana_Detalle(1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 28D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 28D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 24D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 24D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - URL sin relacion con aplicativo", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Url", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha última actualización", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Url);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UrlFuenteIdStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(string.IsNullOrEmpty(item.FechaCreacionFormat) ? "-" : item.FechaCreacionFormat);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(string.IsNullOrEmpty(item.FechaUltimaActualizacionStr) ? "-" : item.FechaUltimaActualizacionStr);
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasFuncionalesTipo9(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var datos = ServiceManager<TecnologiaNoRegistradaDAO>.Provider.GetEquipoNoRegSP("", 0, 0, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Alertas funcionales";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 28D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 28D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 24D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 24D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Alertas funcionales - Equipos no registrados en el catálogo", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "IP del Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre del equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Origen", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Motivo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Sistema operativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPEquipo);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreEquipo);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.OrigenToString);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MotivoToString);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SistemaOperativo);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(string.IsNullOrEmpty(item.FechaRegistroToString) ? "-" : item.FechaRegistroToString);
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ObtenerPlantillaCIS()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaCargaServidores.xlsx");
            return archivoBytes;
        }

        public byte[] ExportarTecAsocAFam(int id, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<FamiliaDAO>.Provider.GetTecByFamilia(id, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Familias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G           

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de familias", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Asignado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de asignacíon", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubdominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarEquiposNoRegistrados(string nombre, int motivo, int origen, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var datos = ServiceManager<TecnologiaNoRegistradaDAO>.Provider.GetEquipoNoRegSP(nombre, motivo, origen, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    //var datos = new List<TecnologiaNoRegistradaDTO>();


                    int k = 2;
                    var sheetName = "Equipos no registrados";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de equipos no registrados", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "IP del Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre del equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Origen", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Motivo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Sistema Operativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Origen.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Motivo.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SistemaOperativo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaRegistroToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();

                }

                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasNoRegistradas(string nombre, string equivalencia, int tipoEquipoId, string sortName, string sortOrder)
        {
            //var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    //var datos = ServiceManager<TecnologiaNoRegistradaDAO>.Provider.GetTecNoReg(nombre, tipoEquipoId, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    var datos = ServiceManager<TecnologiaNoRegistradaDAO>.Provider.GetTecNoRegSP(nombre, equivalencia, tipoEquipoId, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologías no registradas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologías no registradas", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Total equipos impactados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha fin soporte extendido", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Total.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteExtendidoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormat);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region Hoja 2

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    //var datosDetalle = ServiceManager<TecnologiaDAO>.Provider.GetReportEquipos(filtros);
                    var datosDetalle = ServiceManager<TecnologiaNoRegistradaDAO>.Provider.GetTecNoRegSP_Detalle(nombre, equivalencia, tipoEquipoId, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 18D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 27D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 44D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Total equipos impactados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Fecha fin soporte extendido", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Fecha creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datosDetalle)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteExtendidoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormat);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }


                    #endregion

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasEquivalentes(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecEqByTec(0, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Equivalencias de tecnologías";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de equivalencias de tecnologías", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Equivalencia", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubdominioTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteGerenciaDivisionesConsultor(string aplicacion, string estado, string sortName, string sortOrder, string fecha, string matricula)
        {
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            var filtros = new PaginaReporteGerencia()
            {
                Aplicacion = aplicacion,
                Estado = estado,
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = sortOrder,
                sortName = sortName,
                Fecha = fecha,
                Matricula = matricula
            };

            var filtrosOriginal = new PaginaReporteGerencia()
            {
                Aplicacion = aplicacion,
                Estado = estado,
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = sortOrder,
                sortName = sortName,
                Fecha = fecha,
                Matricula = matricula
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivisionConsultor(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 40D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 40D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 40D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 40D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 40D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 40D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 40D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 40D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 40D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 40D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 40D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 15D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 15D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 15D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 15D, CustomWidth = true });//X

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Gerencia Central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Soportado por/Tribu", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Clasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Owner/Líder Usuario/Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Experto/Especialista", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Gestor/Usuario autorizador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Broker", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "# servidores relacionados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "# tecnologías relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "# tecnologías obsoletas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "KPI Obsolescencia", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.ReporteIndicadorActual).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion1).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion2).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleCriticidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GerenciaCentral);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RoadMap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JefeEquipo_ExpertoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribeTechnicalLead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Owner_LiderUsuario_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ExpertoEspecialista);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BrokerSistemas);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ListaPCI);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalServidores.HasValue ? item.TotalServidores.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologias.HasValue ? item.TotalTecnologias.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologiasObsoletas.HasValue ? item.TotalTecnologiasObsoletas.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.IndiceObsolescencia.HasValue ? item.IndiceObsolescencia.Value : 0).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                                newRow.AppendChild(cell);
                            }

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "C", 2, "C", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "D", 2, "D", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    totalRows = 0;
                    var datos2 = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivisionDetalleConsultor(filtrosOriginal, out totalRows);
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 24D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 27D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 27D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns2.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J
                    columns2.Append(new Column() { Min = 11U, Max = 11U, Width = 15D, CustomWidth = true });//K                    
                    columns2.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L
                    columns2.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tipo componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "J", k, TipoDato.Cadena, "Fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "K", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "L", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "M", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.EstadoToString);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            if (item.TipoTecnologia == "No estándar")
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                            else
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            if (!string.IsNullOrWhiteSpace(item.ClaveTecnologia))
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                                //cell.CellValue = new CellValue("0");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                                //cell.CellValue = new CellValue("0");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                                //cell.CellValue = new CellValue("1");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin tecnología");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin tecnología");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin tecnología");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    pageMargins1 = worksheetPart2.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "K", 2, "K", datos2.Count + 1));

                    conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "L", 2, "L", datos2.Count + 1));

                    conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos2.Count + 1));

                    conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteGerenciaResponsable(string matricula)
        {
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    //var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivisionResponsable(matricula, (int)EPortafolioResponsable.Owner);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 40D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 40D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 40D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 40D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 40D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 40D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 40D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 40D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 40D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 40D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 40D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 15D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 15D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 15D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 15D, CustomWidth = true });//X

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Gerencia Central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Soportado por/Tribu", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Clasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Owner/Líder Usuario/Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Experto/Especialista", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Gestor/Usuario autorizador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Broker", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "# servidores relacionados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "# tecnologías relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "# tecnologías obsoletas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "KPI Obsolescencia", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.ReporteIndicadorActual).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion1).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion2).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleCriticidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GerenciaCentral);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RoadMap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JefeEquipo_ExpertoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribeTechnicalLead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Owner_LiderUsuario_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ExpertoEspecialista);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BrokerSistemas);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalServidores.HasValue ? item.TotalServidores.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologias.HasValue ? item.TotalTecnologias.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologiasObsoletas.HasValue ? item.TotalTecnologiasObsoletas.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.Priorizacion.HasValue ? item.Priorizacion.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "C", 2, "C", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "D", 2, "D", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    //totalRows = 0;

                    var datos2 = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivisionDetalleResponsableAplicaciones(matricula, (int)EPortafolioResponsable.Owner);
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 24D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 27D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 27D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns2.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J
                    columns2.Append(new Column() { Min = 11U, Max = 11U, Width = 15D, CustomWidth = true });//K                    
                    columns2.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L
                    columns2.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tipo componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "J", k, TipoDato.Cadena, "Fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "K", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "L", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "M", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.EstadoToString);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            //cell.CellValue = new CellValue("0");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            //cell.CellValue = new CellValue("0");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            //cell.CellValue = new CellValue("1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    pageMargins1 = worksheetPart2.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "K", 2, "K", datos2.Count + 1));

                    conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "L", 2, "L", datos2.Count + 1));

                    conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos2.Count + 1));

                    conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteGerenciaDivisiones(string gerencia, string division, string gestionado, string aplicacion, string jefe, string owner, string experto, string estado, string sortName, string sortOrder, string area, string unidad, string tipoActivo, string gestor, string fecha, string ttl, string broker, string clasificacion, string subclasificacion)
        {
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            var filtros = new PaginaReporteGerencia()
            {
                Aplicacion = aplicacion,
                Division = division,
                Gerencia = gerencia,
                Gestionado = gestionado,
                JefeEquipo = jefe,
                Owner = owner,
                Experto = experto,
                Estado = estado,
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = sortOrder,
                sortName = sortName,
                Area = area,
                Unidad = unidad,
                TipoActivo = tipoActivo,
                Gestor = gestor,
                Fecha = fecha,
                TTL = ttl,
                Broker = broker,
                ClasificacionTecnica = clasificacion,
                SubclasificacionTecnica = subclasificacion
            };

            var filtrosOriginal = new PaginaReporteGerencia()
            {
                Aplicacion = aplicacion,
                Division = division,
                Gerencia = gerencia,
                Gestionado = gestionado,
                JefeEquipo = jefe,
                Owner = owner,
                Experto = experto,
                Estado = estado,
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = sortOrder,
                sortName = sortName,
                Area = area,
                Unidad = unidad,
                TipoActivo = tipoActivo,
                Gestor = gestor,
                Fecha = fecha,
                TTL = ttl,
                Broker = broker,
                ClasificacionTecnica = clasificacion,
                SubclasificacionTecnica = subclasificacion
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivision(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 40D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 40D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 40D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 40D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 40D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 40D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 40D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 40D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 40D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 40D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 40D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 40D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 15D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 15D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 15D, CustomWidth = true });//X
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 15D, CustomWidth = true });//X

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Gerencia Central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Soportado por/Tribu", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Clasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Owner/Líder Usuario/Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Experto/Especialista", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Gestor/Usuario autorizador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Broker", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Tratamiento PCI DSS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "# servidores relacionados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "# tecnologías relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "# tecnologías obsoletas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "KPI Obsolescencia", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.ReporteIndicadorActual).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion1).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion2).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleCriticidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GerenciaCentral);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RoadMap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JefeEquipo_ExpertoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribeTechnicalLead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Owner_LiderUsuario_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ExpertoEspecialista);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BrokerSistemas);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ListaPCI);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalServidores.HasValue ? item.TotalServidores.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologias.HasValue ? item.TotalTecnologias.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologiasObsoletas.HasValue ? item.TotalTecnologiasObsoletas.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            if (item.EquipoSinTecnologiasYServidores)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin relaciones");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue((item.IndiceObsolescencia.HasValue ? item.IndiceObsolescencia.Value : 0).ToString());
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                                newRow.AppendChild(cell);
                            }                            

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "C", 2, "C", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "D", 2, "D", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    totalRows = 0;
                    var datos2 = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivisionDetalle(filtrosOriginal, out totalRows);
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 24D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 27D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 27D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns2.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J
                    columns2.Append(new Column() { Min = 11U, Max = 11U, Width = 15D, CustomWidth = true });//K                    
                    columns2.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L
                    columns2.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tipo componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "J", k, TipoDato.Cadena, "Fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "K", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "L", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "M", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();

                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.EstadoToString);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            if (item.TipoTecnologia == "No estándar")
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                            else
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            if (!string.IsNullOrWhiteSpace(item.ClaveTecnologia))
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                                //cell.CellValue = new CellValue("0");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                                //cell.CellValue = new CellValue("0");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.Number;
                                cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                                //cell.CellValue = new CellValue("1");
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin tecnología");                                
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin tecnología");                                
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue("Sin tecnología");                                
                                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD_RED.ToString());
                                newRow.AppendChild(cell);
                            }

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    pageMargins1 = worksheetPart2.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "K", 2, "K", datos2.Count + 1));

                    conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "L", 2, "L", datos2.Count + 1));

                    conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos2.Count + 1));

                    conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAplicacionesVinculadas(string nombre, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<RelacionDAO>.Provider.GetAplicacionVinculada(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones relacionadas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de aplicaciones relacionadas", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación relación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Recurso relacionado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPTStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.VinculoCodigoAPTStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleVinculo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    //#endregion
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteGuardicore()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<GuardicoreDAO>.Provider.GetGuardicoreExportar();

                    int k = 2;

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", "Reporte Guardicore");

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Sistema Operativo Guardicore", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha de Escaneo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Ip", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Etiqueta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Sistema Operativo CVT", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.estado);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.so);
                            newRow.AppendChild(cell);

                            var fecha = (new DateTime(1970, 1, 1)).AddMilliseconds(double.Parse(item.fechaescaneo));

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(fecha.ToShortDateString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ip);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.etiqueta);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SOTecnologia);
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionEquipos(string filtro, int tipoEquipoId, List<int> tipoEquipoIds, int desId, int exCalculoId, int? flagActivo, int? subsidiariaId, string sortName, string sortOrder, int perfilId, string matricula)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = new List<EquipoDTO>();
                    if (perfilId == (int)EPerfilBCP.Administrador)
                        datos = ServiceManager<EquipoDAO>.Provider.GetEquipo(filtro, tipoEquipoId, tipoEquipoIds, desId, exCalculoId, flagActivo, subsidiariaId, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    else
                        datos = ServiceManager<EquipoDAO>.Provider.GetEquipoConsultor(filtro, tipoEquipoId, desId, exCalculoId, flagActivo, subsidiariaId, 1, int.MaxValue, sortName, sortOrder, matricula, out totalRows);

                    int k = 2;
                    //var sheetName = "Equipo";
                    var sheetName = flagActivo != null ? "Equipos" : "Equipos desactivados";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    if (flagActivo != null)
                    {
                        columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                        columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                        columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                        columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                        columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                        columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                        columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G
                        columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 25D, CustomWidth = true });//H
                        columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 25D, CustomWidth = true });//I
                        columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 25D, CustomWidth = true });//J
                        columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 25D, CustomWidth = true });//K
                    }
                    else
                    {
                        columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                        columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                        columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                        columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                        columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    }

                    if (flagActivo != null)
                    {
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "¿Excluido en cálculos?", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Subsidiaria", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Sistema operativo", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Usuario creador", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha cambio estado", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Usuario cambio estado", string.Empty, estilos.INDICE_CABECERA);
                    }
                    else
                    {
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha último escaneo correcto", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha último escaneo error", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Modificación", string.Empty, estilos.INDICE_CABECERA);
                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            newRow.AppendChild(cell);

                            if (flagActivo != null)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.TemporalToString);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.Ambiente);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.FlagExcluirCalculoStr);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.Subsidiaria);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.SistemaOperativo);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.UsuarioCreacion);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.FechaCreacionFormato);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.FechaCambioEstadoStr);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.UsuarioCambioEstado);
                                newRow.AppendChild(cell);
                            }
                            else
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.FechaUltimoEscaneoErrorStr);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.FechaModificacionStr);
                                newRow.AppendChild(cell);
                            }

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionEquipoAppliance(string filtro, string filtroEquipo, int? flagActivo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var meses1 = int.Parse(ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor);
                    var meses2 = int.Parse(ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor);
                    var datos = new List<EquipoDTO>();

                    var filtros = new PaginacionEquipo()
                    {
                        nombre = filtro,
                        NombreEquipo = filtroEquipo,
                        flagActivo = flagActivo,
                        sortName = "Nombre",
                        sortOrder = "asc",
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };

                    datos = ServiceManager<EquipoDAO>.Provider.GetEquipoAppliance(filtros, out totalRows);
                    //if (perfilId == (int)EPerfilBCP.Administrador)
                    //    datos = ServiceManager<EquipoDAO>.Provider.GetEquipo(filtro, tipoEquipoId, tipoEquipoIds, desId, exCalculoId, flagActivo, subsidiariaId, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    //else
                    //    datos = ServiceManager<EquipoDAO>.Provider.GetEquipoConsultor(filtro, tipoEquipoId, desId, exCalculoId, flagActivo, subsidiariaId, 1, int.MaxValue, sortName, sortOrder, matricula, out totalRows);

                    int k = 1;
                    var sheetName = "Equipos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F                    
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 25D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 25D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 25D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 25D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 25D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 25D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 25D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 25D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 25D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 25D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 25D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 25D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 25D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 25D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 25D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 25D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 25D, CustomWidth = true });//X
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 25D, CustomWidth = true });//Y
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 25D, CustomWidth = true });//Z
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 25D, CustomWidth = true });//AA
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 25D, CustomWidth = true });//AB
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 25D, CustomWidth = true });//AC
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 25D, CustomWidth = true });//AD
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 25D, CustomWidth = true });//AE
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 25D, CustomWidth = true });//AF
                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 25D, CustomWidth = true });//AG
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 25D, CustomWidth = true });//AH
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 25D, CustomWidth = true });//AI
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 25D, CustomWidth = true });//AJ
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 25D, CustomWidth = true });//AK
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 25D, CustomWidth = true });//AL
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 25D, CustomWidth = true });//AM
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 25D, CustomWidth = true });//AN
                    columns1.Append(new Column() { Min = 41U, Max = 41U, Width = 25D, CustomWidth = true });//AO
                    columns1.Append(new Column() { Min = 42U, Max = 42U, Width = 25D, CustomWidth = true });//AP
                    columns1.Append(new Column() { Min = 43U, Max = 43U, Width = 25D, CustomWidth = true });//AQ
                    columns1.Append(new Column() { Min = 44U, Max = 44U, Width = 25D, CustomWidth = true });//AR

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "¿Excluido en cálculos?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Subsidiaria", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tipo activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Serial", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Modelo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Vendor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Tecnologia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Version", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Hostname", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Dimensión", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Arquitecto Seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Soporte Primer Nivel", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Proveedor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Fecha Adquisición", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Fecha Implementación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Fecha Ultima Renovación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Vencimiento Licencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Cantidad Licencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Forma Licenciamiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Codigo Inventario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "CyberSOC", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "Sede", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "Sala", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "RACK", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Ubicacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Backup", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "Backup Frecuencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "Backup Descripcion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "Integracion Gestor Inteligencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "Conector SIEM", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "CONA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Umbral CPU", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "Umbral Memoria", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Umbral Disco", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "Ventana de mantenimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "Indicador actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, string.Format("Indicador {0} meses", meses1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, string.Format("Indicador {0} meses", meses2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Ambiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagExcluirCalculoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subsidiaria);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.TipoActivoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Serial);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Modelo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Vendor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Tecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Version);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Hostname);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.IP);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.DimensionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.ArquitectoSeguridad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.SoportePrimerNivel);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Proveedor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.FechaAdquisicionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.FechaImplementacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.FechaUltimaRenovacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.VencimientoLicenciaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.CantidadLicenciaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.FormaLicenciamiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.CyberSOCStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.SedeStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Sala);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.RACK);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Ubicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.BackupStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.BackupFrecuenciaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.BackupDescripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.IntegracionGestorInteligenciaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.ConectorSIEM);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.ConaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.UmbralCPU);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.UmbralMemoria);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.UmbralDisco);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.CriticidadStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoSoftwareBase.Ventana);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //Indicadores
                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoActual.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoIndicador1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoIndicador2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA K
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "AP", 2, "AP", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "AQ", 2, "AQ", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA M
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "AR", 2, "AR", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteSubdominioObsolescencia(string fecha, string tipoEquipoIds, string subsidiaria, string subdominioFiltrar, string tipoTecnologia)
        {
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            var filtros = new PaginacionDetalleGraficoSubdominio()
            {
                SubdominioToString = subdominioFiltrar,
                TipoEquipoToString = tipoEquipoIds,
                pageNumber = 1,
                Fecha = fecha,
                pageSize = int.MaxValue,
                sortOrder = "ASC",
                sortName = "Nombre",
                SubsidiariaToString = subsidiaria,
                TipoTecnologiaToString = tipoTecnologia
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetDetalleGrafico(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 14D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "H", 2, "H", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "I", 2, "I", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "J", 2, "J", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteEquipoObsolescencia(DateTime fecha, string tipoEquipoIds, string subsidiaria, string subdominioFiltrar)
        {
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            var filtros = new PaginacionDetalleGraficoSubdominio()
            {
                SubdominioToString = subdominioFiltrar,
                TipoEquipoToString = tipoEquipoIds,
                pageNumber = 1,
                FechaFiltro = fecha,
                pageSize = int.MaxValue,
                sortOrder = "ASC",
                sortName = "Nombre",
                SubsidiariaToString = subsidiaria
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetDetalleTecnologiasGrafico(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 14D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "H", 2, "H", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "I", 2, "I", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "J", 2, "J", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteSubdominioEvolucion(string fecha, int tipoEquipoId, int subsidiaria, string subdominioFiltrar)
        {
            var filtros = new PaginacionDetalleGraficoSubdominio()
            {
                SubdominioToString = subdominioFiltrar,
                TipoEquipoId = tipoEquipoId,
                Fecha = fecha,
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = "ASC",
                sortName = "Nombre",
                Subsidiaria = subsidiaria
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetDetalleEvolucionSubdominios(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 14D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado a 12 meses", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Estado a 24 meses", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "G", 2, "G", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "H", 2, "H", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "I", 2, "I", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasSinRelaciones(string dominio, string subdominio, string estadoAprobacion, string familia, string tipo, string estadoObsolescencia, string clave)
        {
            var filtros = new PaginaReporteTecnologiasCustom()
            {
                Clave = clave,
                DominioIds = dominio,
                EstadoAprobacionIds = estadoAprobacion,
                EstadoObsolescencias = estadoObsolescencia,
                Familia = familia,
                SubdominioIds = subdominio,
                Tipos = tipo,
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = "ASC",
                sortName = "ClaveTecnologia"
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinRelaciones(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarEquipos(string nombre, string so, string ambienteIds, string tipoIds, int subdominioSO, string descubrimientoIds, string subsiId, string sortName, string sortOrder, int perfilId, string matricula,string IP)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            nombre = string.IsNullOrEmpty(nombre) ? string.Empty : nombre;
            so = string.IsNullOrEmpty(so) ? string.Empty : so;

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = new List<EquipoDTO>();

                    if (perfilId == (int)EPerfilBCP.Administrador)
                        datos = ServiceManager<EquipoDAO>.Provider.GetEquipos(nombre,IP, so, ambienteIds, tipoIds, subdominioSO, descubrimientoIds, subsiId, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    else
                    {
                        datos = ServiceManager<EquipoDAO>.Provider.GetEquiposConsultor(nombre,IP, so, ambienteIds, tipoIds, subdominioSO, descubrimientoIds, "-1", 1, int.MaxValue, sortName, sortOrder, matricula, out totalRows);
                    }

                    //int k = 2;
                    int k = 1;
                    var sheetName = "Equipo";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D                  
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 25D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Equipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Característica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Sistema operativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de último escaneo correcto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tecnologías instaladas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Subsidiaria", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //CaracteristicaEquipo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CaracteristicaEquipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SistemaOperativo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Ambiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TecnologiasInstaladas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subsidiaria);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    //worksheetPart.Worksheet.InsertBeforeSelf();
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarVistaPorRelaciones(string Aplicacion, string Equipo, List<int> AmbienteIds, string Jefe, string GestionadoPor, string sortName, string sortOrder, int perfilId, string matricula,List<string> pci)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = new List<VistaRelacionDto>();
                    if (perfilId == (int)EPerfilBCP.Administrador
                        || perfilId == (int)EPerfilBCP.Auditoria
                        || perfilId == (int)EPerfilBCP.Seguridad
                        || perfilId == (int)EPerfilBCP.ETICMDB
                        || perfilId == (int)EPerfilBCP.GestorTecnologia
                        || perfilId == (int)EPerfilBCP.Coordinador
                        || perfilId == (int)EPerfilBCP.Operador
                        )
                        datos = ServiceManager<RelacionDAO>.Provider.GetVistaRelacion(Aplicacion, Equipo, AmbienteIds, Jefe, GestionadoPor,pci, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    else
                        datos = ServiceManager<RelacionDAO>.Provider.GetVistaRelacionConsultor(Aplicacion, Equipo, AmbienteIds, Jefe, GestionadoPor, 1, int.MaxValue, sortName, sortOrder, matricula, out totalRows);

                    //int k = 2;
                    int k = 1;
                    var sheetName = "Vista por relaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Jefe de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Tratamiento PCI DSS", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleCriticidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JefeEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoRelacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ListaPCI);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteSinRelaciones(PaginaReporteHuerfanos filtros)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    DateTime fechaActual = DateTime.Now;
                    try
                    {
                        fechaActual = DateTime.ParseExact(filtros.FechaConsulta, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    catch (Exception)
                    {
                        fechaActual = DateTime.Now;
                    }

                    var parametroSO = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("SUBDOMINIO_SISTEMA_OPERATIVO").Valor;

                    var datos = ServiceManager<ReporteDAO>.Provider.GetServidoresHuerfanos(filtros, fechaActual, int.Parse(parametroSO), out totalRows);

                    int k = 1;
                    var sheetName = "Equipos sin relaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Sistema operativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tecnologías instaladas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha última actualización", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SistemaOperativo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TecnologiasInstaladas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagTemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UltimaActualizacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteTecnologiasSinRelaciones(PaginaReporteTecnologiasCustom filtros)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinRelaciones(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Tecnologías sin relaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado de aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fuente de consulta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de fecha configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteAplicacionTecnologia(PaginaReporteGerencia filtros)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var datos = ServiceManager<ReporteDAO>.Provider.GetAplicacionTecnologia(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Aplicaciones y tecnologías";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 15D, CustomWidth = true });//K                    
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L   
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código de aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Relevancia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Relevancia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "K", 2, "K", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "L", 2, "L", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteObsolescenciaAplicaciones(string subdominio, string subsidiaria, string estado, string tipoequipo, string agrupacion, string fecha)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            var fechaFiltro = DateTime.Now;

            try
            {
                fechaFiltro = DateTime.ParseExact(fecha, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            catch (Exception)
            {
                fechaFiltro = DateTime.Now;
            }

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<ReporteDAO>.Provider.GetAgrupacionDetalle(tipoequipo, subdominio, agrupacion, subsidiaria, estado, fechaFiltro);

                    int k = 1;
                    var sheetName = "Aplicaciones obsoletas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I                    


                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Agrupación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fecha fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Agrupacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.ObsoletoIndicador.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA K
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "I", 2, "I", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteTecnologia(PaginaReporteTecnologiasCustom filtros)
        {
            var proyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var proyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var datos = ServiceManager<ReporteDAO>.Provider.GetTecnologias(filtros, out totalRows, true);

                    int k = 1;
                    var sheetName = "Tecnologías";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 15D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M


                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fuente de consulta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo fecha configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha fin configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Roadmap configurado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, string.Format("Estado a {0} meses", proyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, string.Format("Estado a {0} meses", proyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoTecnologiaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Roadmap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoActual.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoIndicador1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoIndicador2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA K
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "K", 2, "K", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "L", 2, "L", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA M
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionEquiposDetalle(string filtro, int tipoEquipoId, int desId, int exCalculoId, string sortName, string sortOrder)
        {
            try
            {
                var datos = ServiceManager<EquipoDAO>.Provider.GetEquipoDetallado(filtro, tipoEquipoId, desId, exCalculoId, 1, int.MaxValue, sortName, sortOrder);

                using (MemoryStream documentStream = new MemoryStream())
                {
                    TextWriter tw = new StreamWriter(documentStream);
                    tw.WriteLine("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}"
                        , "Equipo", "Descubrimiento", "Ambiente", "TipoEquipo", "SistemaOperativo"
                            , "Componente", "DetalleComponente"
                            , "DominioServidor", "Equivalencias"
                            );

                    foreach (var item in datos)
                    {
                        tw.WriteLine("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}"
                            //, tw.NewLine
                            , item.Nombre, item.TemporalToString, item.Ambiente, item.TipoEquipo, item.SistemaOperativo
                            , item.EquipoConfiguracionDTO.Componente, item.EquipoConfiguracionDTO.DetalleComponente
                            , item.DominioServidorDTO.Nombre, item.DominioServidorDTO.Equivalencias
                            );
                        tw.Flush();
                    }
                    documentStream.Position = 0;
                    return documentStream.ToArray();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public byte[] ExportarKPITecnologia(string dominio, string subdominio, string familia, string fabricante, string clave, string tipoEquipo, string subsidiaria, string fecha)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    FiltrosDashboardTecnologia filtros = new FiltrosDashboardTecnologia()
                    {
                        FabricanteFiltrar = fabricante == null ? new List<string>() : fabricante.Split('|').ToList(),
                        ClaveTecnologiaFiltrar = clave == null ? new List<string>() : clave.Split('|').ToList(),
                        DominioFiltrar = dominio == null ? new List<int>() : dominio.Split('|').Select(Int32.Parse).ToList(),
                        SubdominioFiltrar = subdominio == null ? new List<int>() : subdominio.Split('|').Select(Int32.Parse).ToList(),
                        FamiliaFiltrar = familia == null ? new List<int>() : familia.Split('|').Select(Int32.Parse).ToList(),
                        TipoEquipoFiltrar = tipoEquipo == null ? new List<int>() : tipoEquipo.Split('|').Select(Int32.Parse).ToList(),
                        SubsidiariaFiltrar = subsidiaria == null ? new List<string>() : subsidiaria.Split('|').ToList(),
                        Fecha = fecha
                    };
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetReport(filtros, true);

                    List<CustomAutocomplete> listado = new List<CustomAutocomplete>();
                    foreach (var item in datos)
                    {
                        listado.AddRange(item.Data);
                    }
                    int k = 2;
                    var sheetName = "KPI Tecnologías";
                    #region HOJA 1

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 55D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - KPI de Tecnologías", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:C1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Cantidad", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in listado)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoDescripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.value);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }



                    #endregion

                    #region Hoja 2

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    var datosDetalle = ServiceManager<TecnologiaDAO>.Provider.GetReportEquipos(filtros);

                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 18D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 27D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 44D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 19D, CustomWidth = true });//F 

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Tipo de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Clave Tecnológica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Fecha cálculo base", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datosDetalle)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }


                    #endregion

                    spreadSheet.Close();


                }
                return documentStream.ToArray();
            }
        }

        public byte[] ObtenerPlantillaEquipos()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaCargaEquipos.xlsx");
            return archivoBytes;
        }

        public byte[] ObtenerPlantillaExcelByName(string filename)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(filename);
            return archivoBytes;
        }

        public byte[] ExportarEquipoExclusion(string nombre, int tipoExclusionId, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<EquipoDAO>.Provider.GetEquipoExclusion(nombre, tipoExclusionId, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Equipos excluidos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de equipos excluidos", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo exclusión", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Motivo exclusión", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoExclusionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MotivoExclusion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarHistoricoModificacion(string Accion, string Entidad, DateTime? FechaActualizacion, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AuditoriaDAO>.Provider.GetHistoricoModificacion(Accion, Entidad, FechaActualizacion, 1, 10000, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Histórico de modificaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Histórico de modificaciones (10000 últimos registros)", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Entidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Id Asociado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de última actualización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Modificado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de modificación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Entidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EntidadClave);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaOrdenFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CreadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ModificadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaModificacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaEquipoListadoEquipos(int idTecnologia, DateTime fecha, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    FiltrosDashboardTecnologiaEquipos filtros = new FiltrosDashboardTecnologiaEquipos()
                    {
                        TecnologiaIdFiltrar = idTecnologia,
                        FechaConsulta = fecha,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = 999999
                    };
                    var totalRows = 0;
                    var registros = ServiceManager<TecnologiaDAO>.Provider.GetListadoTecnologiaEquipos(filtros, out totalRows);


                    int k = 2;
                    var sheetName = "Equipos";
                    #region HOJA 1

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 24D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 16D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Subsidiaria", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in registros)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Ambiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subsidiaria);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }



                    #endregion

                    spreadSheet.Close();


                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaEquipoListadoAplicaciones(int idTecnologia, DateTime fecha, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    FiltrosDashboardTecnologiaEquipos filtros = new FiltrosDashboardTecnologiaEquipos()
                    {
                        TecnologiaIdFiltrar = idTecnologia,
                        FechaConsulta = fecha,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = 999999
                    };
                    var totalRows = 0;
                    var registros = ServiceManager<TecnologiaDAO>.Provider.GetListadoTecnologiaAplicaciones(filtros, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones";
                    #region HOJA 1

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 24D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 16D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado de relación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in registros)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoRelacionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #endregion

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaEquipoListadoTV(int idTecnologia, DateTime fecha, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    FiltrosDashboardTecnologiaEquipos filtros = new FiltrosDashboardTecnologiaEquipos()
                    {
                        TecnologiaIdFiltrar = idTecnologia,
                        FechaConsulta = fecha,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = 999999
                    };
                    var totalRows = 0;
                    var registros = ServiceManager<TecnologiaDAO>.Provider.GetListadoTecnologiasVinculadas(filtros, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologías vinculadas";
                    #region HOJA 1

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 24D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 16D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha fin", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in registros)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubdominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #endregion

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }


        public byte[] ExportarReporteTecnologia(string nombre, List<int> dominioIds, List<int> subdominioIds, string familiaId, int estadoFecSop, string casoUso, List<int> estadoTecs, string aplica, string codigo, string dueno, string equipo, List<int> tipoTecIds, List<int> estObsIds, int? flagActivo, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetReporteTecnologia(dominioIds, subdominioIds, casoUso, nombre, estadoTecs, familiaId, estadoFecSop, aplica, codigo, dueno, equipo, tipoTecIds, estObsIds, flagActivo, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Reporte tecnología total";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I

                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 41U, Max = 41U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 42U, Max = 42U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 43U, Max = 43U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 44U, Max = 44U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 45U, Max = 45U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 46U, Max = 46U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 47U, Max = 47U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 48U, Max = 48U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 49U, Max = 49U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 50U, Max = 50U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 51U, Max = 51U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 52U, Max = 52U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 53U, Max = 53U, Width = 20D, CustomWidth = true });//K
                    //columns1.Append(new Column() { Min = 54U, Max = 54U, Width = 20D, CustomWidth = true });//K

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologías total", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:AQ1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA); //1
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA); //2
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);//3
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre de la tecnología a estandarizar", string.Empty, estilos.INDICE_CABECERA);//4
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Versiones", string.Empty, estilos.INDICE_CABECERA);//5
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Clave de la Tecnología", string.Empty, estilos.INDICE_CABECERA);//6
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Descripción de la tecnología", string.Empty, estilos.INDICE_CABECERA);//7
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fecha registro", string.Empty, estilos.INDICE_CABECERA);//8
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Usuario registro", string.Empty, estilos.INDICE_CABECERA);//9
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);//10
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);//11
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);//12
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Fecha lanzamiento", string.Empty, estilos.INDICE_CABECERA);//13
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);//14
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Fecha fin extendida", string.Empty, estilos.INDICE_CABECERA);//15
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Fecha fin interna", string.Empty, estilos.INDICE_CABECERA);//16
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Comentarios asociados a la fecha fin de soporte", string.Empty, estilos.INDICE_CABECERA);//17
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Fecha para cálculos", string.Empty, estilos.INDICE_CABECERA);//18
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Existencia de profesionales/vendors con conocimiento de Tecnología", string.Empty, estilos.INDICE_CABECERA);//19
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Facilidad de actualización", string.Empty, estilos.INDICE_CABECERA);//20
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Riesgo de mantenerse obsoleto", string.Empty, estilos.INDICE_CABECERA);//21
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Vulnerabilidad de seguridad", string.Empty, estilos.INDICE_CABECERA);//22
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Casos de uso", string.Empty, estilos.INDICE_CABECERA);//23
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Requisitos de HW/SW, procedimientos previos", string.Empty, estilos.INDICE_CABECERA);//24
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Compatibilidad", string.Empty, estilos.INDICE_CABECERA);//25
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "Aplica a", string.Empty, estilos.INDICE_CABECERA);//26
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "Roadmap de la tecnología", string.Empty, estilos.INDICE_CABECERA);//27
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "Referencias", string.Empty, estilos.INDICE_CABECERA);//28
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "Plan de transferencia de conocimiento", string.Empty, estilos.INDICE_CABECERA);//29
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Esquema monitoreo", string.Empty, estilos.INDICE_CABECERA);//30
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Linea base de seguridad", string.Empty, estilos.INDICE_CABECERA);//31
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "Definición del esquema de patch management", string.Empty, estilos.INDICE_CABECERA);//32
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "Dueño (Owner) de la tecnología", string.Empty, estilos.INDICE_CABECERA);//33
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "Equipo de administración y punto de contacto", string.Empty, estilos.INDICE_CABECERA);//34
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "Grupo de soporte en REMEDY", string.Empty, estilos.INDICE_CABECERA);//35
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "Conformidad de arquitecto de seguridad", string.Empty, estilos.INDICE_CABECERA);//36
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Conformidad de arquitecto de tecnología", string.Empty, estilos.INDICE_CABECERA);//37
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "Encargado de renovación contractual", string.Empty, estilos.INDICE_CABECERA);//38
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Esquema de licenciamiento/subscripción", string.Empty, estilos.INDICE_CABECERA);//39
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "Coordinar contrato para contar con soporte empresarial", string.Empty, estilos.INDICE_CABECERA);//40
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "¿La Tecnología será vigente en la familia?", string.Empty, estilos.INDICE_CABECERA);//41
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "Código de tecnología asignado", string.Empty, estilos.INDICE_CABECERA);//42
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, "Mostrar en site de estándares", string.Empty, estilos.INDICE_CABECERA);//43
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, "Fecha cálculo", string.Empty, estilos.INDICE_CABECERA);//44
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AS", k, TipoDato.Cadena, "Clave", string.Empty, estilos.INDICE_CABECERA);//45
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AT", k, TipoDato.Cadena, "CodigoTecnologiaAsignado", string.Empty, estilos.INDICE_CABECERA);//46
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AU", k, TipoDato.Cadena, "RoadmapOpcional", string.Empty, estilos.INDICE_CABECERA);//47
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AV", k, TipoDato.Cadena, "ConfirmarFamilia", string.Empty, estilos.INDICE_CABECERA);//48
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AW", k, TipoDato.Cadena, "Aprobación", string.Empty, estilos.INDICE_CABECERA);//49
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AX", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);//50
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AY", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);//51
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AZ", k, TipoDato.Cadena, "Fecha de Aprobación", string.Empty, estilos.INDICE_CABECERA);//52
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BA", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);//53
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BB", k, TipoDato.Cadena, "Aprobado por", string.Empty, estilos.INDICE_CABECERA);//54

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //1

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//2

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//6

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Versiones);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//12

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//3

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//7

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaCreacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//9

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//5

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.TipoTecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//4

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FuenteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaLanzamientoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//14

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//13

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaExtendidaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//16

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaAcordadaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//15

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ComentariosFechaFin);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//17

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaCalculoTecStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Existencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//18

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Facilidad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//19

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Riesgo.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//20

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Vulnerabilidad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//21

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CasoUso);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//22

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Requisitos);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//23

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Compatibilidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//24

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Aplica);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//25

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.RoadmapOpcional);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Referencias);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//27

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.PlanTransConocimiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//28

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EsqMonitoreo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//29

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.LineaBaseSeg);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//30

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EsqPatchManagement);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//31

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Dueno);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//32

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EqAdmContacto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);//33

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.GrupoSoporteRemedy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ConfArqSeg);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ConfArqTec);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EncargRenContractual);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EsqLicenciamiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.SoporteEmpresarial);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FlagVigenteFamiliaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CodigoTecnologiaAsignado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FlagSiteEstandarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaCalculoTecStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FlagConfirmarFamiliaStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EstadoTecnologiaStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EstadoStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaCreacionStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaAprobacionStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            //cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.UsuarioAprobacion);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarVisitaSite(string Matricula, string Nombre, DateTime? FechaDesde, DateTime? FechaHasta, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AuditoriaDAO>.Provider.GetVisitaSite(Matricula, Nombre, FechaDesde, FechaHasta, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Visitas del Site";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Histórico de visitas del site", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:D1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Matrícula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Url Visitada", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Matricula);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UrlSite);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaDetalle(string subdominios, DateTime fecha, string owner)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v3.xlsx");
            var totalRows = 0;
            var filtros = new FiltrosDashboardTecnologia()
            {
                SubdominioToString = subdominios,
                FechaFiltro = fecha,
                OwnerFiltro = owner,
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortName = "TotalTecnologias",
                sortOrder = "desc"
            };

            var tecnologias = ServiceManager<ReporteDAO>.Provider.GetReporteDetalleTecnologia(filtros, out totalRows);
            var aplicaciones = ServiceManager<ReporteDAO>.Provider.GetReporteDetalleTecnologia_Aplicacion(filtros, out totalRows);
            var equipos = ServiceManager<ReporteDAO>.Provider.GetReporteDetalleTecnologia_Equipo(filtros, out totalRows);

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    int k = 1;
                    var sheetName = "Tecnologia";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Tecnologia", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Total de tecnologías", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tecnologías obsoletas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tecnologías por vencer", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tecnologías vigentes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Tecnologías indefinidas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Roadmap - Tecnologías por vencer", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Roadmap - Tecnologías por vencer", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Roadmap - Tecnologías vigentes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Roadmap - Tecnologías indefinidas", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in tecnologias)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalTecnologias.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalObsoletos.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalPorVencer.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalVigente.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalIndefinida.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalObsoletosRoadmap.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalPorVencerRoadmap.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalVigenteRoadmap.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalIndefinidaRoadmap.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    k = 1;
                    sheetName = "Aplicacion";

                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Aplicacion", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Total de aplicaciones", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in aplicaciones)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalAplicacion.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    k = 1;
                    sheetName = "Equipo";

                    WorksheetPart worksheetPart3 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Equipo", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns3 = new Columns();
                    SheetData sd3 = worksheetPart3.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd3 != null))
                    {
                        columns3 = worksheetPart3.Worksheet.InsertBefore(new Columns(), sd3);
                    }
                    else
                    {
                        columns3 = new Columns();
                        worksheetPart3.Worksheet.Append(columns3);
                    }

                    columns3.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns3.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns3.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns3.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns3.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns3.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns3.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns3.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "E", k, TipoDato.Cadena, "Total de instalaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "F", k, TipoDato.Cadena, "Instalaciones - Servidores", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "G", k, TipoDato.Cadena, "Instalaciones - Servidores de agencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "H", k, TipoDato.Cadena, "Instalaciones - PCs", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart3 != null)
                    {
                        SheetData sheetData = worksheetPart3.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in equipos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalInstalaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalServidores.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalServidoresAgencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalPCs.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaInstalaciones(string subdominios, DateTime fecha)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            var totalRows = 0;
            var filtros = new FiltrosDashboardTecnologia()
            {
                SubdominioToString = subdominios,
                FechaFiltro = fecha,
                pageNumber = 1,
                pageSize = int.MaxValue
            };

            var tecnologias = ServiceManager<ReporteDAO>.Provider.GetReporteDetalleTecnologiaInstalaciones(filtros, out totalRows);

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    int k = 1;
                    var sheetName = "Tecnologia";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G                    
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    //columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    //columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Total de instalaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Total en servidores", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Total en servidores de agencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Total en PCs", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Total en servicios en la nube", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Total en storage", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Total en appliance", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in tecnologias)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalInstalaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalServidores.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalServidoresAgencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalPCs.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalServicioNube.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.Number;
                            //cell.CellValue = new CellValue(item.TotalStorage.ToString());
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.Number;
                            //cell.CellValue = new CellValue(item.TotalAppliance.ToString());
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            //newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        private EstilosExcel ConfigurarEstilos(SpreadsheetDocument spreadSheet, Stylesheet stylesheet)
        {
            var estilos = new EstilosExcel();

            Fonts fonts = stylesheet.Fonts;

            //Font fontTitulo = (Font)fonts.ToList()[1];
            //FontName fontNameTitulo = new FontName() { Val = "Calibri" };
            //fontTitulo.FontSize = new FontSize() { Val = 18D };
            //fontTitulo.Append(new Bold());
            //fontTitulo.Append(fontNameTitulo);
            //fontTitulo.Append(new Color() { Rgb = "FF000070" });
            //fontTitulo.Append(new Color() { Rgb = "414040" });

            Font font2 = new Font();
            FontSize fontSize2 = new FontSize() { Val = 10D };
            Color color2 = new Color() { Theme = (UInt32Value)1U };
            FontName fontName2 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering2 = new FontFamilyNumbering() { Val = 2 };
            FontScheme fontScheme2 = new FontScheme() { Val = FontSchemeValues.Minor };

            font2.Append(fontSize2);
            font2.Append(color2);
            font2.Append(fontName2);
            font2.Append(fontFamilyNumbering2);
            font2.Append(fontScheme2);

            Font font3 = new Font();
            FontSize fontSize3 = new FontSize() { Val = 10D };
            Color color3 = new Color() { Theme = (UInt32Value)1U };
            FontName fontName3 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering3 = new FontFamilyNumbering() { Val = 2 };
            FontScheme fontScheme3 = new FontScheme() { Val = FontSchemeValues.Minor };

            font3.Append(fontSize3);
            font3.Append(color3);
            font3.Append(fontName3);
            font3.Append(fontFamilyNumbering3);
            font3.Append(fontScheme3);

            Font font4 = new Font();
            Bold bold1 = new Bold();
            FontSize fontSize4 = new FontSize() { Val = 10D };
            Color color4 = new Color() { Theme = (UInt32Value)0U };
            FontName fontName4 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering4 = new FontFamilyNumbering() { Val = 2 };
            FontScheme fontScheme4 = new FontScheme() { Val = FontSchemeValues.Minor };

            font4.Append(bold1);
            font4.Append(fontSize4);
            font4.Append(color4);
            font4.Append(fontName4);
            font4.Append(fontFamilyNumbering4);
            font4.Append(fontScheme4);

            Font font5 = new Font();
            Bold bold2 = new Bold();
            FontSize fontSize5 = new FontSize() { Val = 10D };
            Color color5 = new Color() { Rgb = "FF000000" };
            FontName fontName5 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering5 = new FontFamilyNumbering() { Val = 1 };
            FontScheme fontScheme5 = new FontScheme() { Val = FontSchemeValues.Major };

            font5.Append(bold2);
            font5.Append(fontSize5);
            font5.Append(color5);
            font5.Append(fontName5);
            font5.Append(fontFamilyNumbering5);
            font5.Append(fontScheme5);

            Font font6 = new Font();
            Bold bold3 = new Bold();
            FontSize fontSize6 = new FontSize() { Val = 12D };
            Color color6 = new Color() { Rgb = "FFFFFFFF" }; //HEX8
            FontName fontName6 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering6 = new FontFamilyNumbering() { Val = 2 };
            FontScheme fontScheme6 = new FontScheme() { Val = FontSchemeValues.Minor };

            font6.Append(bold3);
            font6.Append(fontSize6);
            font6.Append(color6);
            font6.Append(fontName6);
            font6.Append(fontFamilyNumbering6);
            font6.Append(fontScheme6);

            Font font7 = new Font();
            Bold bold4 = new Bold();
            FontSize fontSize7 = new FontSize() { Val = 14D };
            Color color7 = new Color() { Rgb = "FF0000FF" }; //HEX8
            FontName fontName7 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering7 = new FontFamilyNumbering() { Val = 2 };
            FontScheme fontScheme7 = new FontScheme() { Val = FontSchemeValues.Minor };

            font7.Append(bold4);
            font7.Append(fontSize7);
            font7.Append(color7);
            font7.Append(fontName7);
            font7.Append(fontFamilyNumbering7);
            font7.Append(fontScheme7);

            Font font8 = new Font();
            Bold bold5 = new Bold();
            FontSize fontSize8 = new FontSize() { Val = 10D };
            Color color8 = new Color() { Theme = (UInt32Value)1U };
            FontName fontName8 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering8 = new FontFamilyNumbering() { Val = 2 };
            FontScheme fontScheme8 = new FontScheme() { Val = FontSchemeValues.Minor };

            font8.Append(bold5);
            font8.Append(fontSize8);
            font8.Append(color8);
            font8.Append(fontName8);
            font8.Append(fontFamilyNumbering8);
            font8.Append(fontScheme8);

            Font font9 = new Font();
            Bold bold6 = new Bold();
            FontSize fontSize9 = new FontSize() { Val = 10D };
            Color color9 = new Color() { Rgb = "FFFF0000" }; //HEX8
            FontName fontName9 = new FontName() { Val = "Calibri" };
            FontFamilyNumbering fontFamilyNumbering9 = new FontFamilyNumbering() { Val = 2 };
            FontScheme fontScheme9 = new FontScheme() { Val = FontSchemeValues.Minor };

            font9.Append(bold6);
            font9.Append(fontSize9);
            font9.Append(color9);
            font9.Append(fontName9);
            font9.Append(fontFamilyNumbering9);
            font9.Append(fontScheme9);

            fonts.Append(font2); //1
            fonts.Append(font3); //2
            fonts.Append(font4); //3
            fonts.Append(font5); //4
            fonts.Append(font6); //5
            fonts.Append(font7); //6
            fonts.Append(font8); //7
            fonts.Append(font9); //8

            Fills fills1 = stylesheet.Fills;

            Fill fill3 = new Fill();
            Fill fill5 = new Fill();

            //ESTILO COLOR DEL TITULO
            Fill fill4 = new Fill();
            PatternFill patternFill4 = new PatternFill() { PatternType = PatternValues.Solid };
            ForegroundColor foregroundColor2 = new ForegroundColor() { Rgb = new HexBinaryValue() { Value = "F7A033" } };
            BackgroundColor backgroundColor2 = new BackgroundColor() { Rgb = new HexBinaryValue() { Value = "F7A033" } };

            patternFill4.Append(foregroundColor2);
            patternFill4.Append(backgroundColor2);

            fill4.Append(patternFill4);

            Fill fill6 = new Fill();
            PatternFill patternFill6 = new PatternFill() { PatternType = PatternValues.Solid };
            ForegroundColor foregroundColor6 = new ForegroundColor() { Rgb = new HexBinaryValue() { Value = "F68B05" } };
            BackgroundColor backgroundColor6 = new BackgroundColor() { Rgb = new HexBinaryValue() { Value = "F68B05" } };
            patternFill6.Append(foregroundColor6);
            patternFill6.Append(backgroundColor6);

            fill6.Append(patternFill6);

            Fill fill7 = new Fill();
            PatternFill patternFill7 = new PatternFill() { PatternType = PatternValues.Solid };
            ForegroundColor foregroundColor7 = new ForegroundColor() { Rgb = new HexBinaryValue() { Value = "FF0000" } };
            BackgroundColor backgroundColor7 = new BackgroundColor() { Rgb = new HexBinaryValue() { Value = "FF0000" } };
            patternFill7.Append(foregroundColor7);
            patternFill7.Append(backgroundColor7);

            fill7.Append(patternFill7);

            fills1.Append(fill3); //1
            fills1.Append(fill4); //2
            fills1.Append(fill5); //3
            fills1.Append(fill6); //4
            fills1.Append(fill7); //5

            Borders borders1 = stylesheet.Borders;


            Border border2 = new Border();

            LeftBorder leftBorder2 = new LeftBorder() { Style = BorderStyleValues.Thin };
            Color color1 = new Color() { Auto = true };

            leftBorder2.Append(color1);

            RightBorder rightBorder2 = new RightBorder() { Style = BorderStyleValues.Thin };
            Color colorA = new Color() { Auto = true };

            rightBorder2.Append(colorA);

            TopBorder topBorder2 = new TopBorder() { Style = BorderStyleValues.Thin };
            Color colorB = new Color() { Auto = true };

            topBorder2.Append(colorB);

            BottomBorder bottomBorder2 = new BottomBorder() { Style = BorderStyleValues.Thin };
            Color colorC = new Color() { Auto = true };

            bottomBorder2.Append(colorC);
            DiagonalBorder diagonalBorder2 = new DiagonalBorder();

            border2.Append(leftBorder2);
            border2.Append(rightBorder2);
            border2.Append(topBorder2);
            border2.Append(bottomBorder2);
            border2.Append(diagonalBorder2);


            borders1.Append(border2);


            //Estilo para los datos 
            CellFormat datosFormat = new CellFormat()
            {
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U
            };

            Alignment alCabecera1 = new Alignment() { Horizontal = HorizontalAlignmentValues.Left, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat.Append(alCabecera1);
            stylesheet.CellFormats.AppendChild(datosFormat);
            estilos.INDICE_DATOS = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            CellFormat datosFormat2 = new CellFormat()
            {
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U
            };

            Alignment alCabecera2 = new Alignment() { Horizontal = HorizontalAlignmentValues.Center, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat2.Append(alCabecera2);
            stylesheet.CellFormats.AppendChild(datosFormat2);
            estilos.INDICE_DATOS_CENTER = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            CellFormat datosFormat3 = new CellFormat()
            {
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U
            };

            Alignment alCabecera3 = new Alignment() { Horizontal = HorizontalAlignmentValues.Right, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat3.Append(alCabecera3);
            stylesheet.CellFormats.AppendChild(datosFormat3);
            estilos.INDICE_DATOS_RIGHT = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            //Cabecera
            CellFormat datosFormat4 = new CellFormat()
            {
                FontId = 5U,
                FillId = 5U,// TODO
                BorderId = 1U
            };

            Alignment alCabecera4 = new Alignment() { Horizontal = HorizontalAlignmentValues.Center, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat4.Append(alCabecera4);
            stylesheet.CellFormats.AppendChild(datosFormat4);
            estilos.INDICE_CABECERA = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            //Agrupacion
            CellFormat datosFormat5 = new CellFormat()
            {
                FontId = (UInt32Value)3U,
                FillId = (UInt32Value)2U,
                BorderId = (UInt32Value)1U
            };

            Alignment alCabecera5 = new Alignment() { Horizontal = HorizontalAlignmentValues.Left, Vertical = VerticalAlignmentValues.Center, WrapText = false };
            datosFormat5.Append(alCabecera5);
            stylesheet.CellFormats.AppendChild(datosFormat5);
            estilos.INDICE_AGRUPACION = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            //Number format

            Fonts fonts1 = stylesheet.GetFirstChild<Fonts>();
            NumberingFormats numberingFormats1 = new NumberingFormats() { Count = (UInt32Value)1U };
            NumberingFormat numberingFormat1 = new NumberingFormat() { NumberFormatId = (UInt32Value)166U, FormatCode = "[$S/.-280A]\\ #,##0.00" };
            NumberingFormat numberingFormat2 = new NumberingFormat() { NumberFormatId = (UInt32Value)3453U, FormatCode = StringValue.FromString("0%") };

            numberingFormats1.Append(numberingFormat1);
            numberingFormats1.Append(numberingFormat2);
            stylesheet.InsertBefore(numberingFormats1, fonts1);


            CellFormat datosFormat6 = new CellFormat()
            {
                NumberFormatId = (UInt32Value)166U,
                FontId = (UInt32Value)0U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U,
                FormatId = (UInt32Value)0U,
                ApplyNumberFormat = true
            };

            stylesheet.CellFormats.AppendChild(datosFormat6);
            estilos.INDICE_CURRENCY = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            CellFormat datosFormat7 = new CellFormat()
            {
                NumberFormatId = (UInt32Value)166U,
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)2U,
                BorderId = (UInt32Value)1U,
                FormatId = (UInt32Value)0U,
                ApplyNumberFormat = true
            };

            stylesheet.CellFormats.AppendChild(datosFormat7);
            estilos.INDICE_CURRENCY_TOTAL = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            //Agrupacion
            CellFormat datosFormat8 = new CellFormat()
            {
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)2U,
                BorderId = (UInt32Value)1U
            };

            Alignment alCabecera6 = new Alignment() { Horizontal = HorizontalAlignmentValues.Right, Vertical = VerticalAlignmentValues.Center, WrapText = false };
            datosFormat8.Append(alCabecera6);
            stylesheet.CellFormats.AppendChild(datosFormat8);
            estilos.INDICE_TOTAL = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;



            CellFormat datosFormat9 = new CellFormat()
            {
                NumberFormatId = (UInt32Value)3453U,
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U,
                FormatId = (UInt32Value)0U,
                ApplyNumberFormat = true
            };

            stylesheet.CellFormats.AppendChild(datosFormat9);
            estilos.INDICE_PERCENT = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            CellFormat datosFormat10 = new CellFormat()
            {
                FontId = (UInt32Value)6U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)0U
            };

            Alignment alCabecera7 = new Alignment() { Horizontal = HorizontalAlignmentValues.Left, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat10.Append(alCabecera7);
            stylesheet.CellFormats.AppendChild(datosFormat10);
            estilos.INDICE_TITULO = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            CellFormat datosFormat11 = new CellFormat()
            {
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)4U,
                BorderId = (UInt32Value)1U
            };

            Alignment alCabecera8 = new Alignment() { Horizontal = HorizontalAlignmentValues.Left, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat11.Append(alCabecera8);
            stylesheet.CellFormats.AppendChild(datosFormat11);
            estilos.INDICE_COLOR = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            CellFormat datosFormat12 = new CellFormat()
            {
                NumberFormatId = (UInt32Value)3453U,
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)2U,
                BorderId = (UInt32Value)1U,
                FormatId = (UInt32Value)0U,
                ApplyNumberFormat = true
            };

            stylesheet.CellFormats.AppendChild(datosFormat12);
            estilos.INDICE_PERCENT_TOTAL = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            CellFormat datosFormat13 = new CellFormat()
            {
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)2U,
                BorderId = (UInt32Value)1U
            };

            Alignment alCabecera13 = new Alignment() { Horizontal = HorizontalAlignmentValues.Right, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat13.Append(alCabecera13);
            stylesheet.CellFormats.AppendChild(datosFormat13);
            estilos.INDICE_DATOS_TOTAL = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            CellFormat datosFormat14 = new CellFormat()
            {
                NumberFormatId = (UInt32Value)3453U,
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)4U,
                BorderId = (UInt32Value)1U,
                FormatId = (UInt32Value)0U,
                ApplyNumberFormat = true
            };

            Alignment alCabecera14 = new Alignment() { Horizontal = HorizontalAlignmentValues.Right, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            datosFormat14.Append(alCabecera14);
            stylesheet.CellFormats.AppendChild(datosFormat14);
            estilos.INDICE_COLOR_TOTAL = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            //Estilo para los datos 
            CellFormat datosFormat15 = new CellFormat()
            {
                FontId = (UInt32Value)7U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U,
            };

            Alignment alCabecera15 = new Alignment() { Horizontal = HorizontalAlignmentValues.Left, Vertical = VerticalAlignmentValues.Center, WrapText = true, };

            datosFormat15.Append(alCabecera15);
            datosFormat15.Append(new Bold());
            stylesheet.CellFormats.AppendChild(datosFormat15);
            estilos.INDICE_DATOS_BOLD = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;

            //Estilo para los datos 
            CellFormat datosFormat16 = new CellFormat()
            {
                FontId = (UInt32Value)8U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U,
            };

            Alignment alCabecera16 = new Alignment() { Horizontal = HorizontalAlignmentValues.Left, Vertical = VerticalAlignmentValues.Center, WrapText = true };
            
            datosFormat16.Append(alCabecera16);
            //datosFormat16.Append(new Bold());
            stylesheet.CellFormats.AppendChild(datosFormat16);
            estilos.INDICE_DATOS_BOLD_RED = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            //Estilo para el detalle de los montos
            CellFormat detalleFormat = new CellFormat()
            {
                FontId = (UInt32Value)2U,
                FillId = (UInt32Value)0U,
                BorderId = (UInt32Value)1U,
                NumberFormatId = (UInt32Value)4U

            };
            Alignment alDetalle = new Alignment() { Horizontal = HorizontalAlignmentValues.Right, Vertical = VerticalAlignmentValues.Center };
            detalleFormat.Append(alDetalle);
            stylesheet.CellFormats.AppendChild(detalleFormat);
            estilos.INDICE_DATOS_DETALLE = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet.CellFormats.Count() - 1;


            return estilos;
        }


        public byte[] ExportarMensajes(string matricula, string nombre, int tipoId, DateTime? fechaRegistro, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AlertaDAO>.Provider.GetMensaje(matricula, nombre, fechaRegistro, tipoId, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Mensajes";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 15D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Mensajes", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Matrícula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Asunto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Mensaje", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Última vista", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Visto por", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreUsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoMensajeStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Asunto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimaVisitaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioUltimaVisita);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarResponsablesAplicacion(string nombre
            , string sortName
            , string sortOrder
            , string gerencia
            , string division
            , string unidad
            , string area
            , string estado
            , string aplicacion
            , string jefeequipo
            , string owner)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginacionAplicacion paginacion = new PaginacionAplicacion();
                    paginacion.nombre = nombre;
                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;
                    paginacion.Gerencia = gerencia;
                    paginacion.Division = division;
                    paginacion.Unidad = unidad;
                    paginacion.Area = area;
                    paginacion.Estado = estado;
                    paginacion.JefeEquipo = jefeequipo;
                    paginacion.Owner = owner;
                    paginacion.Aplicacion = aplicacion;

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetAplicacionResponsables(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de responsables", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Matrícula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResponsableMatricula);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResponsableNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResponsableTipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteOwner(string subdominios, string owner, string fecha, int tipo, string tecnologia)
        {
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            var filtros = new PaginacionOwner()
            {
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = "desc",
                sortName = "IndiceObsolescencia",
                Fecha = fecha,
                Owner = owner,
                SubdominioToString = subdominios,
                TipoTecnologia = tipo,
                Tecnologia = tecnologia
            };

            var filtrosOriginal = new PaginacionOwner()
            {
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = "desc",
                sortName = "IndiceObsolescencia",
                Fecha = fecha,
                Owner = owner,
                SubdominioToString = subdominios,
                TipoTecnologia = tipo,
                Tecnologia = tecnologia
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetReporteOwner(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 15D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 15D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 15D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 15D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 15D, CustomWidth = true });//V                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio Owner (matrícula)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Dominio Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Subdominio Owner (matrícula)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Subdominio Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tecnología Owner (matrícula)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tecnología Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "ClaveTecnologia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Tipo tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Clasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Fecha fin configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Total equipos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Total aplicaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Índice de obsolescencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Riesgo", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaDominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombresDominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaSubdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombresSubdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombresTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.IndicadorObsolescencia).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.IndicadorObsolescencia_Proyeccion1).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.IndicadorObsolescencia_Proyeccion2).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Roadmap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalEquipos.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndiceObsolescencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Riesgo.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "L", 2, "L", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "N", 2, "N", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    totalRows = 0;
                    var datos2 = ServiceManager<ReporteDAO>.Provider.GetReporteOwnerConsolidado(filtrosOriginal, out totalRows);
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "ClaveTecnologia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Tipo de componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Componente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreComponente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaSinFechaFin(string subdominios, DateTime fecha, string tipoTecnologiaId, int tipoConsultaId)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v4.xlsx");
            var totalRows = 0;

            var filtros = new FiltrosDashboardTecnologia()
            {
                SubdominioToString = subdominios,
                FechaFiltro = fecha,
                pageNumber = 1,
                pageSize = int.MaxValue,
                TipoTecnologiaToString = tipoTecnologiaId,
                TipoConsultaId = tipoConsultaId,
                sortName = "TotalComponentes",
                sortOrder = "desc"
            };

            var tecnologiasSinFechaFin = ServiceManager<ReporteDAO>.Provider.GetReporteTecnologiaSinFechaFin(filtros, out totalRows);
            var tecnologiasFechaIndefinida = ServiceManager<ReporteDAO>.Provider.GetReporteTecnologiaFechaIndefinida(filtros, out totalRows);

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    int k = 1;
                    var sheetName = "Tecnología sin fecha fin";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Tecnologia", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Clave tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha cálculo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Site estándar", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Total componentes", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in tecnologiasSinFechaFin)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagSiteEstandarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalComponentes.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    k = 1;
                    sheetName = "Tecnología con fecha indefinida";

                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Aplicacion", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns2.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns2.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns2.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Clave tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Tipo tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Fecha extendida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Fecha acordada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "J", k, TipoDato.Cadena, "Site estándar", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "K", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "L", k, TipoDato.Cadena, "Total componentes", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in tecnologiasFechaIndefinida)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaExtendidaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAcordadaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagSiteEstandarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagFechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalComponentes.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionEquiposActualizar(string filtro, int tipoEquipoId, int desId, int exCalculoId, int? flagActivo, int? subsidiariaId, string sortName, string sortOrder, int perfilId, string matricula)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = new List<EquipoDTO>();
                    datos = ServiceManager<EquipoDAO>.Provider.GetEquipoUpdate(filtro, tipoEquipoId, desId, exCalculoId, flagActivo, subsidiariaId, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 1;
                    //var sheetName = "Equipo";
                    var sheetName = flagActivo != null ? "Equipos" : "Equipos desactivados";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    if (flagActivo != null)
                    {
                        columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                        columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                        columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                        columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    }

                    if (flagActivo != null)
                    {
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Subsidiaria", string.Empty, estilos.INDICE_CABECERA);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            newRow.AppendChild(cell);

                            if (flagActivo != null)
                            {
                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.Ambiente);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.Subsidiaria);
                                newRow.AppendChild(cell);

                                cell = new Cell();
                                cell.DataType = CellValues.String;
                                cell.CellValue = new CellValue(item.ActivoDetalle);
                                newRow.AppendChild(cell);
                            }
                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarEquiposDesactivados(string filtro, List<int> tipoEquipoIds, List<int> subsidiariaIds, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = new List<EquipoDTO>();
                    datos = ServiceManager<EquipoDAO>.Provider.GetEquiposDesactivados(filtro, tipoEquipoIds, subsidiariaIds, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    //var sheetName = "Equipo";
                    var sheetName = "Equipos desactivados";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha último escaneo correcto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha último escaneo error", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Modificación", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoErrorStr);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaModificacionStr);
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteResponsablesPortafolio()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v7.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AlertaDAO>.Provider.GetResponsablesIndicadores(1, int.MaxValue, "CodigoAPT", "asc", out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Indicador TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Indicador JdE/PO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Indicador Broker", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Indicador Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Indicador Experto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Indicador Gestor", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            var ttl = 0;
                            if (item.TotalTtl == 1 && item.TotalTtlNoAplica == 1)
                                ttl = 1;
                            else
                            {
                                if (item.TotalTtlNoAplica == 0 && item.TotalTtl == 0)
                                    ttl = 0;
                                else
                                    ttl = item.TotalTtl;
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(ttl > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var jde = 0;
                            if (item.TotalJde == 1 && item.TotalJdeNoAplica == 1)
                                jde = 1;
                            else
                            {
                                if (item.TotalJde == 0 && item.TotalJdeNoAplica == 0)
                                    jde = 0;
                                else
                                    jde = item.TotalJde;
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(jde > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var broker = 0;
                            if (item.TotalBroker == 1 && item.TotalBrokerNoAplica == 1)
                                broker = 1;
                            else
                            {
                                if (item.TotalBroker == 0 && item.TotalBrokerNoAplica == 0)
                                    broker = 0;
                                else
                                    broker = item.TotalBroker;
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(broker > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var owner = 0;
                            if (item.TotalOwner == 1 && item.TotalOwnerNoAplica == 1)
                                owner = 1;
                            else
                            {
                                if (item.TotalOwner == 0 && item.TotalOwnerNoAplica == 0)
                                    owner = 0;
                                else
                                    owner = item.TotalOwner;

                            }
                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(owner > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var experto = 0;
                            if (item.TotalExperto == 1 && item.TotalExpertoNoAplica == 1)
                                experto = 1;
                            else
                            {
                                if (item.TotalExperto == 0 && item.TotalExpertoNoAplica == 0)
                                    experto = 0;
                                else
                                    experto = item.TotalExperto;

                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(experto > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var gestor = 0;
                            if (item.TotalGestor == 1 && item.TotalGestorNoAplica == 1)
                                gestor = 1;
                            else
                            {
                                if (item.TotalGestor == 0 && item.TotalGestorNoAplica == 0)
                                    gestor = 0;
                                else
                                    gestor = item.TotalGestor;

                            }
                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(gestor > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA E
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA F
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "F", 2, "F", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA G
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "G", 2, "G", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //INDICADORES PARA LA COLUMNA H
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "H", 2, "H", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting4 = new ConditionalFormatting();
                    conditionalFormatting4.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_4);
                    iconSet1.Append(conditionalFormatValueObject2_4);
                    iconSet1.Append(conditionalFormatValueObject3_4);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting4.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting4, pageMargins1);

                    //INDICADORES PARA LA COLUMNA I
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "I", 2, "I", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting5 = new ConditionalFormatting();
                    conditionalFormatting5.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_5 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_5 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_5 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_5);
                    iconSet1.Append(conditionalFormatValueObject2_5);
                    iconSet1.Append(conditionalFormatValueObject3_5);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting5.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting5, pageMargins1);

                    //INDICADORES PARA LA COLUMNA J
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "J", 2, "J", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting6 = new ConditionalFormatting();
                    conditionalFormatting6.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_6 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_6 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_6 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_6);
                    iconSet1.Append(conditionalFormatValueObject2_6);
                    iconSet1.Append(conditionalFormatValueObject3_6);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting6.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting6, pageMargins1);
                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    totalRows = 0;
                    var datos2 = ServiceManager<AlertaDAO>.Provider.GetResponsableDetalle();
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F                    
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G   
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H   

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Codigo aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Estado de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tribe Technical Lead", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Bróker de Sistemas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Owner/Líder Usuario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Gestor/Usuario Autorizador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Experto/Especialista/Lider Técnico", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TTL);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JdE);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Broker);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Owner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Experto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 3
                    //#region HOJA 3
                    HojaDetalleIndicadorResponsable("Consolidado-Gestor", "Responsable1", (int)EPortafolioResponsable.Gestor, "Gestor", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-JdE", "Responsable2", (int)EPortafolioResponsable.JdE, "JdE", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-Broker", "Responsable3", (int)EPortafolioResponsable.Broker, "Broker", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-Owner", "Responsable4", (int)EPortafolioResponsable.Owner, "Owner", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-Experto", "Responsable5", (int)EPortafolioResponsable.Experto, "Experto", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-TTL", "Responsable6", (int)EPortafolioResponsable.TTL, "TTL", spreadSheet, estilos);

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        private void HojaDetalleIndicadorResponsable(string _sheetname, string sheetnameExcel, int _responsableId, string _columname, SpreadsheetDocument spreadSheet, EstilosExcel estilos)
        {
            string sheetName = _sheetname;
            int k = 1;
            var totalRows = 0;

            var datos2 = ServiceManager<AlertaDAO>.Provider.GetResponsableDetalle(_responsableId, 1, int.MaxValue, out totalRows);
            WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, sheetnameExcel, sheetName);

            //Definicion de columnas estáticas
            Columns columns2 = new Columns();
            SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
            if ((sd2 != null))
            {
                columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
            }
            else
            {
                columns2 = new Columns();
                worksheetPart2.Worksheet.Append(columns2);
            }

            columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
            columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
            columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
            columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
            columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
            columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F                    

            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tipo activo", string.Empty, estilos.INDICE_CABECERA);
            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Estado aplicación", string.Empty, estilos.INDICE_CABECERA);
            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, string.Format("Indicador {0}", _columname), string.Empty, estilos.INDICE_CABECERA);
            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Comentario", string.Empty, estilos.INDICE_CABECERA);

            if (worksheetPart2 != null)
            {
                SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                foreach (var item in datos2)
                {
                    Row newRow = new Row();
                    Cell cell = new Cell();

                    cell = new Cell(); cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(item.CodigoAPT);
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                    newRow.AppendChild(cell);

                    cell = new Cell(); cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(item.Nombre);
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                    newRow.AppendChild(cell);

                    cell = new Cell(); cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(item.TipoActivoInformacion);
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                    newRow.AppendChild(cell);

                    cell = new Cell(); cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(item.EstadoAplicacion);
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                    newRow.AppendChild(cell);

                    cell = new Cell(); cell.DataType = CellValues.Number;
                    cell.CellValue = new CellValue(item.Indicador > 0 ? "1" : "-1");
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                    newRow.AppendChild(cell);

                    cell = new Cell(); cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(item.Comentario);
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                    newRow.AppendChild(cell);

                    sheetData.AppendChild(newRow);
                }
            }

            #region INDICADOR_RESPONSABLE
            var pageMargins1 = worksheetPart2.Worksheet.GetFirstChild<PageMargins>();

            //INDICADORES PARA LA COLUMNA E
            var listformat = new ListValue<StringValue>();
            listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", datos2.Count + 1));

            var conditionalFormatting1 = new ConditionalFormatting();
            conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

            var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

            var iconSet1 = new IconSet() { ShowValue = false };

            ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
            ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
            ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

            iconSet1.Append(conditionalFormatValueObject1);
            iconSet1.Append(conditionalFormatValueObject2);
            iconSet1.Append(conditionalFormatValueObject3);

            conditionalFormattingRule1.Append(iconSet1);
            conditionalFormatting1.Append(conditionalFormattingRule1);

            worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

            #endregion
        }

        public byte[] ExportarNotificaciones(string para, string asunto, int tipoId, DateTime? fechaRegistro, string mesesTrimestre, int? anioFiltro)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = new List<NotificacionDTO>();
                    datos = ServiceManager<AlertaDAO>.Provider.GetNotificaciones(para, asunto, mesesTrimestre, anioFiltro, fechaRegistro, tipoId, 1, int.MaxValue, "FechaCreacion", "desc", out totalRows);

                    int k = 2;
                    var sheetName = "Notificaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de notificación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Asunto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Para", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Con Copia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de envío", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoNotificacionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Asunto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Para);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CC);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagEnviadoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaEnvioToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarNotificacionesPortafolio(string para, string asunto, int tipoId, DateTime? fechaRegistro, string mesesTrimestre, int? anioFiltro)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = new List<NotificacionAplicacionDTO>();
                    datos = ServiceManager<AlertaDAO>.Provider.GetNotificacionesPortafolio(para, asunto, mesesTrimestre, anioFiltro, fechaRegistro, tipoId, 1, int.MaxValue, "FechaCreacion", "desc", out totalRows);

                    int k = 2;
                    var sheetName = "Notificaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de notificación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Asunto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Para", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Con Copia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de envío", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoNotificacionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Asunto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Para);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CC);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagEnviadoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaEnvioToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePublicacionAplicacion(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    string IdsTablaProcedenciaAplicacion = $"{(int)ETablaProcedenciaAplicacion.AplicacionData}";

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetPublicacionAplicacion(paginacion, out totalRows);
                    var columnasBD = ServiceManager<AplicacionDAO>.Provider.GetColumnasPublicacionAplicacionToJS2(IdsTablaProcedenciaAplicacion);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    //set columns pos
                    var dt_columnas = datos.Columns.Count - 1;
                    for (int i = 1; i <= dt_columnas; i++)
                    {
                        var minMax = Convert.ToUInt32(i);
                        var item_column = new Column() { Min = minMax, Max = minMax, Width = 35D, CustomWidth = true };
                        columns1.Append(item_column);
                    }

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte publicación de aplicaciones", string.Empty, estilos.INDICE_TITULO);



                    var merge_cell = new MergeCell()
                    {
                        //Reference = string.Format("A1:{0}1", Utilitarios.GetEnumDescription2((ELetraColumnaExcel)dt_columnas))
                        Reference = string.Format("A1:{0}1", Utilitarios.ObtenerLetraExcelByPos(columnasBD.Count))
                    };
                    mergeCells1.Append(merge_cell);

                    //set title columns
                    int pos = 1;


                    foreach (var item in columnasBD)
                    {

                        //string column_name = item.title();
                        //var columnaExcel = columnasBD.FirstOrDefault(x => x.field == column_name);
                        //if (columnaExcel != null)
                        //    column_name = columnaExcel.title;

                        //string letra_column = Utilitarios.GetEnumDescription2((ELetraColumnaExcel)pos);
                        string letra_column = Utilitarios.ObtenerLetraExcelByPos(pos);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, letra_column, k, TipoDato.Cadena, item.title, string.Empty, estilos.INDICE_CABECERA);
                        pos++;

                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (DataRow row in datos.Rows)
                        {
                            Row newRow = new Row();

                            foreach (var item in columnasBD)
                            {


                                foreach (DataColumn column in datos.Columns)
                                {
                                    if (item.field == column.ColumnName)
                                    {
                                        Cell cell = new Cell();
                                        cell.DataType = CellValues.String;
                                        var content = row[column].ToString();
                                        cell.CellValue = new CellValue(content);
                                        cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                                        newRow.AppendChild(cell);
                                    }
                                }
                                pos++;
                            }
                            sheetData.AppendChild(newRow);
                        }
                    }


                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }


        public byte[] ExportarReportePublicacionAplicacionCatalogoAplicaciones2(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AplicacionDAO>.Provider.GetPublicacionAplicacion3(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 40D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 41U, Max = 41U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 42U, Max = 42U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 43U, Max = 43U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 44U, Max = 44U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 45U, Max = 45U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 46U, Max = 46U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 47U, Max = 47U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 48U, Max = 48U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 49U, Max = 49U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 50U, Max = 50U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 51U, Max = 51U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 52U, Max = 52U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 53U, Max = 53U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 54U, Max = 54U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 55U, Max = 55U, Width = 30D, CustomWidth = true });//G
                    //columns1.Append(new Column() { Min = 56U, Max = 56U, Width = 30D, CustomWidth = true });//E
                    //columns1.Append(new Column() { Min = 57U, Max = 57U, Width = 30D, CustomWidth = true });//F
                    //columns1.Append(new Column() { Min = 58U, Max = 58U, Width = 30D, CustomWidth = true });//G


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Catálogo de aplicaciones", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:BF1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código de Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código de interfaz", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Descripcion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo de implementación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tipo de activo de informacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Gerencia central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Division", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Area", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Unidad dueña de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Owner/Líder Usuario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Usuario autorizador/Gestor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Nombre de equipo TI/Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Tribe Lead", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Tribe Technical Lead", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Broker de Sistemas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Experto/Líder técnico", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Area BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Dominio BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "TO BE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Jefatura ATI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Arquitecto Evaluador (Negocio, Solución o Tecnología)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "Entidades Usuarias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "Criticidad de APP según BIA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "Clasificación del Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "Nueva criticidad final de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Producto/Servicio más representativo que soporte la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Menor RTO de los productos soportados (hrs)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "Mayor grado de interrupción (%) respecto a los productos que soporta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "Tratamiento PCI DSS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "TIER PreProduccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "TIER Produccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "Modelo de entrega", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Categoria tecnologica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "URL - Dominio web", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Clasificacion Tecnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "SubClasificacion Tecnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "Tipo de desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "Proveedor de desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, "Infraestructura de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, "Método de autenticación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AS", k, TipoDato.Cadena, "Método de autorización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AT", k, TipoDato.Cadena, "Grupo Ticket Remedy", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AU", k, TipoDato.Cadena, "Resumen Lineamientos de Seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AV", k, TipoDato.Cadena, "Nivel de cumplimiento en Lineamientos de seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AW", k, TipoDato.Cadena, "Flag  Iincumplimiento UserIT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AX", k, TipoDato.Cadena, "Fecha de Formalizacion (de UserIT Pirata)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AY", k, TipoDato.Cadena, "Código APT Padre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AZ", k, TipoDato.Cadena, "Código de aplicación reemplazadaa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BA", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BB", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BC", k, TipoDato.Cadena, "Situación de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BD", k, TipoDato.Cadena, "Fecha primer pase a produccion", string.Empty, estilos.INDICE_CABECERA);

                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BD", k, TipoDato.Cadena, "Fecha de Eliminación", string.Empty, estilos.INDICE_CABECERA);

                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BE", k, TipoDato.Cadena, "Tipo de Eliminación", string.Empty, estilos.INDICE_CABECERA);

                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BF", k, TipoDato.Cadena, "Usuario de Eliminación", string.Empty, estilos.INDICE_CABECERA);



                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.interfaceId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DescripcionAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.implementationType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.assetType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.unit);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Lider_Usuario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Usuario_Autorizador_Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.managed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.teamName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribe_Lead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribe_Technical_Lead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Jefe_Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Broker_Sistemas);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Experto_Lider_tecnico);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BIANarea);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BIANdomain);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.tobe);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.mainOffice);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.architect);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.userEntity);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.applicationCriticalityBIA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.classification);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.finalCriticality);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.starProduct);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.shorterApplicationResponseTime);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.highestDegreeInterruption);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ListaPCI);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.tierPreProduction);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.tierProduction);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.deploymentType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.technologyCategory);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.webDomain);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.technicalClassification);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.technicalSubclassification);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.developmentType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.developmentProvider);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.infrastructure);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.authenticationMethod);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.authorizationMethod);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.groupTicketRemedy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.summaryStandard);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.complianceLevel);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.isFormalApplication);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.regularizationDate));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.parentAPTCode);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.replacementApplication);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.registerDate));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.registrationSituation);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.dateFirstRelease));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(Convert.ToString(item.FechaEliminacion));
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(Convert.ToString(item.TipoEliminacion));
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(Convert.ToString(item.UsuarioEliminacion));
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePublicacionAplicacionCatalogoAplicaciones3(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AplicacionDAO>.Provider.GetPublicacionAplicacion4(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 40D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 41U, Max = 41U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 42U, Max = 42U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 43U, Max = 43U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 44U, Max = 44U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 45U, Max = 45U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 46U, Max = 46U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 47U, Max = 47U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 48U, Max = 48U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 49U, Max = 49U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 50U, Max = 50U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 51U, Max = 51U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 52U, Max = 52U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 53U, Max = 53U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 54U, Max = 54U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 55U, Max = 55U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 56U, Max = 56U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 57U, Max = 57U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 58U, Max = 58U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 59U, Max = 59U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 60U, Max = 60U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 61U, Max = 61U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 62U, Max = 62U, Width = 30D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();
                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Catálogo de aplicaciones", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:BJ1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código de Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código de interfaz", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Descripcion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo de implementación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tipo de activo de informacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Gerencia central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Division", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Area", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Unidad dueña de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Owner/Líder Usuario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Usuario autorizador/Gestor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Nombre de equipo TI/Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Tribe Lead", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Tribe Technical Lead", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Broker de Sistemas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Experto/Líder técnico", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Area BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Dominio BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "TO BE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Jefatura ATI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Arquitecto Evaluador (Negocio, Solución o Tecnología)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "Entidades Usuarias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "Criticidad de APP según BIA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "Clasificación del Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "Nueva criticidad final de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Producto/Servicio más representativo que soporte la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Menor RTO de los productos soportados (hrs)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "Mayor grado de interrupción (%) respecto a los productos que soporta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "Tratamiento PCI DSS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "TIER PreProduccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "TIER Produccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "Modelo de entrega", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Categoria tecnologica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "URL - Dominio web", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Clasificacion Tecnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "SubClasificacion Tecnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "Tipo de desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "Proveedor de desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, "Infraestructura de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, "Método de autenticación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AS", k, TipoDato.Cadena, "Método de autorización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AT", k, TipoDato.Cadena, "Grupo Ticket Remedy", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AU", k, TipoDato.Cadena, "Resumen Lineamientos de Seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AV", k, TipoDato.Cadena, "Nivel de cumplimiento en Lineamientos de seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AW", k, TipoDato.Cadena, "Flag  Iincumplimiento UserIT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AX", k, TipoDato.Cadena, "Fecha de Formalizacion (de UserIT Pirata)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AY", k, TipoDato.Cadena, "Código APT Padre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AZ", k, TipoDato.Cadena, "Código de aplicación reemplazada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BA", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BB", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BC", k, TipoDato.Cadena, "Situación de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BD", k, TipoDato.Cadena, "Fecha primer pase a produccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BE", k, TipoDato.Cadena, "Fecha de Eliminación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BF", k, TipoDato.Cadena, "Tipo de Eliminación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BG", k, TipoDato.Cadena, "Usuario de Eliminación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BH", k, TipoDato.Cadena, "Fecha de Reactivación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BI", k, TipoDato.Cadena, "Estado de Reactivación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BJ", k, TipoDato.Cadena, "Nombre del Solicitante de Reactivación", string.Empty, estilos.INDICE_CABECERA);
                  

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.interfaceId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DescripcionAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.implementationType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.assetType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.unit);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Lider_Usuario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Usuario_Autorizador_Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.managed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.teamName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribe_Lead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribe_Technical_Lead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Jefe_Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Broker_Sistemas);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Experto_Lider_tecnico);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BIANarea);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BIANdomain);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.tobe);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.mainOffice);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.architect);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.userEntity);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.applicationCriticalityBIA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.classification);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.finalCriticality);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.starProduct);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.shorterApplicationResponseTime);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.highestDegreeInterruption);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.ListaPCI));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.tierPreProduction);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.tierProduction);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.deploymentType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.technologyCategory);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.webDomain);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.technicalClassification);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.technicalSubclassification);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.developmentType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.developmentProvider);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.infrastructure);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.authenticationMethod);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.authorizationMethod);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.groupTicketRemedy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.summaryStandard);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.complianceLevel);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.isFormalApplication);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.regularizationDate);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.parentAPTCode);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.replacementApplication);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.registerDate);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.registrationSituation);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.dateFirstRelease);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.FechaEliminacion));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.TipoEliminacion));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.UsuarioEliminacion));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.FechaReactivacion));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.EstadoReactivacion));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.NombreSolicitanteReactivacion));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }                    
                   
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }
        public byte[] ExportarReportePublicacionAplicacionDesestimadas(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    string IdsTablaProcedenciaAplicacion = $"{(int)ETablaProcedenciaAplicacion.InfoCampoPortafolio}";

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetAplicacionesDesestimadas(paginacion, out totalRows);
                    var columnasBD = ServiceManager<AplicacionDAO>.Provider.GetColumnasPublicacionAplicacionToJS2(IdsTablaProcedenciaAplicacion);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    //set columns pos
                    var dt_columnas = datos.Columns.Count - 1;
                    for (int i = 1; i <= dt_columnas; i++)
                    {
                        var minMax = Convert.ToUInt32(i);
                        var item_column = new Column() { Min = minMax, Max = minMax, Width = 35D, CustomWidth = true };
                        columns1.Append(item_column);
                    }

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte publicación de aplicaciones desestimadas", string.Empty, estilos.INDICE_TITULO);



                    var merge_cell = new MergeCell()
                    {
                        //Reference = string.Format("A1:{0}1", Utilitarios.GetEnumDescription2((ELetraColumnaExcel)dt_columnas))
                        Reference = string.Format("A1:{0}1", Utilitarios.ObtenerLetraExcelByPos(columnasBD.Count))
                    };
                    mergeCells1.Append(merge_cell);

                    //set title columns
                    int pos = 1;


                    foreach (var item in columnasBD)
                    {

                        //string column_name = item.title();
                        //var columnaExcel = columnasBD.FirstOrDefault(x => x.field == column_name);
                        //if (columnaExcel != null)
                        //    column_name = columnaExcel.title;

                        //string letra_column = Utilitarios.GetEnumDescription2((ELetraColumnaExcel)pos);
                        string letra_column = Utilitarios.ObtenerLetraExcelByPos(pos);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, letra_column, k, TipoDato.Cadena, item.title, string.Empty, estilos.INDICE_CABECERA);
                        pos++;

                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (DataRow row in datos.Rows)
                        {
                            Row newRow = new Row();

                            foreach (var item in columnasBD)
                            {


                                foreach (DataColumn column in datos.Columns)
                                {
                                    if (item.field == column.ColumnName)
                                    {
                                        Cell cell = new Cell();
                                        cell.DataType = CellValues.String;
                                        var content = row[column].ToString();
                                        cell.CellValue = new CellValue(content);
                                        cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                                        newRow.AppendChild(cell);
                                    }
                                }
                                pos++;
                            }
                            sheetData.AppendChild(newRow);
                        }
                    }


                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePublicacionFormatosRegistro(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    string IdsTablaProcedenciaAplicacion = $"{(int)ETablaProcedenciaAplicacion.InfoCampoPortafolio}";

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetFormatosRegistro(paginacion, out totalRows);
                    var columnasBD = ServiceManager<AplicacionDAO>.Provider.GetColumnasPublicacionAplicacionToJS2(IdsTablaProcedenciaAplicacion);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    //set columns pos
                    var dt_columnas = datos.Columns.Count - 1;
                    for (int i = 1; i <= dt_columnas; i++)
                    {
                        var minMax = Convert.ToUInt32(i);
                        var item_column = new Column() { Min = minMax, Max = minMax, Width = 35D, CustomWidth = true };
                        columns1.Append(item_column);
                    }

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Formatos de Registro", string.Empty, estilos.INDICE_TITULO);



                    var merge_cell = new MergeCell()
                    {
                        //Reference = string.Format("A1:{0}1", Utilitarios.GetEnumDescription2((ELetraColumnaExcel)dt_columnas))
                        Reference = string.Format("A1:{0}1", Utilitarios.ObtenerLetraExcelByPos(columnasBD.Count))
                    };
                    mergeCells1.Append(merge_cell);

                    //set title columns
                    int pos = 1;


                    foreach (var item in columnasBD)
                    {

                        //string column_name = item.title();
                        //var columnaExcel = columnasBD.FirstOrDefault(x => x.field == column_name);
                        //if (columnaExcel != null)
                        //    column_name = columnaExcel.title;

                        //string letra_column = Utilitarios.GetEnumDescription2((ELetraColumnaExcel)pos);
                        string letra_column = Utilitarios.ObtenerLetraExcelByPos(pos);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, letra_column, k, TipoDato.Cadena, item.title, string.Empty, estilos.INDICE_CABECERA);
                        pos++;

                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (DataRow row in datos.Rows)
                        {
                            Row newRow = new Row();

                            foreach (var item in columnasBD)
                            {


                                foreach (DataColumn column in datos.Columns)
                                {
                                    if (item.field == column.ColumnName)
                                    {
                                        Cell cell = new Cell();
                                        cell.DataType = CellValues.String;
                                        var content = row[column].ToString();
                                        cell.CellValue = new CellValue(content);
                                        cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                                        newRow.AppendChild(cell);
                                    }
                                }
                                pos++;
                            }
                            sheetData.AppendChild(newRow);
                        }
                    }


                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePublicacionAplicacionCatalogoAplicaciones(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    string IdsTablaProcedenciaAplicacion = $"{(int)ETablaProcedenciaAplicacion.InfoCampoPortafolio}";

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetPublicacionAplicacion(paginacion, out totalRows);
                    var columnasBD = ServiceManager<AplicacionDAO>.Provider.GetColumnasPublicacionAplicacionToJS2(IdsTablaProcedenciaAplicacion);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    //set columns pos
                    var dt_columnas = datos.Columns.Count - 1;
                    for (int i = 1; i <= dt_columnas; i++)
                    {
                        var minMax = Convert.ToUInt32(i);
                        var item_column = new Column() { Min = minMax, Max = minMax, Width = 35D, CustomWidth = true };
                        columns1.Append(item_column);
                    }

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Catálogo de aplicaciones", string.Empty, estilos.INDICE_TITULO);



                    var merge_cell = new MergeCell()
                    {
                        //Reference = string.Format("A1:{0}1", Utilitarios.GetEnumDescription2((ELetraColumnaExcel)dt_columnas))
                        Reference = string.Format("A1:{0}1", Utilitarios.ObtenerLetraExcelByPos(columnasBD.Count))
                    };
                    mergeCells1.Append(merge_cell);

                    //set title columns
                    int pos = 1;


                    foreach (var item in columnasBD)
                    {

                        //string column_name = item.title();
                        //var columnaExcel = columnasBD.FirstOrDefault(x => x.field == column_name);
                        //if (columnaExcel != null)
                        //    column_name = columnaExcel.title;

                        //string letra_column = Utilitarios.GetEnumDescription2((ELetraColumnaExcel)pos);
                        string letra_column = Utilitarios.ObtenerLetraExcelByPos(pos);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, letra_column, k, TipoDato.Cadena, item.title, string.Empty, estilos.INDICE_CABECERA);
                        pos++;

                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (DataRow row in datos.Rows)
                        {
                            Row newRow = new Row();

                            foreach (var item in columnasBD)
                            {


                                foreach (DataColumn column in datos.Columns)
                                {
                                    if (item.field == column.ColumnName)
                                    {
                                        Cell cell = new Cell();
                                        cell.DataType = CellValues.String;
                                        var content = row[column].ToString();
                                        cell.CellValue = new CellValue(content);
                                        cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                                        newRow.AppendChild(cell);
                                    }



                                }
                                pos++;
                            }
                            sheetData.AppendChild(newRow);
                        }
                    }


                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }




        public byte[] ExportarReporteConsultas(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ApplicationDAO>.Provider.GetConsultas(paginacion.tipoId, paginacion.Respondido, paginacion.pageNumber, paginacion.pageSize, paginacion.sortName, paginacion.sortOrder, paginacion.Matricula, paginacion.Desde, paginacion.Hasta, out totalRows);

                    int k = 2;
                    var sheetName = "Tipos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 70D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 70D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Consultas", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Fecha de Consulta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de Consulta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Consulta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha de Respuesta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Respuesta Portafolio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Nombre de Usuario Consultante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Matricula de Usuario Consultante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Email de Usuario Consultante", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaConsultaF);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoConsultaName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Consulta);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaRespuestaF);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RespuestaPortafolio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreUsuarioConsultor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaUsuarioConsultor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EmailUsuarioConsultor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteSolicitudes(PaginationSolicitud paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ApplicationDAO>.Provider.GetSolicitud(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "Solicitudes de eliminación";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 70D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 70D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Solicitudes de  Eliminación", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Estado solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Fecha solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Comentarios del portafolio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Nombre aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoSolicitudName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(item.FechaCreacion));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ObservacionesRechazo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);





                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAppUserIT(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    PaginationApplication filter = new PaginationApplication();

                    filter.applicationId = paginacion.applicationId;
                    filter.Status = paginacion.Estado == "" ? -1 : Convert.ToInt32(paginacion.Estado);
                    filter.Username = paginacion.Username;
                    filter.pageNumber = paginacion.pageNumber;
                    filter.pageSize = paginacion.pageSize;
                    filter.sortName = paginacion.sortName;
                    filter.sortOrder = paginacion.sortOrder;

                    var datos = ServiceManager<ApplicationDAO>.Provider.GetApplicationUserIT(filter, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones UserIT";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 70D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 70D, CustomWidth = true });//E


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Aplicaciones User IT", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código de Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre de Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.applicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.name);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.description);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.assetTypeName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.statusDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePublicacionAplicacionNuevo(PaginacionReporteAplicacion paginacion)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v8.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    string IdsTablaProcedenciaAplicacion = $"{(int)ETablaProcedenciaAplicacion.InfoCampoPortafolio}";

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetPublicacionAplicacionPortafolioAplicaciones(paginacion, out totalRows);
                    var columnasBD = ServiceManager<AplicacionDAO>.Provider.GetColumnasPublicacionAplicacionToJS2(IdsTablaProcedenciaAplicacion);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    //set columns pos
                    var dt_columnas = datos.Columns.Count - 1;
                    for (int i = 1; i <= dt_columnas; i++)
                    {
                        var minMax = Convert.ToUInt32(i);
                        var item_column = new Column() { Min = minMax, Max = minMax, Width = 35D, CustomWidth = true };
                        columns1.Append(item_column);
                    }

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Listado de aplicaciones", string.Empty, estilos.INDICE_TITULO);



                    var merge_cell = new MergeCell()
                    {
                        //Reference = string.Format("A1:{0}1", Utilitarios.GetEnumDescription2((ELetraColumnaExcel)dt_columnas))
                        Reference = string.Format("A1:{0}1", Utilitarios.ObtenerLetraExcelByPos(columnasBD.Count))
                    };
                    mergeCells1.Append(merge_cell);

                    //set title columns
                    int pos = 1;


                    foreach (var item in columnasBD)
                    {

                        //string column_name = item.title();
                        //var columnaExcel = columnasBD.FirstOrDefault(x => x.field == column_name);
                        //if (columnaExcel != null)
                        //    column_name = columnaExcel.title;

                        //string letra_column = Utilitarios.GetEnumDescription2((ELetraColumnaExcel)pos);
                        string letra_column = Utilitarios.ObtenerLetraExcelByPos(pos);
                        OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, letra_column, k, TipoDato.Cadena, item.title, string.Empty, estilos.INDICE_CABECERA);
                        pos++;

                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (DataRow row in datos.Rows)
                        {
                            Row newRow = new Row();

                            foreach (var item in columnasBD)
                            {


                                foreach (DataColumn column in datos.Columns)
                                {
                                    if (item.field == column.ColumnName)
                                    {
                                        Cell cell = new Cell();
                                        cell.DataType = CellValues.String;
                                        var content = row[column].ToString();
                                        cell.CellValue = new CellValue(content);
                                        cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                                        newRow.AppendChild(cell);
                                        break;
                                    }
                                }
                                pos++;
                            }
                            sheetData.AppendChild(newRow);
                        }
                    }


                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);                    

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioEstado_RelacionAplicaciones(FiltrosReporteEstadoPortafolio reporte)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteEstadoPortafolio(reporte);

                    int k = 2;
                    var sheetName = "Relación de Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 35D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 45D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 35D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 35D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 35D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 11U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 15.5D, CustomWidth = true });//K

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Estado - Relacion de Aplicaciones", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:K1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Criticidad BIA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Categoría", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Nivel de \nCumplimiento", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.Rows)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CriticidadBIAToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Categoria);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.NivelCumplimiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }



        public byte[] ExportarReportePortafolioEstado_DistribucionAplicacionesBanco(FiltrosReporteEstadoPortafolio reporte)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteEstadoPortafolio(reporte);

                    int k = 2;
                    var sheetName = "Distribuciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 8D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 40D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 60D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 36D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 36D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G 

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, String.Format("BCP - Reporte portafolio - {0}", reporte.TituloReporte), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);



                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.Rows)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioEstado_DistribucionAplicaciones(FiltrosReporteEstadoPortafolio reporte)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteEstadoPortafolio(reporte);

                    int k = 2;
                    var sheetName = "Distribución de aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 8D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 40D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 60D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 36D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 36D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 36D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 25D, CustomWidth = true });//G 
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//G 

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - {0}", reporte.TituloReporte), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.Rows)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioEstado_DistribucionAplicacionesByEstado(FiltrosReporteEstadoPortafolio reporte)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteEstadoPortafolio(reporte);

                    int k = 2;
                    var sheetName = "Distribución por estado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 8D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 40D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 60D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 36D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 36D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G 

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte portafolio - {0}", reporte.TituloReporte), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });


                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.Rows)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioEstado_DistribucionAplicacionesByCriticidad(FiltrosReporteEstadoPortafolio reporte)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteEstadoPortafolio(reporte);

                    int k = 2;
                    var sheetName = "Distribución por criticidad";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 8D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 40D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 60D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 36D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 36D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G 
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//G 

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte portafolio - {0}", reporte.TituloReporte), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Criticidad BIA", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.Rows)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CriticidadBIAToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioEstado_DistribucionAplicacionesByCategoria(FiltrosReporteEstadoPortafolio reporte)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteEstadoPortafolio(reporte);

                    int k = 2;
                    var sheetName = "Distr. categoría tecnológica";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 8D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 40D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 60D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 36D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 36D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G 
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 18D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte portafolio - {0}", reporte.TituloReporte), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:D1" });


                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Categoría", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.Rows)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Categoria);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioEstado_SaludAplicacion(FiltrosReporteEstadoPortafolio reporte)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetDataSaludAplicationsExport(reporte);

                    int k = 2;
                    var sheetName = "Salud de aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 8D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 40D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 60D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 36D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 36D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G 
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 18D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte portafolio - {0}", reporte.TituloReporte), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:D1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Nivel de \nCumplimiento", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoToStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.NivelCumplimiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        #region Reporte Portafolio Varioacion
        public byte[] ExportarReportePortafolioVariacion_SolicitudesCreadas(FiltrosReporteVariacionPortafolio reporte, string fechaConsulta, string periodoTiempo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioVariacion_SolicitudesCreadas(reporte, true);
                    if (reporte.FechaHasta == DateTime.MinValue)
                    {
                        DateTime? fechaBase = null;
                        if (datos.SolicitudesData.Count == 0)
                        {
                            fechaBase = ServiceManager<ReportePortafolioDAO>.Provider.ObtenerFechaBaseReporte(reporte.FechaDesde, reporte.nroPeriodos, reporte.Frecuencia);
                        }
                        else
                        {
                            fechaBase = datos.SolicitudesData.First().FechaDesde;
                        }

                        fechaConsulta = FormatearFechaPeriodo(fechaBase, reporte.nroPeriodos, periodoTiempo);

                    }
                    int k = 2;
                    var sheetName = "EvoluciónSolicitudesCreación";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 13D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 35D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//D

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte de Variación - Evolución de creación de aplicaciones ({0})", fechaConsulta), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Frecuencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.SolicitudesData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaMostrarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AplicacionNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioVariacion_SolicitudesEliminadas(FiltrosReporteVariacionPortafolio reporte, string fechaConsulta, string periodoTiempo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioVariacion_SolicitudesEliminadas(reporte, true);
                    if (reporte.FechaHasta == DateTime.MinValue)
                    {
                        DateTime? fechaBase = null;
                        if (datos.SolicitudesData.Count == 0)
                        {
                            fechaBase = ServiceManager<ReportePortafolioDAO>.Provider.ObtenerFechaBaseReporte(reporte.FechaDesde, reporte.nroPeriodos, reporte.Frecuencia);
                        }
                        else
                        {
                            fechaBase = datos.SolicitudesData.First().FechaDesde;
                        }

                        fechaConsulta = FormatearFechaPeriodo(fechaBase, reporte.nroPeriodos, periodoTiempo);
                    }
                    int k = 2;
                    var sheetName = "EvoluciónSolicitudesEliminación";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }



                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 13D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 35D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//D

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte de Variación - Evolución de eliminación de aplicaciones ({0})", fechaConsulta), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Frecuencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Fecha de eliminación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.SolicitudesData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaMostrarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AplicacionNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioVariacion_SolicitudesCreadasEliminadas(FiltrosReporteVariacionPortafolio reporte, string fechaConsulta, string periodoTiempo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioVariacion_SolicitudesCreadasEliminadas(reporte, true);
                    if (reporte.FechaHasta == DateTime.MinValue)
                    {
                        DateTime? fechaBase = null;
                        if (datos.SolicitudesData.Count == 0)
                        {
                            fechaBase = ServiceManager<ReportePortafolioDAO>.Provider.ObtenerFechaBaseReporte(reporte.FechaDesde, reporte.nroPeriodos, reporte.Frecuencia);
                        }
                        else
                        {
                            fechaBase = datos.SolicitudesData.First().FechaDesde;
                        }

                        fechaConsulta = FormatearFechaPeriodo(fechaBase, reporte.nroPeriodos, periodoTiempo);
                    }

                    int k = 2;
                    var sheetName = "Aplicac. nuevas y eliminadas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 15D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 13D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 35D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//D


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, String.Format("BCP - Reporte de Variación - Aplicaciones nuevas y eliminadas por {0}  ({1})", reporte.periodoTiempo, fechaConsulta), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Frecuencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de creación / eliminación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.SolicitudesData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FrecuenciaNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaMostrarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AplicacionNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioVariacion_SolicitudesXEstado(FiltrosReporteVariacionPortafolio reporte, string fechaConsulta, string periodoTiempo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioVariacion_Estados(reporte, true);

                    if (reporte.FechaHasta == DateTime.MinValue)
                    {
                        DateTime? fechaBase = null;
                        if (datos.SolicitudesData.Count == 0)
                        {
                            fechaBase = ServiceManager<ReportePortafolioDAO>.Provider.ObtenerFechaBaseReporte(reporte.FechaDesde, reporte.nroPeriodos, reporte.Frecuencia);
                        }
                        else
                        {
                            fechaBase = datos.SolicitudesData.First().FechaDesde;
                        }

                        fechaConsulta = FormatearFechaPeriodo(fechaBase, reporte.nroPeriodos, periodoTiempo);
                    }

                    int k = 2;
                    var sheetName = "Estados por periodo de tiempo";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 13D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 35D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//D

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte de Variación - Estados por {0}  ({1})", reporte.periodoTiempo, fechaConsulta), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Frecuencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Fecha de corte", string.Empty, estilos.INDICE_CABECERA);

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.SolicitudesData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FreezeDate.HasValue ? item.FreezeDate.Value.ToString("dd/MM/yyyy") : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AplicacionNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioVariacion_DistribucionXGerencia(FiltrosReporteVariacionPortafolio reporte, int id, string nomGerencia, string fechaConsulta, string periodoTiempo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioVariacion_DistrXGerencia(reporte, true, id);

                    if (reporte.FechaHasta == DateTime.MinValue)
                    {
                        DateTime? fechaBase = null;
                        if (datos.SolicitudesData.Count == 0)
                        {
                            fechaBase = ServiceManager<ReportePortafolioDAO>.Provider.ObtenerFechaBaseReporte(reporte.FechaDesde, reporte.nroPeriodos, reporte.Frecuencia);
                        }
                        else
                        {
                            fechaBase = datos.SolicitudesData.First().FechaDesde;
                        }

                        fechaConsulta = FormatearFechaPeriodo(fechaBase, reporte.nroPeriodos, periodoTiempo);
                    }

                    var dato = datos.SolicitudesData.FirstOrDefault();
                    int k = 2;
                    var sheetName = "Distribución por Gerencia";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 15D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 40D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Reporte de Variación - Distribución por Gerencia: {nomGerencia}  ({fechaConsulta})", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Fecha Corte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre del Aplicativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.SolicitudesData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FreezeDate.HasValue ? item.FreezeDate.Value.ToString("dd/MM/yyyy") : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AplicacionNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CriticidadNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }


        private static string FormatearFechaPeriodo(DateTime? fechaBase, int nroPeriodos, string periodoTiempo)
        {
            string fechaConsulta;

            if (nroPeriodos != 0)
            {
                fechaConsulta = string.Format("Por {2} - Fecha base: {1}, nro. periodos: {0}", nroPeriodos, fechaBase.Value.ToString("dd/MM/yyyy"), periodoTiempo);
            }
            else
            {
                fechaConsulta = string.Format("Por {1} - Fecha base: {0}", fechaBase.Value.ToString("dd/MM/yyyy"), periodoTiempo);
            }

            return fechaConsulta;
        }

        #endregion

        #region Reporte Portafolio Pedidos

        public byte[] ExportarReportePortafolioPedido_EstadoAtencion(FiltrosReportePedidosPortafolio reporte, string tituloFechas)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioPedido_DistrByTipoAtencionAcumulada(reporte, true);
                    datos.ChartReportData = (from a in datos.ChartReportData
                                             where !string.IsNullOrEmpty(a.Estado)
                                             select a).ToList();

                    int k = 2;
                    var sheetName = "Distr. x Atencion Acumulada";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 12D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 15D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 22D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 35D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 40D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 35D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 25D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 25D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 25D, CustomWidth = true });//L

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - Distribuciones por tipo de atención (acumulado) ({0})", tituloFechas), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:L1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Estado ID", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha Tipo Atención", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Nombre Aplicativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.ChartReportData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoId.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Estado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fecha.Value.ToString("dd/MM/yyyy"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }
        public byte[] ExportarReportePortafolioPedido_Consultas(FiltrosReportePedidosPortafolio reporte, string tituloFechas)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioPedido_Consultas(reporte, true);
                    datos.ChartReportData = (from a in datos.ChartReportData
                                             where !string.IsNullOrEmpty(a.Estado)
                                             select a).ToList();

                    int k = 2;
                    var sheetName = "Consultas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 12D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 15D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 22D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 35D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 40D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 35D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 25D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 25D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 11U, Max = 10U, Width = 25D, CustomWidth = true });//L

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - Consultas ({0})", tituloFechas), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:L1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo Consulta Id", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Consulta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha Tipo Atención", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Consulta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.ChartReportData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoId.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Estado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fecha.Value.ToString("dd/MM/yyyy"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.ApplicationId);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioPedido_EstadoAtencionXTiempo(FiltrosReportePedidosPortafolio reporte, string tituloFechas)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioPedido_DistrByTipoAtencionPeriodo(reporte, true);
                    datos.ChartReportData = (from a in datos.ChartReportData
                                             where !string.IsNullOrEmpty(a.Estado)
                                             select a).ToList();
                    int k = 2;
                    var sheetName = "Distr. por Atencion (Periodo)";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 12D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 15D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 35D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 40D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 40D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 25D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 25D, CustomWidth = true });//K7
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 25D, CustomWidth = true });//K

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - Distribuciones por tipo de atención (por periodo de tiempo) ({0})", tituloFechas), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:L1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Estado ID", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de Atención", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de Atención", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Nombre Aplicativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.ChartReportData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoId.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Estado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fecha.HasValue ? item.Fecha.Value.ToString("dd/MM/yyyy") : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioPedido_ConsultasPortafolio(FiltrosReportePedidosPortafolio reporte, string tituloFechas)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioPedido_ConsultasPortafolio(reporte, true);

                    int k = 2;
                    var sheetName = "Consultas al Portafolio";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 35D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 55D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - Datos de consultas al portafolio ({0})", tituloFechas), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:C1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Matrícula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de Consulta", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.ChartReportData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Matricula);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fecha.HasValue ? item.Fecha.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioPedido_CamposRequeridos(FiltrosReportePedidosPortafolio reporte, string tituloFechas)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var lstCampos = new List<string>();
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioPedido_CamposMasRequeridos(reporte, true);
                    datos.ChartReportData = (from a in datos.ChartReportData
                                             where a.Fecha.HasValue
                                             select a).ToList();

                    int k = 2;
                    var sheetName = "Campos más Requeridos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 18D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 38D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 35D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 35D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 40D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 35D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 35D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 35D, CustomWidth = true });//
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 35D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 35D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 38D, CustomWidth = true });//K
                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - Campos más requeridos (top 5) para actualización en promedio ({0})", tituloFechas), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:N1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Fecha de actualización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Usuario que realizó actualización", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Columna ID", string.Empty, estilos.INDICE_CABECERA);

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Columna actualizada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Valor Anterior", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Nuevo Valor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.ChartReportData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fecha.HasValue ? item.Fecha.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Usuario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ColumnaNombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ValorAnterior);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NuevoValor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioPedido_RegistroAPP(FiltrosReportePedidosPortafolio reporte, string tituloFechas)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioPedido_RegistroAPP(reporte, true);
                    datos.ChartReportData = (from a in datos.ChartReportData
                                             where a.Fecha.HasValue
                                             select a).ToList();

                    int k = 2;
                    var sheetName = "Registro de App";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 10D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 35D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 13D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20.5D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 13D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 18D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 18D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 40D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 35D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 35D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 35D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 25D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 25D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 25D, CustomWidth = true });//N

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - Días reales de registro de app (situacion de registro)  ({0})", tituloFechas), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:N1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha Registro de Situación Completa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Días de Situación Completa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Días Aprobado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.ChartReportData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fecha.HasValue ? item.Fecha.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaRegistroSituacion.HasValue ? item.FechaRegistroSituacion.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAprobacion.HasValue ? item.FechaAprobacion.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Dias.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.DiasAprobado.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReportePortafolioPedido_SLA(FiltrosReportePedidosPortafolio reporte, string tituloFechas)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReportePortafolioPedido_SLA(reporte, true);
                    datos.ChartReportData = (from a in datos.ChartReportData
                                             where !string.IsNullOrEmpty(a.ApplicationId)
                                             select a).ToList();
                    int k = 2;
                    var sheetName = "SLA";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 13D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 35D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 14D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 14D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 14D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 14D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 10D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 40D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 35D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 35D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 35D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 25D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 25D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 25D, CustomWidth = true });//O

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte Portafolio - Reporte de SLA (promedio de días) ({0})", tituloFechas), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:O1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha Creada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Rechazada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de Transferencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha Aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Días", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Solicitante", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos.ChartReportData)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RolDesc.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacion.HasValue ? item.FechaCreacion.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaRechazada.HasValue ? item.FechaRechazada.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaTransferencia.HasValue ? item.FechaTransferencia.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAprobacion.HasValue ? item.FechaAprobacion.Value.ToString("dd/MM/yyyy") : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Dias.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Solicitante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }
        #endregion

        #region Portafolio Campos
        public byte[] ExportarReportePortafolioCampos_Reporte(FiltrosReporteCamposPortafolio reporte, string fechaConsulta, string periodo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReportePortafolioDAO>.Provider.ReportePortafolioCampos_Data(reporte);
                    datos = (from a in datos
                             where !string.IsNullOrEmpty(a.ApplicationId)
                             select a).ToList();

                    if (reporte.FechaHasta == DateTime.MinValue)
                    {
                       
                        DateTime? fechaBase = null;
                        if (datos.Count == 0)
                        {
                            fechaBase = ServiceManager<ReportePortafolioDAO>.Provider.ObtenerFechaBaseReporte(reporte.FechaDesde, reporte.NroPeriodos, reporte.Frecuencia);
                        }
                        else
                        {
                            fechaBase = datos.First().FechaDesde;
                        }

                        fechaConsulta = FormatearFechaPeriodo(fechaBase, reporte.NroPeriodos, periodo);
                    }

                    int k = 2;
                    var sheetName = "Reporte por campo";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 16D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 14D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 45D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 35D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 35D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 35D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 35D, CustomWidth = true });//J

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, string.Format("BCP - Reporte por Campo específico  ({0})", fechaConsulta), string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:J1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Fecha de corte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código de Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre de Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Columna Agrupar", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Columna Filtro Valor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFreeze.HasValue ? item.FechaFreeze.Value.ToString("dd/MM/yyyy") : "");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApplicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ColumnaAgruparValor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ColumnaFiltroValor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gerencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }
        #endregion

        //public byte[] ExportarReportePortafolioEstado(FiltrosReporteEstadoPortafolio reporte)
        //{
        //    var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

        //    using (MemoryStream documentStream = new MemoryStream())
        //    {
        //        documentStream.Write(archivoBytes, 0, archivoBytes.Length);
        //        documentStream.Position = 0;

        //        using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
        //        {
        //            Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
        //            spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
        //            spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

        //            var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
        //            var datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteEstadoPortafolio(reporte);
        //            var tipoReporte = (ETipoExportarReportePortafolioEstado)reporte.TipoReporte;

        //            int k = 2;
        //            var sheetName = Utilitarios.GetEnumDescription2(tipoReporte);

        //            WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

        //            //Definicion de columnas estáticas
        //            Columns columns1 = new Columns();
        //            SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
        //            if ((sd != null))
        //            {
        //                columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
        //            }
        //            else
        //            {
        //                columns1 = new Columns();
        //                worksheetPart.Worksheet.Append(columns1);
        //            }

        //            columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
        //            columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
        //            columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C

        //            int contador = 3;
        //            string columnName = string.Empty;
        //            switch (tipoReporte)
        //            {
        //                case ETipoExportarReportePortafolioEstado.DistribucionAplicacionesBanco:
        //                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 40D, CustomWidth = true });//Gerencia
        //                    contador = 4;
        //                    columnName = "Gerencia";
        //                    break;

        //                case ETipoExportarReportePortafolioEstado.DistribucionAplicaciones://Consultar
        //                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 40D, CustomWidth = true });//Gerencia
        //                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//Division
        //                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 25D, CustomWidth = true });//Area
        //                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 35D, CustomWidth = true });//Unidad
        //                    contador = 7;
        //                    break;

        //                case ETipoExportarReportePortafolioEstado.DistribucionAplicacionesByEstado://Consultar
        //                    //columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 40D, CustomWidth = true }); break;
        //                    columnName = "Gerencia";
        //                    break;

        //                case ETipoExportarReportePortafolioEstado.DistribucionAplicacionesByCriticidad:
        //                    //columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 25D, CustomWidth = true });//Criticidad
        //                    columnName = "Gerencia";
        //                //break;

        //                case ETipoExportarReportePortafolioEstado.DistribucionAplicacionesByCategoria:
        //                    //columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 25D, CustomWidth = true });//Categoria
        //                    columnName = "Gerencia";
        //                //break;

        //                case ETipoExportarReportePortafolioEstado.SaludAplicacion:
        //                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 25D, CustomWidth = true });

        //                    contador = 4;
        //                    break;
        //            }

        //            //Contenedor de Merge de columnas
        //            MergeCells mergeCells1 = new MergeCells();

        //            //TITULO DEL REPORTE
        //            string title = $"BCP - Reporte de Estado - {sheetName}";
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, title, string.Empty, estilos.INDICE_TITULO);
        //            char c = contador == 4 ? 'D' : 'H';
        //            mergeCells1.Append(new MergeCell() { Reference = $"A1:{c}1" });

        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo Activo", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);

        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);

        //            if (worksheetPart != null)
        //            {
        //                SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
        //                foreach (var item in datos.Rows)
        //                {
        //                    Row newRow = new Row();
        //                    Cell cell = new Cell();

        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.ApplicationId);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.TipoActivo);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.EstadoToStr);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.Gerencia);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.Division);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.Area);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
        //                    newRow.AppendChild(cell);

        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.Unidad);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    sheetData.AppendChild(newRow);
        //                }
        //            }

        //            PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
        //            worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
        //            spreadSheet.Close();
        //        }
        //        return documentStream.ToArray();
        //    }
        //}

        //
        //Métodos asociados a las notificaciones
        //

        public byte[] ExportarTecnologiaPendiente(string rutaPlantilla)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlantilla, "PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiasPendientes();

                    int k = 1;
                    var sheetName = "Tecnologias pendientes";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L

                    ////Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    ////TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologias pendientes de validación", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:K1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de Aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Aprobado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "¿Vigencia indefinida?", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoTecnologiaStr); //Estado Tecnologia
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.TipoStr);
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoTecnologiaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAprobacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioAprobacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagVigenteIndefinido);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasNoRegistrada(string rutaPlantilla)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlantilla, "PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    //var datos = ServiceManager<TecnologiaNoRegistradaDAO>.Provider.GetTecNoReg(nombre, tipoEquipoId, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    var datos = ServiceManager<TecnologiaNoRegistradaDAO>.Provider.GetTecNoRegSP("-1", "", -1, 1, int.MaxValue, "Total", "DESC", out totalRows);

                    int k = 1;
                    var sheetName = "Tecnologías no registradas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E

                    ////Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    ////TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tecnologías no registradas", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Total equipos impactados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha fin soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha fin soporte extendido", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Total.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteExtendidoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarServidoresHuerfanos(string rutaPlanilla)
        {
            PaginaReporteHuerfanos filtros = new PaginaReporteHuerfanos()
            {
                Equipo = string.Empty,
                SistemaOperativo = string.Empty,
                TipoEquipoToString = "1,2",
                pageSize = int.MaxValue,
                pageNumber = 1,
                sortName = "Equipo",
                sortOrder = "asc"
            };
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlanilla, "PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    DateTime fechaActual = DateTime.Now;
                    var parametroSO = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("SUBDOMINIO_SISTEMA_OPERATIVO").Valor;

                    var datos = ServiceManager<ReporteDAO>.Provider.GetServidoresHuerfanos(filtros, fechaActual, int.Parse(parametroSO), out totalRows);

                    int k = 1;
                    var sheetName = "Servidores huérfanos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Sistema operativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tecnologías instaladas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha última actualización", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SistemaOperativo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TecnologiasInstaladas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagTemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UltimaActualizacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarEquiposSinTecnologia(string rutaPlanilla)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlanilla, "PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int totalRows = 0;

                    var datos = ServiceManager<EquipoDAO>.Provider.GetEquiposSinTecnologias(DateTime.Now, 1, int.MaxValue, "TipoEquipo", "asc", out totalRows);

                    int k = 1;
                    var sheetName = "Equipos sin tecnología instalada";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E

                    ////Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    ////TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Equipos sin tecnología instalada", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Temporal", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha Último Escaneo Correcto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Último Escaneo Error", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TemporalDescripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoCorrectoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaUltimoEscaneoErrorStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasHuerfanas(string rutaPlanilla)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlanilla, "PlantillaReporte_v3.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinRelacionesTodo();

                    int k = 1;

                    //Hoja 1
                    var sheetName = "Sin relación";
                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Tecnologia", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 2
                    datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinRelacionesAplicaciones();
                    sheetName = "Sin relación con aplicaciones";
                    k = 1;
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Aplicacion", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 3
                    datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinRelacionesEquipos();
                    sheetName = "Sin relación con equipos";
                    k = 1;
                    WorksheetPart worksheetPart3 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Equipo", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns3 = new Columns();
                    SheetData sd3 = worksheetPart3.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd3 != null))
                    {
                        columns3 = worksheetPart3.Worksheet.InsertBefore(new Columns(), sd3);
                    }
                    else
                    {
                        columns3 = new Columns();
                        worksheetPart3.Worksheet.Append(columns3);
                    }

                    columns3.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns3.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns3.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns3.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns3.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns3.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns3.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns3.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns3.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart3 != null)
                    {
                        SheetData sheetData = worksheetPart3.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }


                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarServiciosEnNubeHuerfanos(string rutaPlanilla)
        {
            PaginaReporteHuerfanos filtros = new PaginaReporteHuerfanos()
            {
                Equipo = string.Empty,
                SistemaOperativo = string.Empty,
                TipoEquipo = (int)ETipoEquipo.ServicioNube,
                pageSize = int.MaxValue,
                pageNumber = 1,
                sortName = "Equipo",
                sortOrder = "asc"
            };
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlanilla, "PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    DateTime fechaActual = DateTime.Now;
                    var parametroSO = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("SUBDOMINIO_SISTEMA_OPERATIVO").Valor;

                    var datos = ServiceManager<ReporteDAO>.Provider.GetServiciosNubeHuerfanos(filtros, fechaActual, out totalRows);

                    int k = 1;
                    var sheetName = "Servicios nube huérfanos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E                    

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología descubierta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha última actualización", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologica);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagTemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UltimaActualizacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasSinFechaFin(string rutaPlanilla)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlanilla, "PlantillaReporte_v5.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinFechaTodo();

                    int k = 1;

                    //Hoja 1
                    var sheetName = "Consolidado";
                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data1", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "¿Tiene fecha fin de soporte?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Dueño de la tecnología", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagFechaFinSoporteToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DuenoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 2
                    datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinFechaAplicaciones();
                    sheetName = "Relación con aplicaciones";
                    k = 1;
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data2", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    
                    columns2.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//I 
                    columns2.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//I 
                    columns2.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//I 

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "J", k, TipoDato.Cadena, "¿Tiene fecha fin de soporte?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "K", k, TipoDato.Cadena, "Aplicaciones relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "L", k, TipoDato.Cadena, "Dueño de la tecnología", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagFechaFinSoporteToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalFilas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DuenoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 3
                    datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinFechaServidores();
                    sheetName = "Relación con servidores";
                    k = 1;
                    WorksheetPart worksheetPart3 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data3", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns3 = new Columns();
                    SheetData sd3 = worksheetPart3.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd3 != null))
                    {
                        columns3 = worksheetPart3.Worksheet.InsertBefore(new Columns(), sd3);
                    }
                    else
                    {
                        columns3 = new Columns();
                        worksheetPart3.Worksheet.Append(columns3);
                    }

                    columns3.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns3.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns3.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns3.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns3.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns3.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns3.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns3.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns3.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I                    
                    columns3.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//I    
                    columns3.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//I    
                    columns3.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//I    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "J", k, TipoDato.Cadena, "¿Tiene fecha fin de soporte?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "K", k, TipoDato.Cadena, "Equipos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "L", k, TipoDato.Cadena, "Dueño de la tecnología", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart3 != null)
                    {
                        SheetData sheetData = worksheetPart3.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagFechaFinSoporteToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalFilas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DuenoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 4
                    datos = ServiceManager<ReporteDAO>.Provider.GetTecnologiasSinFechaPCs();
                    sheetName = "Relación con pcs";
                    k = 1;
                    WorksheetPart worksheetPart4 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data4", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns4 = new Columns();
                    SheetData sd4 = worksheetPart4.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd4 != null))
                    {
                        columns4 = worksheetPart4.Worksheet.InsertBefore(new Columns(), sd4);
                    }
                    else
                    {
                        columns4 = new Columns();
                        worksheetPart4.Worksheet.Append(columns4);
                    }

                    columns4.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns4.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns4.Append(new Column() { Min = 3U, Max = 3U, Width = 35D, CustomWidth = true });//C
                    columns4.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns4.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns4.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns4.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns4.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns4.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns4.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J  
                    columns4.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K    
                    columns4.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//K    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "D", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "E", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "G", k, TipoDato.Cadena, "Fuente de información para la fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "H", k, TipoDato.Cadena, "Tipo de fecha", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "I", k, TipoDato.Cadena, "Fecha de fin configurada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "J", k, TipoDato.Cadena, "¿Tiene fecha fin de soporte?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "K", k, TipoDato.Cadena, "Equipos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart4, "L", k, TipoDato.Cadena, "Dueño de la tecnología", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart3 != null)
                    {
                        SheetData sheetData = worksheetPart4.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagFechaFinSoporteToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalFilas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DuenoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteResponsablesPortafolio(string rutaPlantilla)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlantilla, "PlantillaReporte_v7.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AlertaDAO>.Provider.GetResponsablesIndicadores(1, int.MaxValue, "CodigoAPT", "asc", out totalRows);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Indicador TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Indicador JdE/PO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Indicador Broker", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Indicador Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Indicador Experto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Indicador Gestor", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            var ttl = 0;
                            if (item.TotalTtl == 1 && item.TotalTtlNoAplica == 1)
                                ttl = 1;
                            else
                            {
                                if (item.TotalTtlNoAplica == 0 && item.TotalTtl == 0)
                                    ttl = 0;
                                else
                                    ttl = item.TotalTtl;
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(ttl > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var jde = 0;
                            if (item.TotalJde == 1 && item.TotalJdeNoAplica == 1)
                                jde = 1;
                            else
                            {
                                if (item.TotalJde == 0 && item.TotalJdeNoAplica == 0)
                                    jde = 0;
                                else
                                    jde = item.TotalJde;
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(jde > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var broker = 0;
                            if (item.TotalBroker == 1 && item.TotalBrokerNoAplica == 1)
                                broker = 1;
                            else
                            {
                                if (item.TotalBroker == 0 && item.TotalBrokerNoAplica == 0)
                                    broker = 0;
                                else
                                    broker = item.TotalBroker;
                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(broker > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var owner = 0;
                            if (item.TotalOwner == 1 && item.TotalOwnerNoAplica == 1)
                                owner = 1;
                            else
                            {
                                if (item.TotalOwner == 0 && item.TotalOwnerNoAplica == 0)
                                    owner = 0;
                                else
                                    owner = item.TotalOwner;

                            }
                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(owner > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var experto = 0;
                            if (item.TotalExperto == 1 && item.TotalExpertoNoAplica == 1)
                                experto = 1;
                            else
                            {
                                if (item.TotalExperto == 0 && item.TotalExpertoNoAplica == 0)
                                    experto = 0;
                                else
                                    experto = item.TotalExperto;

                            }

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(experto > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            var gestor = 0;
                            if (item.TotalGestor == 1 && item.TotalGestorNoAplica == 1)
                                gestor = 1;
                            else
                            {
                                if (item.TotalGestor == 0 && item.TotalGestorNoAplica == 0)
                                    gestor = 0;
                                else
                                    gestor = item.TotalGestor;

                            }
                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(gestor > 0 ? "1" : "-1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA E
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA F
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "F", 2, "F", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA G
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "G", 2, "G", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //INDICADORES PARA LA COLUMNA H
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "H", 2, "H", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting4 = new ConditionalFormatting();
                    conditionalFormatting4.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_4);
                    iconSet1.Append(conditionalFormatValueObject2_4);
                    iconSet1.Append(conditionalFormatValueObject3_4);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting4.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting4, pageMargins1);

                    //INDICADORES PARA LA COLUMNA I
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "I", 2, "I", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting5 = new ConditionalFormatting();
                    conditionalFormatting5.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_5 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_5 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_5 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_5);
                    iconSet1.Append(conditionalFormatValueObject2_5);
                    iconSet1.Append(conditionalFormatValueObject3_5);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting5.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting5, pageMargins1);

                    //INDICADORES PARA LA COLUMNA J
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "J", 2, "J", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting6 = new ConditionalFormatting();
                    conditionalFormatting6.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_6 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_6 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_6 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_6);
                    iconSet1.Append(conditionalFormatValueObject2_6);
                    iconSet1.Append(conditionalFormatValueObject3_6);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting6.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting6, pageMargins1);
                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    totalRows = 0;
                    var datos2 = ServiceManager<AlertaDAO>.Provider.GetResponsableDetalle();
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F                    
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G   
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H   

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Codigo aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Estado de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tribe Technical Lead", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Bróker de Sistemas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Owner/Líder Usuario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Gestor/Usuario Autorizador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Experto/Especialista/Lider Técnico", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TTL);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JdE);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Broker);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Owner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Experto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 3
                    //#region HOJA 3
                    HojaDetalleIndicadorResponsable("Consolidado-Gestor", "Responsable1", (int)EPortafolioResponsable.Gestor, "Gestor", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-JdE", "Responsable2", (int)EPortafolioResponsable.JdE, "JdE", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-Broker", "Responsable3", (int)EPortafolioResponsable.Broker, "Broker", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-Owner", "Responsable4", (int)EPortafolioResponsable.Owner, "Owner", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-Experto", "Responsable5", (int)EPortafolioResponsable.Experto, "Experto", spreadSheet, estilos);
                    HojaDetalleIndicadorResponsable("Consolidado-TTL", "Responsable6", (int)EPortafolioResponsable.TTL, "TTL", spreadSheet, estilos);

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteGerenciaResponsable(string matricula, int tipo, string rutaPlantilla)
        {
            var mesProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES").Valor;
            var mesProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2").Valor;

            //var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlantilla, "PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    //var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivisionResponsable(matricula, tipo);

                    int k = 1;
                    var sheetName = "Consolidado";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 40D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 40D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 40D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 40D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 40D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 40D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 40D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 40D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 40D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 40D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 40D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 15D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 15D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 15D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 15D, CustomWidth = true });//X

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Gerencia Central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Soportado por/Tribu", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Clasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Owner/Líder Usuario/Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Experto/Especialista", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Gestor/Usuario autorizador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Broker", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "# servidores relacionados", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "# tecnologías relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "# tecnologías obsoletas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "KPI Obsolescencia", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.ReporteIndicadorActual).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion1).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.ReporteIndicadorProyeccion2).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleCriticidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GerenciaCentral);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RoadMap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JefeEquipo_ExpertoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribeTechnicalLead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Owner_LiderUsuario_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ExpertoEspecialista);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gestor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.BrokerSistemas);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalServidores.HasValue ? item.TotalServidores.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologias.HasValue ? item.TotalTecnologias.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.TotalTecnologiasObsoletas.HasValue ? item.TotalTecnologiasObsoletas.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue((item.Priorizacion.HasValue ? item.Priorizacion.Value : 0).ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_RIGHT.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "C", 2, "C", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "D", 2, "D", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    //totalRows = 0;

                    var datos2 = ServiceManager<ReporteDAO>.Provider.GetGerenciaDivisionDetalleResponsableAplicaciones(matricula, tipo);
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 24D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 27D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 27D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns2.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J
                    columns2.Append(new Column() { Min = 11U, Max = 11U, Width = 15D, CustomWidth = true });//K                    
                    columns2.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L
                    columns2.Append(new Column() { Min = 13U, Max = 13U, Width = 15D, CustomWidth = true });//M

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Tipo componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "J", k, TipoDato.Cadena, "Fecha de fin de soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "K", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "L", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "M", k, TipoDato.Cadena, string.Format("Estado a {0} meses", mesProyeccion2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoApt);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.EstadoToString);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            //cell.CellValue = new CellValue("0");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            //cell.CellValue = new CellValue("0");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            //cell.CellValue = new CellValue("1");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    pageMargins1 = worksheetPart2.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "K", 2, "K", datos2.Count + 1));

                    conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA K
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "L", 2, "L", datos2.Count + 1));

                    conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA L
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "M", 2, "M", datos2.Count + 1));

                    conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart2.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //worksheetPart2.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarServidoresRelacionadosByAplicacion(string codigoAPT, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    int pageSize = int.MaxValue;
                    var totalRows = 0;
                    var registros = ServiceManager<EquipoDAO>.Provider.GetServidoresRelacionadosByCodigoAPT(codigoAPT, 1, pageSize, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Servidores relacionados";
                    #region HOJA 1

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 24D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 16D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Estado de la relación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Sistema Operativo", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in registros)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Ambiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoRelacionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SistemaOperativo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #endregion

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasByAplicacion(string codigoAPT, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var paramProyeccion1 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES");
                    var proyeccionMeses1 = paramProyeccion1 != null ? paramProyeccion1.Valor : "12";
                    var paramProyeccion2 = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_2");
                    var proyeccionMeses2 = paramProyeccion2 != null ? paramProyeccion2.Valor : "24";

                    var totalRows = 0;
                    var registros = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiasXAplicacionByCodigoAPT(codigoAPT, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Tecnologías relacionados";
                    #region HOJA 1

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 24D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 24D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 24D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha de fin", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado actual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, string.Format("Estado a {0} meses", proyeccionMeses1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, string.Format("Estado a {0} meses", proyeccionMeses2), string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in registros)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubdominioNomb);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia_Proyeccion2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #endregion

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA E
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "E", 2, "E", registros.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA F
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "F", 2, "F", registros.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA G
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "G", 2, "G", registros.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);
                    #endregion

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteOwnerv2(string subdominios, string owner, string fecha, string tipos, string tecnologia)
        {
            var proyeccionOwner1 = int.Parse(ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_OWNER_1").Valor); //6 meses
            var proyeccionOwner2 = int.Parse(ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_OWNER_2").Valor); //18 meses
            var proyeccionOwner3 = int.Parse(ServiceManager<ParametroDAO>.Provider.ObtenerParametro("NRO_MESES_PROYECCIONES_OWNER_3").Valor); //30 meses

            var filtros = new PaginacionOwner()
            {
                pageNumber = 1,
                pageSize = int.MaxValue,
                sortOrder = "asc",
                sortName = "Tecnologia",
                Fecha = fecha,
                FechaFiltro = DateTime.ParseExact(fecha, "dd/MM/yyyy", CultureInfo.InvariantCulture),
                Owner = owner,
                SubdominioToString = subdominios,
                TipoTecnologiaToString = tipos,
                Tecnologia = tecnologia
            };

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v6.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<ReporteDAO>.Provider.GetReporteOwner(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Resumen";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data1", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 15D, CustomWidth = true });//L                

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fin soporte familia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Roadmap EOS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado de roadmap EOS (hoy)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, string.Format("Estado de roadmap EOS ({0} meses)", proyeccionOwner1), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, string.Format("Estado de roadmap EOS ({0} meses)", proyeccionOwner2), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, string.Format("Estado de roadmap EOS ({0} meses)", proyeccionOwner3), string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Tecnologías con fechas fin indefinidas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Total equipos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Total aplicaciones", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Familia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaMaxFamiliaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorProyOwnerHoy.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorProyOwner1.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorProyOwner2.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorProyOwner3.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalIndefinidas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalEquipos.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA F
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "F", 2, "F", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA G
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "G", 2, "G", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA H
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "H", 2, "H", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //INDICADORES PARA LA COLUMNA I
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "I", 2, "I", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting4 = new ConditionalFormatting();
                    conditionalFormatting4.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_4);
                    iconSet1.Append(conditionalFormatValueObject2_4);
                    iconSet1.Append(conditionalFormatValueObject3_4);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting4.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting4, pageMargins1);

                    #endregion

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Detallado";
                    k = 1;

                    totalRows = 0;
                    var datos2 = ServiceManager<ReporteDAO>.Provider.GetReporteOwnerByTecnologiav2(filtros, out totalRows);
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data2", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns2.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns2.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns2.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns2.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//G
                    columns2.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "E", k, TipoDato.Cadena, "ClaveTecnologia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "F", k, TipoDato.Cadena, "Es indefinida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "G", k, TipoDato.Cadena, "Fecha cálculo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "H", k, TipoDato.Cadena, "Fecha cálculo base", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "I", k, TipoDato.Cadena, "Tipo tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "J", k, TipoDato.Cadena, "Total instalaciones en equipos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "K", k, TipoDato.Cadena, "Total de relaciones con aplicaciones", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EsIndefinidaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoTecStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoBaseStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalEquipos.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 3
                    //#region HOJA 3

                    sheetName = "Aplicaciones";
                    k = 1;

                    totalRows = 0;
                    var datos3 = ServiceManager<ReporteDAO>.Provider.GetReporteOwnerByAplicaciones(filtros, out totalRows);
                    WorksheetPart worksheetPart3 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data3", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns3 = new Columns();
                    SheetData sd3 = worksheetPart3.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd3 != null))
                    {
                        columns3 = worksheetPart3.Worksheet.InsertBefore(new Columns(), sd3);
                    }
                    else
                    {
                        columns3 = new Columns();
                        worksheetPart3.Worksheet.Append(columns3);
                    }

                    columns3.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns3.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns3.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns3.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns3.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns3.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "C", k, TipoDato.Cadena, "Estado aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "D", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "E", k, TipoDato.Cadena, "Nombre equipo - squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart3, "F", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart3 != null)
                    {
                        SheetData sheetData = worksheetPart3.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos3)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreEquipo_Squad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Criticidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiasVencidasOporVencerConAplicaciones(string rutaPlantilla)
        {
            //var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar(rutaPlantilla, "PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    //var datos = ServiceManager<TipoDAO>.Provider.GetTipo(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiasPorVencer("", "", 1, int.MaxValue, "Dominio", "asc", out totalRows);

                    int k = 1;
                    var sheetName = "Tecnologías";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de ", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Clave de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha fin", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Nro. de aplicaciones impactadas", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteDataAplicaciones(string gerencia, string division, string estado, string area, string unidad, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var filtros = new PaginacionAplicacion()
                    {
                        Gerencia = gerencia,
                        Division = division,
                        Estado = estado,
                        Area = area,
                        Unidad = unidad,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetReporteAplicacionData(filtros, out totalRows);

                    int k = 1;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    //Set columns pos
                    var dt_columnas = 78;
                    for (int i = 1; i <= dt_columnas; i++)
                    {
                        var minMax = Convert.ToUInt32(i);
                        var item_column = new Column() { Min = minMax, Max = minMax, Width = 30D, CustomWidth = true };
                        columns1.Append(item_column);
                    }

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    #region Columnas
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código de Interfaz", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de Activo de Información", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "GERENCIA CENTRAL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "DIVISIÓN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "ÁREA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "UNIDAD", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Descripción de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Estado de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Fecha de Creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Motivo de Creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Área BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Dominio BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Plataforma BCP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Jefatura ATI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Tribe Technical Lead", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Matricula TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Matricula JdE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Bróker de Sistemas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Matricula Broker", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Nombre de Equipo/Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Owner/Líder Usuario/Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "Matricula Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "Gestor/Usuario Autorizador/Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "Matricula Gestor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "Experto/Especialista/Lider Técnico", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Matricula Experto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Entidad Responsable", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "Entidades Usuarias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "Nombre unidades usuarias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "Proceso Clave ó Proceso del producto/servicio de Negocio o Apoyo que  afecte, impacte, interrumpa o apoye la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "CLASIFICACION", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Categoría Tecnológica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "Tipo de Desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Modelo de entrega", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "Proveedor de Desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "Ubicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "Infraestructura de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, "Clasificacion Técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, "Indicar nombre de interfaces con otras aplicaciones, servicios web, servicios en host, sistemas, BD externa, DWH?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AS", k, TipoDato.Cadena, "Nombre del Servidor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AT", k, TipoDato.Cadena, "Repositorio/Ruta de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AU", k, TipoDato.Cadena, "Contingencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AV", k, TipoDato.Cadena, "Método de Autenticación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AW", k, TipoDato.Cadena, "Método de Autorización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AX", k, TipoDato.Cadena, "Compatible con Windows 7", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AY", k, TipoDato.Cadena, "Compatible con navegador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AZ", k, TipoDato.Cadena, "Compatible con Herramienta Virtualizada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BA", k, TipoDato.Cadena, "Instalada en Desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BB", k, TipoDato.Cadena, "Instalada en Certificacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BC", k, TipoDato.Cadena, "Instalada en Produccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BD", k, TipoDato.Cadena, "Grupo Ticket Remedy", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BE", k, TipoDato.Cadena, "¿Está en OOR?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BF", k, TipoDato.Cadena, "¿Ratifica en OOR?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BG", k, TipoDato.Cadena, "SW Base - Sistema Operativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BH", k, TipoDato.Cadena, "SW Base - Herramienta  de Programación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BI", k, TipoDato.Cadena, "SW Base - Lenguaje de Programación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BJ", k, TipoDato.Cadena, "SW Base -Gestor de Base de Datos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BK", k, TipoDato.Cadena, "SW Base -Framework", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BL", k, TipoDato.Cadena, "Resumen estándares tecnológicos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BM", k, TipoDato.Cadena, "Nivel de Cumplimiento en Estándares Tecnológicos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BN", k, TipoDato.Cadena, "Resumen Lineamientos de Seguridad de información", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BO", k, TipoDato.Cadena, "Nivel de Cumplimiento en Lineamientos de seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BP", k, TipoDato.Cadena, "Nivel de cumplimiento general", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BQ", k, TipoDato.Cadena, "Roadmap planificado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BR", k, TipoDato.Cadena, "Detalle de estrategia de roadmap planificado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BS", k, TipoDato.Cadena, "Estado de Roadmap", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BT", k, TipoDato.Cadena, "Etapa de atención de roadmap", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BU", k, TipoDato.Cadena, "Roadmap Ejecutado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BV", k, TipoDato.Cadena, "Fecha Inicio roadmap ejecutado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BW", k, TipoDato.Cadena, "Fecha Fin roadmap ejecutado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BX", k, TipoDato.Cadena, "Código(s) de aplicación(es) reemplazada(s)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BY", k, TipoDato.Cadena, "Aplicativo reemplazante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BZ", k, TipoDato.Cadena, "Fecha Registro", string.Empty, estilos.INDICE_CABECERA);
                    #endregion

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CodigoAPT); //1
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Nombre); //2
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CodigoInterfaz); //3
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.TipoActivoInformacion); //4
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.GerenciaCentral); //5
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Division); //6
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Area); //7
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Unidad); //8
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.DescripcionAplicacion); //9
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EstadoAplicacion); //10
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaCreacionProcedencia); //11
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MotivoCreacion); //12
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.AreaBIAN); //13
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.DominioBIAN); //14
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.PlataformaBCP); //15
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.JefaturaATI); //16
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.TribeTechnicalLead); //17
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MatriculaTTL); //18
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.JefeEquipo_ExpertoAplicacionUserIT_ProductOwner); //19
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MatriculaJDE); //20
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.BrokerSistemas); //21
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MatriculaBroker); //22
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.NombreEquipo_Squad); //23
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.GestionadoPor); //24
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Owner_LiderUsuario_ProductOwner); //25
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MatriculaOwner); //26
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Gestor_UsuarioAutorizador_ProductOwner); //27
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MatriculaGestor); //28
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Experto_Especialista); //29
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MatriculaExperto); //30
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EntidadResponsable); //31
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EntidadUsuaria); //32
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.NombreEntidadUsuaria); //33
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ProcesoClave); //34
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Clasificacion); //35
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Criticidad); //36
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CategoriaTecnologica); //37
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.TipoDesarrollo); //38
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ModeloEntrega); //39
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ProveedorDesarrollo); //40
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Ubicacion); //41
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Infraestructura); //42
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.ClasificacionTecnica); //43
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.NombreInterface); //44
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.NombreServidor); //45
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Repositorio); //46
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Contingencia); //47
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MetodoAutenticacion); //48
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.MetodoAutorizacion); //49
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CompatibleWindows7); //50
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CompatibleNavegador); //51
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CompatibleHV); //Faltaba este
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.InstaladaDesarrollo); //52
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.InstaladaCertificacion); //53
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.InstaladaProduccion); //54
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.GTR); //55
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.OOR); //56
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.RatificaOOR); //57
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.SWBaseSO); //58
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.SWBaseHP); //59
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.SWBaseLP); //60
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.SWBaseBD); //61
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.SWBaseFramework); //62
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.RET); //63
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.NCET); //64
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.RLSI); //65
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.NCLS); //66
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.NCG); //67
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.Roadmap); //68
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.DetalleEstrategiaRoadmapPlanificado); //69
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EstadoRoadmap); //70
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.EtapaAtencionRoadmap); //71
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.RoadmapEjecutado); //72
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaInicioRoadmapEjecutado); //73
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaFinRoadmapEjecutado); //74
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.CodigoAplicacionReemplazo); //75
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.AplicativoReemplazo); //76
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String; cell.CellValue = new CellValue(item.FechaRegistroProcedencia); //77
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        //Métodos asociados al storage
        public byte[] ExportarStorage(PaginacionStorage filtros)
        {
            var total = 0;
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = new List<StorageDto>();
                    datos = ServiceManager<StorageDAO>.Provider.GetStorage(filtros, out total);

                    int k = 2;
                    //var sheetName = "Equipo";
                    var sheetName = "Storage";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 15D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 15D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 15D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Storage", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Software base", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Etiqueta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Volumen", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tier", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Espacio total GB", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Espacio usado GB", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Obsolescencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Nombre del pool", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Ubicación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SoftwareBase);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Etiqueta);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Volumen);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreTier);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EspacioTotalGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EspacioUsadoGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.IndicadorObsolescencia.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.PoolName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UbicacionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "J", 3, "J", datos.Count + 2));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarStorageAplicaciones(PaginacionStorage filtros)
        {
            var total = 0;
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = new List<StorageDto>();
                    datos = ServiceManager<StorageDAO>.Provider.GetStorageAplicacion(filtros, out total);

                    int k = 2;
                    //var sheetName = "Equipo";
                    var sheetName = "Storage";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 20D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 20D, CustomWidth = true });//N

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Estado equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Ambiente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de la relación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Software base", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Storage", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Ubicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Tier", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Réplica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Espacio provisionado (GB) - Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Espacio usado (GB) - Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Espacio libre (GB) - Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "% libre", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagTemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleAmbiente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SoftwareBase);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Storage);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UbicacionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreTier);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TieneReplicaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.CapacidadGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.UsadoGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.LibreGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.PorcentajeLibre.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarStorageEquipos(PaginacionStorage filtros)
        {
            var total = 0;
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = new List<StorageDto>();
                    datos = ServiceManager<StorageDAO>.Provider.GetStorageEquipo(filtros, out total);

                    int k = 2;
                    //var sheetName = "Equipo";
                    var sheetName = "Storage";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 20D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 20D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 20D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 15D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 20D, CustomWidth = true });//O


                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Descubrimiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Disco del equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Capacidad (GB)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Espacio usado (GB)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Espacio libre (BB)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "% libre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Storage software", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Storage", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Volumen", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Ubicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Tier", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Replicado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Equipo de servicio", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagTemporalToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Disco);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.CapacidadGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.UsadoGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.LibreGB.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.PorcentajeLibre.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SoftwareBase);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Storage);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Volumen);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UbicacionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreTier);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TieneReplicaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagServidorServicioToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAlertasUserIT(PaginacionAplicacion filtros)
        {
            var total = 0;
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = new List<ReporteAlertasDto>();
                    datos = ServiceManager<ReportePortafolioDAO>.Provider.GetReporteAlertas(filtros, out total);

                    int k = 2;
                    //var sheetName = "Equipo";
                    var sheetName = "Alertas";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 40D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D                    

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Detalle", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Componente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleComponente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaEjecucionToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarNotaAplicacion(string tribu, string codigoAPT, string jde, string experto, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pagMep = new PaginacionMep()
                    {
                        Tribu = tribu,
                        CodigoAPT = codigoAPT,
                        Jde = jde,
                        Experto = experto,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<MepDAO>.Provider.GetListado(pagMep, out totalRows);

                    int k = 1;
                    var sheetName = "Reporte";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu / Gestinado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Cod App", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre de la App", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "JDE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "MEP Distribuida", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "MEP Mainframe", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "MEP Paquete/SaaS", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "User IT - Macro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "User IT - WEB", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "User IT - Cli-Ser", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Última actualización", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TTL);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.JDE);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DistribuidaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MainFrameStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.PaqueteSaasStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UserITMacroStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UserITWebStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UserITClientSeverStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaModificacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionTecnologiaActualizar()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new Paginacion()
                    {
                        pageNumber = 1,
                        pageSize = int.MaxValue,
                        sortName = "Nombre",
                        sortOrder = "asc"
                    };

                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiaUpdate(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//D

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Clave tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fabricante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Versión", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Código de tecnología asignado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Mostrar en site", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Caso de uso", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Descripción de la tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Fecha de lanzamiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "¿Tiene fecha fin de soporte?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Fecha fin soporte de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Fecha fin extendida de la tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Fecha fin interna de la tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Equipo de administración y punto de contacto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Grupo de soporte en REMEDY", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Conformidad de arquitecto de seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Conformidad de arquitecto de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Url Confluence", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fabricante);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Versiones);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoTecnologiaAsignado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagSiteEstandarStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CasoUso);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Descripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaLanzamientoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagFechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinSoporteStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaExtendidaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaAcordadaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EqAdmContacto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoSoporteRemedy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ConfArqSeg);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ConfArqTec);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UrlConfluence);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarIPConsolidado()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new Paginacion()
                    {
                        pageNumber = 1,
                        pageSize = int.MaxValue,
                        sortName = "Prefix",
                        sortOrder = "asc"
                    };

                    var datos = ServiceManager<IPDAO>.Provider.GetVistaConsolidado(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Relevamiento IP";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N                    
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//V

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "MAC", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "VLAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Prefix", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Name Prefix", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Zona", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Ambiente IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "CMDB", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Equipo según reporte IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Virtual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "IP Address", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "IP Por Server", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Ambiente Servidor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Cruce Ambientes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Gateways", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Static Routes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Segred Status", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Security Status", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "IP existe en CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "IP correctamente asociada en CVT/Reporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Equipo según CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Tipo de equipo según CVT", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IP);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MAC);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.VLAN);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Prefix);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NamePrefix);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Zona);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AmbienteRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fuente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CMDB);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoReporte);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Virtual);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPAddress);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPPorSever);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AmbienteServidor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CruceAmbientes);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gateways);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.StaticRoutes);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SegredStatus);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SecurityStatus);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ExisteCVT == -1 ? "No" : "Si");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CoincideCVT == -1 ? "No" : "Si");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarIPDetalle(DateTime fecha)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new PaginacionIP()
                    {
                        pageNumber = 1,
                        pageSize = int.MaxValue,
                        sortName = "Prefix",
                        sortOrder = "asc",
                        Fecha = fecha
                    };

                    var datos = ServiceManager<IPDAO>.Provider.GetVistaEstadoDetalle(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Detalle IP";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N                    
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 30D, CustomWidth = true });//X

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "MAC", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "VLAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Prefix", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Name Prefix", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Zona", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Ambiente IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "CMDB", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Equipo según reporte IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Virtual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "IP Address", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "IP Por Server", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Ambiente Servidor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Cruce Ambientes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Gateways", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Static Routes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Segred Status", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Componente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "IP existe en CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "IP correctamente asociada en CVT/Reporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Equipo según CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Tipo de equipo según CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Responsable", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IP);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MAC);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.VLAN);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Prefix);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NamePrefix);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Zona);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AmbienteRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fuente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CMDB);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoReporte);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Virtual);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPAddress);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPPorSever);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AmbienteServidor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CruceAmbientes);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gateways);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.StaticRoutes);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SegredStatus);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SecurityStatus);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ExisteCVT == -1 ? "No" : "Si");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CoincideCVT == -1 ? "No" : "Si");
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Responsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaEstandar(string _subdominioIds, string dominiosIds)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pagEst = new PaginacionEstandar()
                    {
                        SubdominioIds = _subdominioIds,
                        DominioIds = dominiosIds,
                        sortName = "Id",
                        sortOrder = "asc",
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetListadoTecnologiaEstandar(pagEst, out totalRows);

                    int k = 1;
                    var sheetName = "Reporte";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoIdStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTecnologiaEstandar_2(string _subdominioIds, string dominiosIds, string tipoTecnologiaIds, string estadoTecnologiaIds, string tecnologia, bool getAll, string aplicaIds, string compatibilidadSOIds, string compatibilidadCloudIds)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pag = new PaginacionEstandar()
                    {
                        SubdominioIds = _subdominioIds,
                        DominioIds = dominiosIds,
                        TipoTecnologiaIds = tipoTecnologiaIds,
                        Tecnologia = tecnologia,
                        EstadoIds = estadoTecnologiaIds,
                        GetAll = getAll,
                        AplicaIds = aplicaIds,
                        CompatibilidadSOIds = compatibilidadSOIds,
                        CompatibilidadCloudIds = compatibilidadCloudIds,
                        sortName = "Id",
                        sortOrder = "asc",
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetListadoTecnologiaEstandar(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Reporte";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 40D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado de Obsolescencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Código de Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Lineamiento de tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Línea Base de Seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fuente de Fecha Fin de Soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha Fin Soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Plataforma a la que aplica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Compatibilidad de SO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Compatibilidad Cloud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Tribu/COE/Unidad organizacional", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "SQUAD/Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Responsable de unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Equipo de administración y punto de contacto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Equipo de aprovisionamiento", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Grupo de soporte en REMEDY", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A - Dominio
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B - Subdominio
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C - Tipo de Tecnología
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D - Estado de Obsolescencia
                            cell = new Cell(); cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.EstadoIdStr);
                            cell.CellValue = new CellValue(item.EstadoTecnologiaToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E - Tecnología
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F - Código de Producto
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoProducto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G - Lineamiento de tecnología
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.LineamientoTecnologiaIdStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H - Línea Base de Seguridad
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.LineamientoBaseSeguridadIdStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I - Fuente de Fecha Fin de Soporte
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FuenteIdStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J - Fecha Fin Soporte
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaFinConfigurada);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K - Plataforma a la que aplica
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplica);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L - Compatibilidad de SO
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CompatibilidadSOIdsStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // M - Compatibilidad de Cloud
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CompatibilidadCloudIdsStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // N - Tribu/COE/Unidad organizacional
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // O - SQUAD/Equipo
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // P - Responsable de unidad
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.OwnerStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // Q - Equipo de administración y punto de contacto
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EqAdmContacto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // R - Equipo de aprovisionamiento
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoAprovisionamiento);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // S - Grupo de soporte en REMEDY
                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoSoporteRemedy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarIPEstado()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new Paginacion()
                    {
                        pageNumber = 1,
                        pageSize = int.MaxValue,
                        sortName = "Prefix",
                        sortOrder = "asc"
                    };

                    var datos = ServiceManager<IPDAO>.Provider.GetVistaConsolidado(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Responsables IP";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N                    
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 15D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 15D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 15D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 15D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 15D, CustomWidth = true });//X

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "MAC", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "VLAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Prefix", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Name Prefix", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Zona", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Ambiente IP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "ADDM", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Plataforma", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Hostname", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Virtual", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "IP Address", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "IP Por Server", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Ambiente Servidor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Cruce Ambientes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Gateways", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Static Routes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Segred Status", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Security Status", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "ETI estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Seguridad estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Telecom estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Seguimiento estado", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IP);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MAC);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.VLAN);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Prefix);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NamePrefix);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Zona);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AmbienteRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Fuente);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CMDB);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Plataforma);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoReporte);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Virtual);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPAddress);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IPPorSever);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AmbienteServidor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CruceAmbientes);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Gateways);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.StaticRoutes);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SegredStatus);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SecurityStatus);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoAddm.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoSeguridad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoTelecom.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.EstadoSegmentacion.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    #region INDICADORES

                    var pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();

                    //INDICADORES PARA LA COLUMNA U
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "U", 2, "U", datos.Count + 1));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);

                    //INDICADORES PARA LA COLUMNA V
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "V", 2, "V", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting2 = new ConditionalFormatting();
                    conditionalFormatting2.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_2);
                    iconSet1.Append(conditionalFormatValueObject2_2);
                    iconSet1.Append(conditionalFormatValueObject3_2);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting2.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting2, pageMargins1);

                    //INDICADORES PARA LA COLUMNA W
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "W", 2, "W", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting3 = new ConditionalFormatting();
                    conditionalFormatting3.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_3);
                    iconSet1.Append(conditionalFormatValueObject2_3);
                    iconSet1.Append(conditionalFormatValueObject3_3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting3.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting3, pageMargins1);

                    //INDICADORES PARA LA COLUMNA X
                    listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "X", 2, "X", datos.Count + 1));

                    ConditionalFormatting conditionalFormatting4 = new ConditionalFormatting();
                    conditionalFormatting4.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet();
                    iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3_4 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1_4);
                    iconSet1.Append(conditionalFormatValueObject2_4);
                    iconSet1.Append(conditionalFormatValueObject3_4);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting4.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting4, pageMargins1);

                    #endregion

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAuditoriaData(string matricula, string entidad, string campo, string accion, DateTime? fechaDesde, DateTime? fechaHasta, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AuditoriaDAO>.Provider.GetAuditoriaLista(matricula, entidad, campo, accion, fechaDesde, fechaHasta, 1, 10000, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Auditoria de Data";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 25D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 10D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 10D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 25D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E 
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//F 
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 25D, CustomWidth = true });//G 
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 12D, CustomWidth = true });//H 

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Auditoría de Data (10000 últimos registros)", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Entidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Acción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Id", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Campo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Valor Anterior", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Valor Nuevo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha actualización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Entidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Accion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IdAsociado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Campo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ValorAnterior);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ValorNuevo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CreadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAuditoriaAPI(string APIUsuario, string APINombre, string APIMetodo, DateTime? fechaDesde, DateTime? fechaHasta, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var datos = ServiceManager<AuditoriaDAO>.Provider.GetAuditoriaAPILista(APIUsuario, APINombre, APIMetodo, fechaDesde, fechaHasta, 1, 10000, sortName, sortOrder, out totalRows);

                    int k = 2;
                    var sheetName = "Auditoria de APIs";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 10D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 12D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 120D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E 

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Auditoría de APIs (10000 últimos registros)", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "API Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "API Método", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "API Usuario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Parámetros", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.APINombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.APIMetodo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.APIUsuario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.APIParametros);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarEstandarPortafolio(int? TipoTecnologiaId, int? EstadoId, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pag = new PaginacionEstandar()
                    {
                        EstadoId = EstadoId,
                        TipoTecnologiaId = TipoTecnologiaId,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<ActivosDAO>.Provider.GetEstandarPortafolioTecnologia(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Reporte";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Estándar", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo estándar", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Puntuación servidor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Puntuación estación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEstandar);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologiaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.PuntuacionServidor.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.PuntuacionEstacion.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarBandejaAprobadores(int BandejaId, int TipoSolicitud, List<int> EstadoSolicitud, DateTime? FechaDesde, DateTime? FechaHasta, string ModeloEntrega, int PerfilId, string Matricula, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pag = new PaginacionSolicitud()
                    {
                        BandejaId = BandejaId,
                        TipoSolicitud = TipoSolicitud,
                        EstadoSolicitud = EstadoSolicitud,
                        FechaDesde = FechaDesde,
                        FechaHasta = FechaHasta,
                        ModeloEntrega = ModeloEntrega,
                        PerfilId = PerfilId,
                        Matricula = Matricula,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetSolicitudesAprobador(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Reporte";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    //Begin

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//C

                    switch (BandejaId)
                    {
                        case (int)EBandejaAprobadorAplicacion.ArquitecturaTI:
                            columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//D
                            columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//E
                            break;
                        case (int)EBandejaAprobadorAplicacion.ClasificacionTecnica:
                            columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//D
                            columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//E
                            break;
                        case (int)EBandejaAprobadorAplicacion.DevSecOps:
                            columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//D
                            columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E
                            break;
                        case (int)EBandejaAprobadorAplicacion.PO:
                        case (int)EBandejaAprobadorAplicacion.TTL:
                        case (int)EBandejaAprobadorAplicacion.GestorUserIT:
                            columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//D
                            columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//E
                            columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//E

                            break;
                    }

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo activo información", string.Empty, estilos.INDICE_CABECERA);

                    switch (BandejaId)
                    {
                        case (int)EBandejaAprobadorAplicacion.ArquitecturaTI:
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Área de negocio BIAN", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Dominio de negocio BIAN", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Plataforma BCP", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Jefatura ATI", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Arquitecto TI", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Estado solicitud Portafolio", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Estado solicitud Arquitectura TI", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                            break;
                        case (int)EBandejaAprobadorAplicacion.ClasificacionTecnica:
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Clasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Subclasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado solicitud Portafolio", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado solicitud Arquitectura TI", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                            break;
                        case (int)EBandejaAprobadorAplicacion.DevSecOps:
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Modelo entrega", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado solicitud Portafolio", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Estado solicitud Arquitectura TI", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                            break;
                        case (int)EBandejaAprobadorAplicacion.PO:
                        case (int)EBandejaAprobadorAplicacion.TTL:
                        case (int)EBandejaAprobadorAplicacion.GestorUserIT:
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Lider usuario / PO", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Usuario autorizador / PO", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Experto especialista", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Jefe de equipo / PO", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Gerencia Central", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Estado solicitud Portafolio", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Estado solicitud Arquitectura TI", string.Empty, estilos.INDICE_CABECERA);
                            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Fecha de Registro", string.Empty, estilos.INDICE_CABECERA);
                            break;
                    }

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoSolicitudToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            switch (BandejaId)
                            {
                                case (int)EBandejaAprobadorAplicacion.ArquitecturaTI:
                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.AreaBian);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.DominioBian);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.PlataformaBCP);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.JefaturaATI);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.ArquitectoTI);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    break;
                                case (int)EBandejaAprobadorAplicacion.ClasificacionTecnica:
                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.ClasificacionTecnica);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.SubclasificacionTecnica);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    break;
                                case (int)EBandejaAprobadorAplicacion.DevSecOps:
                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.ModeloEntrega);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    break;
                                case (int)EBandejaAprobadorAplicacion.PO:
                                case (int)EBandejaAprobadorAplicacion.TTL:
                                case (int)EBandejaAprobadorAplicacion.GestorUserIT:
                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.LiderUsuario_PO);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.UsuarioAutorizador_PO);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.Experto_Especialista);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.JefeEquipo_PO);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.TTL);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.GestionadoPor);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.GerenciaCentral);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.Division);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.Area);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    cell = new Cell(); cell.DataType = CellValues.String;
                                    cell.CellValue = new CellValue(item.Unidad);
                                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                                    break;
                            }

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoFakeSolicitudPortafolioStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoAprobacionBandejaStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarBandejaAdministrador(int TipoSolicitud, List<int> EstadoSolicitud, DateTime? FechaDesde, DateTime? FechaHasta, int PerfilId, string Matricula, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pag = new PaginacionSolicitud()
                    {
                        TipoSolicitud = TipoSolicitud,
                        EstadoSolicitud = EstadoSolicitud,
                        FechaDesde = FechaDesde,
                        FechaHasta = FechaHasta,
                        FlagAprobacion = true,
                        PerfilId = PerfilId,
                        Matricula = Matricula,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetSolicitudes(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Bandeja administrador";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo activo información", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado de la solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Id.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoSolicitudToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoSolicitudToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAplicacionPortafolioUpdate()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pag = new PaginacionAplicacion()
                    {
                        sortName = "FechaCreacion",
                        sortOrder = "asc",
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<AplicacionDAO>.Provider.GetAplicacionPortafolioUpdate(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Portafolio Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 80D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 30D, CustomWidth = true });//E

                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 41U, Max = 41U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 42U, Max = 42U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 43U, Max = 43U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 44U, Max = 44U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 45U, Max = 45U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 46U, Max = 46U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 47U, Max = 47U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 48U, Max = 48U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 49U, Max = 49U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 50U, Max = 50U, Width = 30D, CustomWidth = true });//E

                    columns1.Append(new Column() { Min = 51U, Max = 51U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 52U, Max = 52U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 53U, Max = 53U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 54U, Max = 54U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 55U, Max = 55U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 56U, Max = 56U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 57U, Max = 57U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 58U, Max = 58U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 59U, Max = 59U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 60U, Max = 60U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 61U, Max = 61U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 62U, Max = 62U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 63U, Max = 63U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 64U, Max = 64U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 65U, Max = 65U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 66U, Max = 66U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 67U, Max = 67U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 68U, Max = 68U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 69U, Max = 69U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 70U, Max = 70U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 71U, Max = 71U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 72U, Max = 72U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 73U, Max = 73U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 74U, Max = 74U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 75U, Max = 75U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 76U, Max = 76U, Width = 30D, CustomWidth = true });//E


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo activo información", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Motivo de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Persona solicitante", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Categoría tecnológica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Modelo de entrega", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Código interfaz", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Gerencia central", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "División", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Área", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Area BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Dominio BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Plataforma BCP", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Jefatura ATI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Arquitecto TI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Owner/Lider usuario/PO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Gestor/Usuario autorizador/PO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Experto de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "Jefe de equipo/PO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "Broker de sistemas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "Gestor User IT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Nombre de equipo/Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Entidad responsable", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "Entidades usuarias", string.Empty, estilos.INDICE_CABECERA);

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "Tipo desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "Proveedor desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "Ubicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "Infraestructura de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Contingencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "Método de autenticación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Método de autorización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "Ambientes donde se debe instalar la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AO", k, TipoDato.Cadena, "¿Está en OOR?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AP", k, TipoDato.Cadena, "¿Ratifica en OOR?", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AQ", k, TipoDato.Cadena, "Aplicación(es) que es reemplazada", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AR", k, TipoDato.Cadena, "Clasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AS", k, TipoDato.Cadena, "Subclasificación técnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AT", k, TipoDato.Cadena, "Ruta del repositorio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AU", k, TipoDato.Cadena, "Grupo Ticket Remedy", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AV", k, TipoDato.Cadena, "Nombre de interfaces", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AW", k, TipoDato.Cadena, "Compatible con Windows 7", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AX", k, TipoDato.Cadena, "Compatible con navegador", string.Empty, estilos.INDICE_CABECERA);

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AY", k, TipoDato.Cadena, "Proceso Clave ó Proceso del producto/servicio de Negocio o Apoyo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AZ", k, TipoDato.Cadena, "SW Base - Sistema Operativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BA", k, TipoDato.Cadena, "SW Base - Herramienta de Programación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BB", k, TipoDato.Cadena, "SW Base - Lenguaje de Programación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BC", k, TipoDato.Cadena, "SW Base - Gestor de Base de Datos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BD", k, TipoDato.Cadena, "SW Base - Framework", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BE", k, TipoDato.Cadena, "Resumen estándares tecnológicos", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BF", k, TipoDato.Cadena, "Gestor de aplicaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BG", k, TipoDato.Cadena, "Consultor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BH", k, TipoDato.Cadena, "Instalada en Desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BI", k, TipoDato.Cadena, "Instalada en Certificación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BJ", k, TipoDato.Cadena, "Instalada en Producción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BK", k, TipoDato.Cadena, "Criticidad de Aplicación según BIA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BL", k, TipoDato.Cadena, "Producto / Servicio más representativo que soporte la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BM", k, TipoDato.Cadena, "Menor RTO de los productos soportados (hrs)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BN", k, TipoDato.Cadena, "Mayor Grado de interrupción (%) respecto a los productos que soporta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BO", k, TipoDato.Cadena, "Criticidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BP", k, TipoDato.Cadena, "Roadmap planificado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BQ", k, TipoDato.Cadena, "Detalle de estrategia de roadmap planificado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BR", k, TipoDato.Cadena, "Estado de roadmap", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BS", k, TipoDato.Cadena, "Etapa de atención de roadmap", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BT", k, TipoDato.Cadena, "Roadmap Ejecutado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BU", k, TipoDato.Cadena, "Fecha Inicio roadmap ejecutado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BV", k, TipoDato.Cadena, "Fecha Fin roadmap ejecutado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BW", k, TipoDato.Cadena, "Código(s) de aplicación(es) reemplazada(s)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "BX", k, TipoDato.Cadena, "Unidad usuaria", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            var dataApp = item;
                            var dataAppDetalle = item.AplicacionDetalle;

                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.DescripcionAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.EstadoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.MotivoCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.FechaSolicitudStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.PersonaSolicitud);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.CategoriaTecnologica);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.ModeloEntrega);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //10

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.FechaCreacionAplicacionStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.CodigoInterfaz);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.GerenciaCentral);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Division);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Area);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Unidad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.AreaBIAN);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.DominioBIAN);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.PlataformaBCP);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.JefaturaATI);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //20

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.ArquitectoTI);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Owner_LiderUsuario_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Gestor_UsuarioAutorizador_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Experto_Especialista);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.JefeEquipo_ExpertoAplicacionUserIT_ProductOwner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.BrokerSistemas);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.TribeTechnicalLead);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.GestorUserIT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.NombreEquipo_Squad);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //30

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.EntidadResponsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.EntidadUso);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.TipoDesarrollo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.Proveedor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.Ubicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.Infraestructura);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.Contingencia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.MetodoAutenticacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.MetodoAutorizacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.AmbienteInstalacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //40

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.FlagOORStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.FlagRatificaOORStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.AplicacionReemplazo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.ClasificacionTecnica);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.SubclasificacionTecnica);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.RutaRepositorio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.GrupoTicketRemedy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.InterfazApp);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.CompatibilidadWindows);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.CompatibilidadNavegador);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //50

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.ProcesoClave);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.SWBase_SO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.SWBase_HP);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.SWBase_LP);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.SWBase_BD);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.SWBase_Framework);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.RET);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.GestorAplicacionCTR);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.ConsultorCTR);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.InstaladaDesarrollo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //60

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.InstaladaCertificacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.InstaladaProduccion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.CriticidadAplicacionBIA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.ProductoMasRepresentativo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.MenorRTO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.MayorGradoInterrupcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.CriticidadToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.RoadmapPlanificado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.DetalleEstrategia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.EstadoRoadmap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //70

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.EtapaAtencion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.RoadmapEjecutado);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.FechaInicioRoadmap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.FechaFinRoadmap);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.CodigoAppReemplazo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataAppDetalle.UnidadUsuario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAplicacionPortafolioUpdate2()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<ApplicationDAO>.Provider.GetApplicationForUpdateSP();

                    int k = 1;
                    var sheetName = "Portafolio Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 80D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 30D, CustomWidth = true });//X
                    columns1.Append(new Column() { Min = 25U, Max = 25U, Width = 30D, CustomWidth = true });//Y
                    columns1.Append(new Column() { Min = 26U, Max = 26U, Width = 30D, CustomWidth = true });//Z
                    columns1.Append(new Column() { Min = 27U, Max = 27U, Width = 30D, CustomWidth = true });//AA
                    columns1.Append(new Column() { Min = 28U, Max = 28U, Width = 30D, CustomWidth = true });//AB
                    columns1.Append(new Column() { Min = 29U, Max = 29U, Width = 30D, CustomWidth = true });//AC
                    columns1.Append(new Column() { Min = 30U, Max = 30U, Width = 30D, CustomWidth = true });//AD
                    columns1.Append(new Column() { Min = 31U, Max = 31U, Width = 30D, CustomWidth = true });//AE
                    columns1.Append(new Column() { Min = 32U, Max = 32U, Width = 30D, CustomWidth = true });//AF
                    columns1.Append(new Column() { Min = 33U, Max = 33U, Width = 30D, CustomWidth = true });//AG
                    columns1.Append(new Column() { Min = 34U, Max = 34U, Width = 30D, CustomWidth = true });//AH
                    columns1.Append(new Column() { Min = 35U, Max = 35U, Width = 30D, CustomWidth = true });//AI
                    columns1.Append(new Column() { Min = 36U, Max = 36U, Width = 30D, CustomWidth = true });//AJ
                    columns1.Append(new Column() { Min = 37U, Max = 37U, Width = 30D, CustomWidth = true });//AK
                    columns1.Append(new Column() { Min = 38U, Max = 38U, Width = 30D, CustomWidth = true });//AL
                    columns1.Append(new Column() { Min = 39U, Max = 39U, Width = 30D, CustomWidth = true });//AM
                    columns1.Append(new Column() { Min = 40U, Max = 40U, Width = 30D, CustomWidth = true });//AN                   



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Descripción", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tipo de implementación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Modelo de entrega", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Código APT Padre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Estado de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Código de interfaz", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Unidad Usuaria", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Nombre de equipo TI/Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Entidades Usuarias", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Tipo de desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Proveedor de desarrollo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Infraestructura de la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Cod App reemplazo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Tipo de activo de informacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Area BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Dominio BIAN", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "TO BE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Jefatura ATI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Categoria tecnologica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "SubClasificacion Tecnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Y", k, TipoDato.Cadena, "Clasificacion Tecnica", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Z", k, TipoDato.Cadena, "Grupo Ticket Remedy", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AA", k, TipoDato.Cadena, "URL Dominio web", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AB", k, TipoDato.Cadena, "Fecha primer pase a produccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AC", k, TipoDato.Cadena, "Producto/Servicio más representativo que soporte la aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AD", k, TipoDato.Cadena, "Menor RTO de los productos soportados (hrs)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AE", k, TipoDato.Cadena, "Mayor grado de interrupción (%) respecto a los productos que soporta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AF", k, TipoDato.Cadena, "TIER PreProduccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AG", k, TipoDato.Cadena, "TIER Produccion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AH", k, TipoDato.Cadena, "Método de autorización", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AI", k, TipoDato.Cadena, "Método de autenticación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AJ", k, TipoDato.Cadena, "Clasificación de activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AK", k, TipoDato.Cadena, "Criticidad según BIA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AL", k, TipoDato.Cadena, "Nueva criticidad final", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AM", k, TipoDato.Cadena, "Nivel de cumplimiento de seguridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "AN", k, TipoDato.Cadena, "Resumen de lineamientos de seguridad", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            var dataApp = item;


                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.applicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.applicationName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.description);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.implementationTypeName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.managedName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.deploymentTypeName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.parentAPTCode);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.statusName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.interfaceId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(dataApp.registerDate));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //10

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.unitName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.teamName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.userEntityName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.developmentTypeName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.developmentProvider);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.infrastructureName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.replacementApplication);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.tipoActivoName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.areaBIANName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //20

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.dominioBIANName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //20

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.TOBEName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.jefaturaATIName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.categoriaTecnologicaName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.subClasificacionTecnicaName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.clasificacionTecnicaName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.grupoTicketRemedyName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.webDomain);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(Convert.ToString(dataApp.dateFirstRelease));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.starProduct);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.MenorRTOName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //30

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.MayorGradoInterrupcionName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.tierPreProduction);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.tierProduction);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.authorizationMethodName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.authenticationMethodName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.clasificacionActivoName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //40

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.criticidadBIANName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //40

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.finalCriticality.HasValue ? Utilitarios.GetEnumDescription2((CriticidadFinal)dataApp.finalCriticality.Value) : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //40

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.complianceLevel.HasValue ? dataApp.complianceLevel.Value.ToString() : string.Empty);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //40

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.summaryStandard);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell); //40

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAplicacionPortafolioValidacionesCargaMasiva()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    //spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    //spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<AplicacionDAO>.Provider.GetResultsCargaMasivaPortafolio();

                    int k = 1;
                    var sheetName = "Validación Carga Masiva Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 80D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "#", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tipo error", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Evidencia, detalle o entidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fila en archivo excel", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        var NroFila = 0;
                        foreach (var item in datos.Errores)
                        {
                            var dataApp = item;

                            NroFila++;

                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(NroFila.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.TipoErrorIdStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(dataApp.Detalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(!dataApp.FilaExcel.HasValue ? "" : dataApp.FilaExcel.Value.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString()); newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarBitacora(string codigoApt, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pag = new PaginacionSolicitud()
                    {
                        CodigoApt = codigoApt,
                        FlagAprobacion = true,
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = int.MaxValue
                    };
                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetBitacora(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Bitácora";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 60D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D                    

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Suceso", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DetalleBitacora);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarTipoRecursosAzure(string nombre)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new Paginacion()
                    {
                        nombre = string.IsNullOrEmpty(nombre) ? "" : nombre,
                        sortName = "Name",
                        sortOrder = "asc",
                        pageSize = int.MaxValue,
                        pageNumber = 1
                    };
                    var datos = ServiceManager<AzureResourceDAO>.Provider.GetAzureTypes(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Tipos de recursos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 50D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tipo de recurso", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Virtual Machine", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Modificado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de última modificación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Name);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.StatusProcess);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IsVirtualMachineStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CreationDateISO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ModifiedBy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ModificationDateISO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarAzureResources(DateTime dateFilter)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new PaginationAzure()
                    {
                        DateFilter = dateFilter,
                        pageSize = int.MaxValue,
                        pageNumber = 1
                    };
                    var datos = ServiceManager<AzureResourceDAO>.Provider.GetAllAzureResources(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Recursos Azure";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 50D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 40D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 40D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 40D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 50D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "SuscriptionId", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "SuscriptionDisplayName", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "SuscriptionState", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "ResourcesName", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "ResourcesType", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "ResourcesLocation", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "ResourcesState", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "ResourceGroup", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "ResourcesSO", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "VMId", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Version", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "CodigoAPT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Equivalencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Hostnames", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Subdominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "ClaveTecnologia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Analizar", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Dia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Mes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Año", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Tipo de equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Observaciones", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SuscriptionId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SuscriptionDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell
                            {
                                DataType = CellValues.String,
                                CellValue = new CellValue(item.SuscriptionState),
                                StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString())
                            }; newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResourcesName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResourcesType);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResourcesLocation);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResourcesState);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResourceGroup);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResourcesSO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.VMId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.AKSVersion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Equivalence);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Hostnames);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Analizar);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Day.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Month.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.Year.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell(); cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Observaciones);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarBackupMainframe(string jobname, string app, string interfaceApp)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new PaginacionStorage()
                    {
                        jobname = string.IsNullOrEmpty(jobname) ? "" : jobname,
                        app = string.IsNullOrEmpty(app) ? "" : app,
                        interfaceApp = string.IsNullOrEmpty(interfaceApp) ? "" : interfaceApp,
                        OrderBy = "crtdate",
                        OrderByDirection = "desc",
                        PageNumber = 1,
                        PageSize = int.MaxValue
                    };
                    var datos = ServiceManager<StorageDAO>.Provider.GetBackupMainframeDetalle(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Backup Mainframe";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//J

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Virtualizador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre del job", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Etiqueta del tape", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre del dataset", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha de creación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Fecha de última referencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Tamaño en MBs", string.Empty, estilos.INDICE_CABECERA);

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Interface", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Frecuencia", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.outcode);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.jobname);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.volser);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.dsname);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.crtdate.ToString("dd/MMMM/yyyy"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.lfrdate.ToString("dd/MMMM/yyyy"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.mbsize.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.InterfaceApp);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FrecuenciaDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarBackupOpen(string aplicacion, string server, string backupserver, string target, string levelbackup, string outcome, string fecha)
        {
            var _dateFilter = DateTime.Now;
            try
            {
                _dateFilter = DateTime.ParseExact(fecha, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            catch (Exception)
            {

            }

            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    var pag = new PaginacionStorage()
                    {
                        codigoAPT = string.IsNullOrEmpty(aplicacion) ? "" : aplicacion,
                        server = string.IsNullOrEmpty(server) ? "" : server,
                        backupserver = string.IsNullOrEmpty(backupserver) ? "" : backupserver,
                        target = string.IsNullOrEmpty(target) ? "" : target,
                        levelbackup = string.IsNullOrEmpty(levelbackup) ? "" : levelbackup,
                        outcome = string.IsNullOrEmpty(outcome) ? "" : outcome,
                        Fecha = _dateFilter,
                        OrderBy = "crtdate",
                        OrderByDirection = "desc",
                        PageNumber = 1,
                        PageSize = int.MaxValue
                    };
                    var datos = ServiceManager<StorageDAO>.Provider.GetBackupOpen(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Backup Open";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 15D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 15D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 15D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Servidor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Grupo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Día", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Mes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Año", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Total ejecuciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Total aplicaciones relacionadas", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.serverName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.groupname);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.dayBackup.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.monthBackup.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.yearBackup.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.total.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.totalAppsRelacionadas.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarBackupOpenDetalle(string server, int mes, int anio)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<StorageDAO>.Provider.GetBackupOpenExportar(server, mes, anio);

                    int k = 1;
                    var sheetName = "Backup Open";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "zone", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "backupday", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "startdatetime", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "finishdatetime", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "product", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "backupserver", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "clientname", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "target", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "groupname", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "levelbackup", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "datatransferredkb", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "performancembs", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "outcome", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "opensoutcome", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "errocount", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "errorcodes", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "errorcategories", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "description", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "serverName", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.zone);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.backupday.ToString("dd/MM/yyyy"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.startdatetime.ToString("dd/MM/yyyy hh:mm:ss tt"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.finishdatetime.ToString("dd/MM/yyyy hh:mm:ss tt"));
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.product);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_CENTER.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.backupserver);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.clientname);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.target);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.groupname);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.levelbackup);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.datatransferredkb.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.performancembs.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.outcome);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.opensoutcome);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.errocount.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.errorcodes);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.errorcategories);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.description);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.serverName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGDAU()
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    //var totalRows = 0;
                    var datos = ServiceManager<ActivosDAO>.Provider.GetTAllGDAU();

                    int k = 2;
                    var sheetName = "Tipos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 30D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 30D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 30D, CustomWidth = true });//T
                    columns1.Append(new Column() { Min = 21U, Max = 21U, Width = 30D, CustomWidth = true });//U
                    columns1.Append(new Column() { Min = 22U, Max = 22U, Width = 30D, CustomWidth = true });//V
                    columns1.Append(new Column() { Min = 23U, Max = 23U, Width = 30D, CustomWidth = true });//W
                    columns1.Append(new Column() { Min = 24U, Max = 24U, Width = 30D, CustomWidth = true });//X
                                                                                                            //columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte Gerencia/Division/Area/Unidad", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:X1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Gerencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Descripcion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Responsable", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Matricula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Correo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Codigo SIGA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Division", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Descripcion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Responsable", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Matricula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Correo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Codigo SIGA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Area", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Descripcion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Responsable", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Matricula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Correo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Codigo SIGA", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Unidad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Descripcion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "U", k, TipoDato.Cadena, "Responsable", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "V", k, TipoDato.Cadena, "Matricula", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "W", k, TipoDato.Cadena, "Correo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "X", k, TipoDato.Cadena, "Codigo SIGA", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreG);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DescripcionG);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResponsableG);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaG);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CorreoG);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoSIGAG);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreD);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DescripcionD);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResponsableD);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaD);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CorreoD);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoSIGAD);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DescripcionA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResponsableA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CorreoA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoSIGAA);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreU);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DescripcionU);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ResponsableU);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.MatriculaU);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CorreoU);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoSIGAU);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            /*
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);
                            */
                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFunciones(
    string producto

    , string sortName
    , string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.Producto = producto;
            
                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;
       



                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionExportar(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
              


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Funciones por Roles por Producto", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Chapter/Unit", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);
          

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                         

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFunciones2(
             string nombreTribu,
             string codigoTribu,
 string chapter,
  string tribu,
 string grupored,
  string rol,
 string producto,
  string matricula,
 string perfil,
  string funcion
 , string sortName
 , string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.Chapter = chapter;
                    paginacion.Funcion = funcion;
                    paginacion.Dominio = -1;
                    paginacion.SubDominio = -1;
                    paginacion.Matricula = matricula;
                    paginacion.Perfil = perfil;
                    paginacion.NombreTribu = nombreTribu;

                    paginacion.Tribu = tribu;
                    paginacion.GrupoRed = grupored;
                    paginacion.RolNombre = rol;
                    paginacion.Producto = producto;
                    paginacion.CodigoTribu = codigoTribu;

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionExportar2(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Productos por Función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu/COE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter/Unit", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFunciones2Admin(
string chapter,
string funcion,
 string tribu,
           string grupoRed,
            string producto,
           string rol
, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.Chapter = chapter;
                    paginacion.Funcion = funcion;
                    paginacion.Tribu = tribu;
                    paginacion.Producto = producto;
                    paginacion.GrupoRed = grupoRed;
                    paginacion.RolNombre = rol;
                    paginacion.Dominio = -1;
                    paginacion.SubDominio = -1;

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionExportar2Admin(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Productos por Función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu/COE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter/Unit", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFunciones3(

string funcion,
string matricula,
int dominioId,
      int subdominioId
, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
         
                    paginacion.Funcion = funcion;
                    paginacion.Dominio = dominioId;
                    paginacion.SubDominio = subdominioId;
                    paginacion.Matricula = matricula;
                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionExportar2Squad(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }


                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Funciones por Producto", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu== null ? "" : item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter == null ? "" : item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Squad == null ? "" : item.Squad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFunciones3Admin(
string funcion,
 string tribu,
           string grupoRed,
            string producto,
           int rol,
             int dominioId,
               int subdominioId
, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
          
                    paginacion.Funcion = funcion;
                    paginacion.Tribu = tribu;
                    paginacion.GrupoRed = grupoRed;
                    paginacion.Producto = producto;
                    paginacion.Rol = rol;
                    paginacion.Dominio = dominioId;
                    paginacion.SubDominio = subdominioId;
              

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionExportar2AdminSquad(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }


                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Funciones por Producto", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu/COE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Squad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFunciones4(
string chapter,
string funcion
, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.Chapter = chapter;
                    paginacion.Funcion = funcion;

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionExportar2(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Matriz de Roles por Función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Chapter/Unit", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFuncionesPersonas(
string producto,
string matricula,
int dominioId,
      int subdominioId
, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.Producto = producto;
                    paginacion.Dominio = dominioId;
                    paginacion.SubDominio = subdominioId;
                    paginacion.Matricula = matricula;

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionPersonaExportarSquad(paginacion);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 50D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 50D, CustomWidth = true });//A



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Funciones por Producto/ Personas relacionadas a la función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu/COE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Persona", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu == null ? "" : item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter == null ? "" : item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Squad == null ? "" : item.Squad.ToString() );
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFuncionesPersonas2(
            string codigoTribu,
string funcion,
    string tribu,
           string grupoRed,
            string producto,
           int rol,
string matricula,
string perfil,
string chapter

, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.Chapter = chapter;
                    paginacion.Funcion = funcion;
                    paginacion.Dominio = -1;
                    paginacion.SubDominio = -1;
                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;
                    paginacion.Matricula = matricula;
                    paginacion.Perfil = perfil;
                    paginacion.Tribu = tribu;
                    paginacion.GrupoRed = grupoRed;
                    paginacion.Rol = rol;
                    paginacion.Producto = producto;
                    paginacion.CodigoTribu = codigoTribu;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionPersonaExportar2(paginacion);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 25D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 50D, CustomWidth = true });//G



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Productos/ Personas relacionadas a la función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu/COE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter/Unit", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Persona", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarFuncionesPersonas2Admin(
string funcion,

    string tribu,
           string grupoRed,
            string producto,
           int rol,
            int? dominioId,
      int? subdominioId
, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
       
                    paginacion.Funcion = funcion;
                    paginacion.Tribu = tribu;
                    paginacion.GrupoRed = grupoRed;
                    paginacion.Rol = rol;
                    paginacion.Producto = producto;
                    if (dominioId == null)
                    {
                        paginacion.Dominio = -1;
                    }
                    else
                    { paginacion.Dominio = dominioId; }
                    if (subdominioId == null)
                    { paginacion.SubDominio = -1; }
                    else
                    { paginacion.SubDominio = subdominioId; }

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionPersonaExportar2Admin(paginacion);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 50D, CustomWidth = true });//G



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Productos/ Personas relacionadas a la función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu/COE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter/Unit", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Persona", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }


        public byte[] ExportarFuncionesPersonas2AdminFP(
string funcion,

   string tribu,
          string grupoRed,
           string producto,
          int rol,
           int? dominioId,
     int? subdominioId
, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();

                    paginacion.Funcion = funcion;
                    paginacion.Tribu = tribu;
                    paginacion.GrupoRed = grupoRed;
                    paginacion.Rol = rol;
                    paginacion.Producto = producto;
                    if (dominioId == null)
                    {
                        paginacion.Dominio = -1;
                    }
                    else
                    { paginacion.Dominio = dominioId; }
                    if (subdominioId == null)
                    { paginacion.SubDominio = -1; }
                    else
                    { paginacion.SubDominio = subdominioId; }

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionPersonaExportar2AdminSquad(paginacion);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 50D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 50D, CustomWidth = true });//G



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Productos/ Personas relacionadas a la función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tribu/COE", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Chapter", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Persona", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tribu.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);


                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Squad.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }



        public byte[] ExportarFuncionesPersonasMatrizRoles(
string funcion,
string chapter

, string sortName
, string sortOrder
)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.Chapter = chapter;
                    paginacion.Funcion = funcion;

                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;




                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetFuncionPersonaExportar2(paginacion);

                    int k = 2;
                    var sheetName = "FuncionesRolesProducto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F



                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Matriz de Roles/ Personas relacionadas a la función", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:F1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Chapter/Unit", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Función", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Rol", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Grupo de Red", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Persona", string.Empty, estilos.INDICE_CABECERA);


                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Chapter.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Funcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Producto.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Rol);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.GrupoRed);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);



                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    ////INDICADORES PARA LA COLUMNA J
                    //var listformat = new ListValue<StringValue>();
                    //listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    //var conditionalFormatting1 = new ConditionalFormatting();
                    //conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    //var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    //var iconSet1 = new IconSet() { ShowValue = false };

                    //ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    //ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    //iconSet1.Append(conditionalFormatValueObject1);
                    //iconSet1.Append(conditionalFormatValueObject2);
                    //iconSet1.Append(conditionalFormatValueObject3);

                    //conditionalFormattingRule1.Append(iconSet1);
                    //conditionalFormatting1.Append(conditionalFormattingRule1);

                    //worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }


        public byte[] ExportarSolicitudes(
            int flow
            , string role
            , string nombre
            , string sortName
            , string sortOrder
            , int estado
            , int gestionadoPor
            , int estadoSolicitud)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    PaginationApplication paginacion = new PaginationApplication();
                    paginacion.flow = flow;
                    paginacion.role = role;
                    paginacion.applicationId = nombre;
                    paginacion.pageNumber = 1;
                    paginacion.pageSize = int.MaxValue;
                    paginacion.sortName = sortName;
                    paginacion.sortOrder = sortOrder;
                    paginacion.managedBy = gestionadoPor;
                    paginacion.Status = estado;
                    paginacion.statusRequest = estadoSolicitud;



                    //var datos = new List<AplicacionDTO>();

                    var datos = ServiceManager<ApplicationDAO>.Provider.GetApplicationFlowByUserExportar(paginacion, out totalRows);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 17D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 25D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 45D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 40D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 40D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 25D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 25D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 40D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 45D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 40D, CustomWidth = true });//P
                    columns1.Append(new Column() { Min = 17U, Max = 17U, Width = 45D, CustomWidth = true });//Q
                    columns1.Append(new Column() { Min = 18U, Max = 18U, Width = 30D, CustomWidth = true });//R
                    columns1.Append(new Column() { Min = 19U, Max = 19U, Width = 40D, CustomWidth = true });//S
                    columns1.Append(new Column() { Min = 20U, Max = 20U, Width = 45D, CustomWidth = true });//T


                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Solicitudes Asignadas", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:T1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Estado de Atención", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de la Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "RegistradoPor", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de registro de la solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Rol asignado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Situación de la solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Comentarios", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Flujo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Fecha de Aprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Aprobado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Aprobado Por Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Fecha de Transferencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Transferido Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "Q", k, TipoDato.Cadena, "Transferido Por Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "R", k, TipoDato.Cadena, "Fecha de Desaprobación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "S", k, TipoDato.Cadena, "Desaprobado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "T", k, TipoDato.Cadena, "Desaprobado Por Nombre", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.Number;
                            cell.CellValue = new CellValue(item.indicadorexcel.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.applicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.applicationName.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.managedBy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.statusDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.registeredBy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.dateCreationStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.typeRegisterDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.isApprovedDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.comments);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.typeFlowDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.dateApprovedStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApprovedBy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ApprovedByName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.dateTransferStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TransferedBy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TransferedByName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.dateRejectedStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RejectedBy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.RejectedByName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);



                    //INDICADORES PARA LA COLUMNA J
                    var listformat = new ListValue<StringValue>();
                    listformat.Items.Add(String.Format("{0}{1}:{2}{3}", "A", 2, "A", datos.Count + 2));

                    var conditionalFormatting1 = new ConditionalFormatting();
                    conditionalFormatting1.SequenceOfReferences = new ListValue<StringValue>(listformat);

                    var conditionalFormattingRule1 = new ConditionalFormattingRule() { Type = ConditionalFormatValues.IconSet, Priority = 1 };

                    var iconSet1 = new IconSet() { ShowValue = false };

                    ConditionalFormatValueObject conditionalFormatValueObject1 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Percent, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject2 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0" };
                    ConditionalFormatValueObject conditionalFormatValueObject3 = new ConditionalFormatValueObject() { Type = ConditionalFormatValueObjectValues.Number, Val = "0", GreaterThanOrEqual = false };

                    iconSet1.Append(conditionalFormatValueObject1);
                    iconSet1.Append(conditionalFormatValueObject2);
                    iconSet1.Append(conditionalFormatValueObject3);

                    conditionalFormattingRule1.Append(iconSet1);
                    conditionalFormatting1.Append(conditionalFormattingRule1);

                    worksheetPart.Worksheet.InsertBefore(conditionalFormatting1, pageMargins1);
                    worksheetPart.Worksheet.InsertAfter(mergeCells1, worksheetPart.Worksheet.Elements<SheetData>().First());
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarUrlAplicacion(string equipo, DateTime? fecha, int fuenteId, bool? isOrphan, bool isActive, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var pag = new PaginacionUrlApp()
                    {
                        Equipo = equipo,
                        Fecha = fecha,
                        FuenteId = fuenteId,
                        IsOrphan = isOrphan,
                        IsActive = isActive,
                        pageNumber = 1,
                        pageSize = int.MaxValue,
                        sortName = sortName,
                        sortOrder = sortOrder
                    };

                    var datos = ServiceManager<UrlAplicacionDAO>.Provider.GetListadoAll(pag, out int totalRows);
                    //var datos = ServiceManager<UrlAplicacionDAO>.Provider.GetListado(pag, out int totalRows);

                    int k = 1;
                    var sheetName = "URLs Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//F

                    //Contenedor de Merge de columnas
                    //MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "URL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "CodigoAPT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fuente", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Comentario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fecha creación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Url);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreEquipo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UrlFuenteIdStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ActivoDetalle);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Comentario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarSolicitudesCreacion(string nombre, int estadoapp, string user, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    //var datos = ServiceManager<TipoDAO>.Provider.GetTipo(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    PaginationApplication pag = new PaginationApplication();
                    pag.applicationId = nombre == null ? "" : nombre;
                    pag.pageNumber = 1;
                    pag.pageSize = int.MaxValue;
                    pag.Status = estadoapp;
                    pag.Username = user;
                    pag.sortName = sortName;
                    pag.sortOrder = sortOrder;



                    var datos = ServiceManager<ApplicationDAO>.Provider.GetApplicationByUserWithActive(pag, out totalRows);
                    int k = 2;
                    var sheetName = "SolicitudesCreacion";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Solicitudes de Creación", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:I1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Situación de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Estado de revisión del portafolio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Código", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gestionado por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Estado aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tipo de Activo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de aprobación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.Nombre);
                            cell.CellValue = new CellValue(item.registrationSituationDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.commentDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.applicationId);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.name);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.managedBy);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.statusDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.registerDate.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.registerDate.ToString());
                            cell.CellValue = new CellValue(item.tipoactivo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.approvedDateStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }
        public byte[] ExportarSolicitudesModificacion(string matricula, string codigoApt, int estadoSolicitudUnico, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    //var datos = ServiceManager<TipoDAO>.Provider.GetTipo(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    PaginacionSolicitud pag = new PaginacionSolicitud();
                    //pag.applicationId = nombre == null ? "" : nombre;
                    pag.Matricula = matricula;
                    pag.CodigoApt = codigoApt == null ? "" : codigoApt;
                    pag.EstadoSolicitudUnico = estadoSolicitudUnico;
                    pag.pageNumber = 1;
                    pag.pageSize = int.MaxValue;
                    //pag.Status = estadoapp;
                    //pag.Username = user;
                    pag.sortName = sortName;
                    pag.sortOrder = sortOrder;



                    //var datos = ServiceManager<ApplicationDAO>.Provider.GetApplicationByUser(pag, out totalRows);
                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetSolicitudes2Exportar(pag, out totalRows);
                    int k = 2;
                    var sheetName = "SolicitudesModificacion";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Solicitudes de Modificacion", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo Activo Información", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Usuario que atendió la solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de la solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Observaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de actualización", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.registrationSituationDetail);
                            cell.CellValue = new CellValue(item.CodigoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreUsuario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoSolicitudToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Observaciones);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }
        public byte[] ExportarSolicitudesEliminacion(string matricula, string codigoApt, int estadoSolicitudUnico, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;
                    //var datos = ServiceManager<TipoDAO>.Provider.GetTipo(nombre, 1, int.MaxValue, sortName, sortOrder, out totalRows);

                    PaginacionSolicitud pag = new PaginacionSolicitud();

                    pag.Matricula = matricula;
                    pag.CodigoApt = codigoApt == null ? "" : codigoApt;
                    pag.EstadoSolicitudUnico = estadoSolicitudUnico;
                    pag.pageNumber = 1;
                    pag.pageSize = int.MaxValue;
                    pag.sortName = sortName;
                    pag.sortOrder = sortOrder;



                    //var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetSolicitudes2(pag, out totalRows);
                    var datos = ServiceManager<SolicitudAplicacionDAO>.Provider.GetSolicitudes3Exportar(pag, out totalRows);
                    int k = 2;
                    var sheetName = "SolicitudesEliminacion";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de Solicitudes de Eliminacion", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Aplicación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo Activo Información", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Usuario que atendió la solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Estado de la solicitud", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Observaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha de registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Atendido por", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha de Aprobación", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha de Transferencia", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Fecha de Desaprobación", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.registrationSituationDetail);
                            cell.CellValue = new CellValue(item.CodigoAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAplicacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoActivoInformacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreUsuario);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoSolicitudToString);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Observaciones);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreUsuarioAprobacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.dateApprovedStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.dateRejectedStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.dateTransferStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);


                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionadoPor(string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var totalRows = 0;

                    var pag = new Paginacion()
                    {
                        sortName = sortName,
                        sortOrder = sortOrder,
                        pageNumber = 1,
                        pageSize = int.MaxValue,
                        Activos = false
                    };

                    var datos = ServiceManager<ActivosDAO>.Provider.GetGestionadoPor(pag, out totalRows);

                    int k = 1;
                    var sheetName = "Registros inactivos";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//E

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, "BCP - Reporte de tipos", string.Empty, estilos.INDICE_TITULO);
                    //mergeCells1.Append(new MergeCell() { Reference = "A1:E1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nombre", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Estructura Agil", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "User IT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Subsidiaria", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha registro", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Creado por", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagEquipoAgilDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagUserITDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagSubsidiariasDetail);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacionFormato);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    //worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }


        public byte[] ExportarSiemVista1()
        {
            try
            {
                var datos = ServiceManager<SiemDAO>.Provider.GetListado(1, int.MaxValue, out int totalRows);
                using (MemoryStream documentStream = new MemoryStream())
                {
                    TextWriter tw = new StreamWriter(documentStream, System.Text.Encoding.UTF8);
                    tw.WriteLine("{0},{1},{2},{3}", "Servidor", "Ambiente_del_Servidor", "Subsidiaria", "Ip");
                    foreach (var item in datos)
                    {
                        tw.WriteLine("{0},{1},{2},{3}", item.servidor, item.ambiente, item.subsidiaria, item.ip);
                        tw.Flush();
                    }
                    documentStream.Position = 0;
                    return documentStream.ToArray();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public byte[] ExportarSiemVista2()
        {
            try
            {
                var datos = ServiceManager<SiemDAO>.Provider.GetListado2(1, int.MaxValue, out int totalRows);

                using (MemoryStream documentStream = new MemoryStream())
                {
                    TextWriter tw = new StreamWriter(documentStream,System.Text.Encoding.UTF8);
                    tw.WriteLine("{0},{1},{2},{3},{4},{5},{6},{7},{8}", "Servidor", "Ambiente_de_la_relacion", "Aplicacion", 
                        "Nombre_de_Aplicacion", "Gestionado_Por", "Owner_Lider_usuario", "TTL", "Usuarios_autorizadores", "Expertos");

                    foreach (var item in datos)
                    {
                        tw.WriteLine("{0},{1},{2},{3},{4},{5},{6},{7},{8}"
                            , item.servidor, item.ambienter, item.aplicacion, item.nombreaplicacion, item.gestionadopor
                            , item.rolLider, item.rolTTL, item.rolUsuario, item.rolExperto);
                        tw.Flush();
                    }
                    documentStream.Position = 0;
                    return documentStream.ToArray();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public byte[] ExportarAplicacionesValidadas(string username, string soportado, string codigoAPT, string dominio, string subdominio, string comboJE, string comboLU)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<InfoAplicacionDAO>.Provider.GetInfoAppExportar(username, soportado, codigoAPT,dominio,subdominio,comboJE,comboLU);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 50D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 50D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre del Aplicativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de ultima validación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Usuario Validador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "TL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Experto", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Código APT
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaValida.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioModificacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);
                            // A  - Código APT
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.gestionadopor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.owner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.PO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TTL);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TL);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.jefe);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.experto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        //public byte[] ExportarListaTecnologiaByProducto(int productoId, string productoStr)
        //{
        //    var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

        //    using (MemoryStream documentStream = new MemoryStream())
        //    {
        //        documentStream.Write(archivoBytes, 0, archivoBytes.Length);
        //        documentStream.Position = 0;
        //        using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

        //        {
        //            Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
        //            spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
        //            spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

        //            var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

        //            var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiaByProducto(productoId);

        //            int k = 2;
        //            var sheetName = "Tecnologias";

        //            WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

        //            //Definicion de columnas estáticas
        //            Columns columns1 = new Columns();
        //            SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
        //            if ((sd != null))
        //            {
        //                columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
        //            }
        //            else
        //            {
        //                columns1 = new Columns();
        //                worksheetPart.Worksheet.Append(columns1);
        //            }

        //            columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
        //            columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
        //            columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
        //            columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
        //            columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E

        //            //Contenedor de Merge de columnas
        //            MergeCells mergeCells1 = new MergeCells();

        //            //TITULO DEL REPORTE
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Detalle Tecnologías relacionadas al producto {productoStr}", string.Empty, estilos.INDICE_TITULO);
        //            mergeCells1.Append(new MergeCell() { Reference = "A1:G1" });

        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Estado Tecnología", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo Tecnología", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Fecha fin de soporte", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Instancias Servidores", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Instancias Servicio Nube", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Instancias Pc's", string.Empty, estilos.INDICE_CABECERA);

        //            if (worksheetPart != null)
        //            {
        //                SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
        //                foreach (var item in datos)
        //                {
        //                    Row newRow = new Row();
        //                    Cell cell = new Cell();

        //                    // A  - Código
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.CodigoProducto);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // B  - Tecnología
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.ClaveTecnologia);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // C  - Estado Tecnología
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.EstadoStr);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // D  - Tipo Tecnología
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.TipoTecnologiaStr);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // E  - Fecha fin de soporte
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.FechaFinSoporteSite);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    sheetData.AppendChild(newRow);
        //                }
        //            }

        //            PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
        //            worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
        //            spreadSheet.Close();
        //        }
        //        return documentStream.ToArray();
        //    }
        //}

        public byte[] ExportarListadoXOwnerProducto(string correo, int perfilId, int productoId, string productoStr, string filtro)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<TecnologiaDAO>.Provider.BuscarTecnologiaXOwnerProducto(correo, perfilId, productoId);

                    datos = datos.Where(x =>
                        (x.ClaveTecnologia ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.EstadoStr ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.TipoTecnologia ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.TotalInstanciasServidores.ToString() ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.TotalInstanciasServicioNube.ToString() ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.TotalInstanciasPcs.ToString() ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.TotalAplicaciones.ToString() ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.FechaCalculoValorTecStr ?? "").ToLower().Contains((filtro ?? "").ToLower())
                    ).ToList();

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Detalle Tecnologías relacionadas al producto {productoStr}", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Estado Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Instancias Servidores", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Instancias Servicio Nube", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Instancias Pc's", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "# de Aplicaciones Relaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Fecha fin de soporte", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Estado Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Tipo Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D  - Instancias Servidores
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServidores.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E  - Instancias Servicio Nube
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServicioNube.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F  - Instancias Pc's
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasPcs.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G  - # de Aplicaciones Relaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H  - Fecha fin de soporte
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoValorTecStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarListarEquipoByTecnologiaTipoEquipoTecnologiaOwner(int tecnologiaId, int tipoEquipoId, string tecnologiaStr, string tipoEquipoStr, string filtro)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<EquipoDAO>.Provider.ListarEquiposXTecnologiaTipoEquipo(tecnologiaId, tipoEquipoId);

                    datos = datos.Where(x =>
                        (x.Nombre ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.TipoEquipoId != 4 ? (x.SistemaOperativo ?? "") : (x.Suscripcion ?? "")).ToLower().Contains((filtro ?? "").ToLower())
                    ).ToList();

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 90D, CustomWidth = true });//B

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Detalle {tipoEquipoStr} relacionadas a la tecnología {tecnologiaStr}", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:B1" });

                    string columnNameA = tipoEquipoId == (int)ETipoEquipo.Servidor ? "Nombre Servidor" : tipoEquipoId == (int)ETipoEquipo.ServicioNube ? "Nombre Componente" : tipoEquipoId == (int)ETipoEquipo.PC ? "Nombre Pc" : "";
                    string columnNameB = tipoEquipoId != (int)ETipoEquipo.ServicioNube ? "Sistema Operativo" : "Suscripción";

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, columnNameA, string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, columnNameB, string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - columnNameA
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - columnNameB
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(tipoEquipoId != (int)ETipoEquipo.ServicioNube ? item.SistemaOperativo : item.Suscripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarListarEquipoByProductoTipoEquipoProductoOwner(int productoId, int tipoEquipoId, string productoStr, string tipoEquipoStr, string filtro)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<EquipoDAO>.Provider.ListarEquiposXProductoTipoEquipo(productoId, tipoEquipoId);

                    datos = datos.Where(x =>
                        (x.Nombre ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.ClaveTecnologia ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.TipoEquipoId != 4 ? (x.SistemaOperativo ?? "") : (x.Suscripcion ?? "")).ToLower().Contains((filtro ?? "").ToLower())
                    ).ToList();

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 50D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 50D, CustomWidth = true });//C

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Detalle {tipoEquipoStr} relacionadas al producto {productoStr}", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:C1" });

                    string columnNameA = tipoEquipoId == (int)ETipoEquipo.Servidor ? "Nombre Servidor" : tipoEquipoId == (int)ETipoEquipo.ServicioNube ? "Nombre Componente" : tipoEquipoId == (int)ETipoEquipo.PC ? "Nombre Pc" : "";
                    string columnNameC = tipoEquipoId != (int)ETipoEquipo.ServicioNube ? "Sistema Operativo" : "Suscripción";

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, columnNameA, string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, columnNameC, string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - columnNameA
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - columnNameC
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(tipoEquipoId != (int)ETipoEquipo.ServicioNube ? item.SistemaOperativo : item.Suscripcion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarListTecnologiaOwner(string correo, int perfilId, string dominioIds, string subDominioIds, string productoStr, int? tribuCoeId, int? squadId, bool? flagTribuCoe, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<TecnologiaDAO>.Provider.BuscarTecnologiaXOwner(correo, perfilId, dominioIds, subDominioIds, productoStr, tribuCoeId, squadId, flagTribuCoe, 1, int.MaxValue, sortName, sortOrder, out int totalRows);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Registros de Tecnologías", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:P1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "SubDominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Tipo Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Instancias Servidores", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Instancias Servicio Nube", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Instancias Pc's", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "# de Aplicaciones Relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Fecha Fin Soporte", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Estado de obsolescencia", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Tribu/Coe/Unidad Organizativa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Responsable Tribu/Coe/Unidad Organizativa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Responsable Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Tiene Owner", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Dominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - SubDominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ProductoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D  - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E  - Tipo Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F  - Instancia Servidores
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServidores.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G  - Instancia Servicio Nube
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServicioNube.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H  - Instancia Pc's
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasPcs.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I  - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J  - Fecha Fin Soporte
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoValorTecStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K  - Estado
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L  - Tribu/Coe/Unidad Organizativa
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // M  - Responsable Tribu/Coe/Unidad Organizativa
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayNameResponsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // N  - Squad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // O  - Responsable Squad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayNameResponsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // P  - Tiene Tribu Coe
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FlagTribuCoeStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarListProductoOwnerConsolidado(string correo, int perfilId, string dominioIds, string subDominioIds, string productoStr, int? tribuCoeId, int? squadId, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<ProductoDAO>.Provider.BuscarProductoXOwner(correo, perfilId, dominioIds, subDominioIds, productoStr, tribuCoeId, squadId, 1, int.MaxValue, sortName, sortOrder, out int totalRows);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Registros de Tecnologías", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:L1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "SubDominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "# de Tecnologías Relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Instancias Servidores", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Instancias Servicio Nube", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Instancias Pc's", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "# de Aplicaciones Relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Tribu/Coe/Unidad Organizativa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Responsable Tribu/Coe/Unidad Organizativa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Responsable Squad", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Dominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - SubDominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ProductoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D  - Tecnologias
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalTecnologias.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E  - Instancia Servidores
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServidores.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F  - Instancia Servicio Nube
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServicioNube.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G  - Instancia Pc's
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasPcs.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H  - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I  - Tribu/Coe/Unidad Organizativa
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J  - Responsable Tribu/Coe/Unidad Organizativa
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayNameResponsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K  - Squad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L  - Responsable Squad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayNameResponsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarListProductoOwnerDetallado(string correo, int perfilId, string dominioIds, string subDominioIds, string productoStr, int? tribuCoeId, int? squadId, bool? flagTribuCoe, string sortName, string sortOrder)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<TecnologiaDAO>.Provider.BuscarTecnologiaXOwner(correo, perfilId, dominioIds, subDominioIds, productoStr, tribuCoeId, squadId, flagTribuCoe, 1, int.MaxValue, sortName, sortOrder, out int totalRows);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 30D, CustomWidth = true });//K
                    columns1.Append(new Column() { Min = 12U, Max = 12U, Width = 30D, CustomWidth = true });//L
                    columns1.Append(new Column() { Min = 13U, Max = 13U, Width = 30D, CustomWidth = true });//M
                    columns1.Append(new Column() { Min = 14U, Max = 14U, Width = 30D, CustomWidth = true });//N
                    columns1.Append(new Column() { Min = 15U, Max = 15U, Width = 30D, CustomWidth = true });//O
                    columns1.Append(new Column() { Min = 16U, Max = 16U, Width = 30D, CustomWidth = true });//P

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Registros de Productos", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:P1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "SubDominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Instancias Servidores", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Instancias Servicio Nube", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Instancias Pc's", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "# de Aplicaciones Relacionadas", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Tribu/Coe/Unidad Organizativa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Responsable Tribu/Coe/Unidad Organizativa", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Responsable Squad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "L", k, TipoDato.Cadena, "Código Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "M", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Estado de la Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "N", k, TipoDato.Cadena, "Tipo de Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "O", k, TipoDato.Cadena, "Estado", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "P", k, TipoDato.Cadena, "Fecha Fin Soporte", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Dominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Dominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - SubDominio
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Subdominio);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Producto
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ProductoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D  - Instancia Servidores
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServidores.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // E  - Instancia Servicio Nube
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasServicioNube.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // F  - Instancia Pc's
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalInstanciasPcs.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // G  - Aplicaciones
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TotalAplicaciones.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // H  - Tribu/Coe/Unidad Organizativa
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // I  - Responsable Tribu/Coe/Unidad Organizativa
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TribuCoeDisplayNameResponsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // J  - Squad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayName);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // K  - Responsable Squad
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SquadDisplayNameResponsable);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // L  - Código Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Codigo);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // M  - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //// N  - Estado de la Tecnología
                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.EstadoTecnologiaStr);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            // N  - Tipo de Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TipoTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // O  - Estado
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // P  - Fecha Fin Soporte
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCalculoValorTecStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarListAplicacionesProducto(int productoId, string productoStr, string filtro)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<ProductoDAO>.Provider.GetTecnologiaAplicaciones(productoId);

                    datos = datos.Where(x =>
                        (x.Tecnologia.ClaveTecnologia ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.Aplicacion.CodigoAPT ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.Aplicacion.Nombre ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.Aplicacion.GestionadoPor ?? "").ToLower().Contains((filtro ?? "").ToLower())
                    ).ToList();

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Detalle Aplicaciones relacionadas al producto {productoStr}", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:D1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Tecnología", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Nombre del Aplicativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Tecnología
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Tecnologia.ClaveTecnologia);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Código APT
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // D  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarListAplicacionesTecnologia(int tecnologia, string tecnologiaStr, string filtro)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<TecnologiaDAO>.Provider.GetTecnologiaAplicaciones(tecnologia);

                    datos = datos.Where(x =>
                        (x.Aplicacion.CodigoAPT ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.Aplicacion.Nombre ?? "").ToLower().Contains((filtro ?? "").ToLower()) ||
                        (x.Aplicacion.GestionadoPor ?? "").ToLower().Contains((filtro ?? "").ToLower())
                    ).ToList();

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 90D, CustomWidth = true });//C

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Detalle Aplicaciones relacionadas a la tecnología {tecnologiaStr}", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:C1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre del Aplicativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Código APT
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Aplicacion.GestionadoPor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        List<TecnologiaOwnerConsolidadoObsolescenciaDTO> ListarTecnologiaOwnerConsolidadoObsolescencia(List<TecnologiaOwnerConsolidadoObsolescenciaDTO> datosOriginal, int nivel = 1, string ownerParentIds = null)
        {
            var datos = datosOriginal.Where(x => x.Nivel == nivel && (x.OwnerParentId ?? "") == (ownerParentIds ?? "")).ToList();

            datos = datos ?? new List<TecnologiaOwnerConsolidadoObsolescenciaDTO>();

            if (datos.Count > 0)
            {
                foreach(var item in datos)
                {
                    List<string> ownerParentIdsArray = nivel == 1 ? new List<string>() : (ownerParentIds ?? "").Split(',').ToList();
                    ownerParentIdsArray.Add(item.OwnerId.ToString());
                    string ownerParentIdsArrayStr = ownerParentIdsArray == null ? null : string.Join(",", ownerParentIdsArray);
                    if (nivel < 5)item.ListaDetalle = ListarTecnologiaOwnerConsolidadoObsolescencia(datosOriginal, nivel + 1, ownerParentIdsArrayStr);
                }
            }

            return datos;
        }

        void ListarTecnologiaOwnerConsolidadoObsolescenciaAddSheetData(List<TecnologiaOwnerConsolidadoObsolescenciaDTO> datos, SheetData sheetData, EstilosExcel estilos)
        {
            for (int index = 0; index < datos.Count; index++)
            {
                var item = datos[index];

                Row newRow = new Row();
                Cell cell = new Cell();

                item.ListaDetalle = item.ListaDetalle ?? new List<TecnologiaOwnerConsolidadoObsolescenciaDTO>();

                if (item.ListaDetalle.Count > 0 || (item.Nivel == 5 && index == 0))
                {
                    string nivelStr = item.Nivel == 1 ? "Tribu/Coe/Unidad Organizativa" : item.Nivel == 2 ? "Dominio" : item.Nivel == 3 ? "SubDominio" : item.Nivel == 4 ? "Producto" : item.Nivel == 5 ? "Tecnología" : "";

                    cell = new Cell();
                    cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(nivelStr);
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD.ToString());
                    newRow.AppendChild(cell);

                    sheetData.AppendChild(newRow);
                }

                newRow = new Row();

                //// A  - Nivel
                //cell = new Cell();
                //cell.DataType = CellValues.String;
                //cell.CellValue = new CellValue(item.Nivel.ToString());
                //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                //newRow.AppendChild(cell);

                // B  - Owner
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(string.IsNullOrEmpty(item.Owner) ? "-" : item.Owner);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // C  - Nombre del Aplicativo
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.ObsoletoKPI.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // D  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PorcentajeObsoletoKPI.ToString("0.00"));
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // E  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.VigenteKPI.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // F  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PorcentajeVigenteKPI.ToString("0.00"));
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // G  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.DeprecadoKPI.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // H  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PorcentajeDeprecadoKPI.ToString("0.00"));
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // I  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TotalKPI.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // J  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PorcentajeTotalKPI.ToString("0.00"));
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                sheetData.AppendChild(newRow);

                if (item.ListaDetalle.Count > 0) ListarTecnologiaOwnerConsolidadoObsolescenciaAddSheetData(item.ListaDetalle, sheetData, estilos);
            }
        }

        public byte[] ExportarListarTecnologiaOwnerConsolidadoObsolescencia(string dominioIds, string subDominioIds, string productoStr, string tecnologiaStr, string ownerStr, string squadId)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<TecnologiaDAO>.Provider.ListarTecnologiaOwnerConsolidadoObsolescenciaReporte(dominioIds, subDominioIds, productoStr, tecnologiaStr, ownerStr, squadId);
                    var datosFinal = ListarTecnologiaOwnerConsolidadoObsolescencia(datos);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 30D, CustomWidth = true });//I
                    //columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 30D, CustomWidth = true });//J

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Detalle Aplicaciones relacionadas a la tecnología {tecnologiaStr}", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:I1" });

                    //OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nivel", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Obsoleto KPI (Instancias Serv + Azure)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "%", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Vigente KPI (Instancias Serv + Azure)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "%", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Deprecado KPI (Instancias Serv + Azure)", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "%", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Total KPI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Total %", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        ListarTecnologiaOwnerConsolidadoObsolescenciaAddSheetData(datosFinal, sheetData, estilos);
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        List<TecnologiaGestionadoPorConsolidadoObsolescenciaDTO> ListarTecnologiaSoportadoPorConsolidadoObsolescencia(List<TecnologiaGestionadoPorConsolidadoObsolescenciaDTO> datosOriginal, int nivel = 1, string soportadoPorParents = null)
        {
            var datos = datosOriginal.Where(x => x.Nivel == nivel && (x.SoportadoPorParent ?? "") == (soportadoPorParents ?? "")).ToList();

            datos = datos ?? new List<TecnologiaGestionadoPorConsolidadoObsolescenciaDTO>();

            if (datos.Count > 0)
            {
                foreach (var item in datos)
                {
                    List<string> ownerParentIdsArray = nivel == 1 ? new List<string>() : (soportadoPorParents ?? "").Split(',').ToList();
                    ownerParentIdsArray.Add((item.SoportadoPorId ?? "").ToString());
                    string ownerParentIdsArrayStr = ownerParentIdsArray == null ? null : string.Join(",", ownerParentIdsArray);
                    if (nivel < 5) item.ListaDetalle = ListarTecnologiaSoportadoPorConsolidadoObsolescencia(datosOriginal, nivel + 1, ownerParentIdsArrayStr);
                }
            }

            return datos;
        }

        void ListarTecnologiaSoportadoPorConsolidadoObsolescenciaAddSheetData(List<TecnologiaGestionadoPorConsolidadoObsolescenciaDTO> datos, SheetData sheetData, EstilosExcel estilos)
        {
            for (int index = 0; index < datos.Count; index++)
            {
                var item = datos[index];

                Row newRow = new Row();
                Cell cell = new Cell();

                item.ListaDetalle = item.ListaDetalle ?? new List<TecnologiaGestionadoPorConsolidadoObsolescenciaDTO>();

                if (item.ListaDetalle.Count > 0 || (item.Nivel == 5 && index == 0))
                {
                    string nivelStr = item.Nivel == 1 ? "Tribu/Coe/Unidad Organizativa" : item.Nivel == 2 ? "Dominio" : item.Nivel == 3 ? "SubDominio" : item.Nivel == 4 ? "Producto" : item.Nivel == 5 ? "Tecnología" : "";

                    cell = new Cell();
                    cell.DataType = CellValues.String;
                    cell.CellValue = new CellValue(nivelStr);
                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS_BOLD.ToString());
                    newRow.AppendChild(cell);

                    sheetData.AppendChild(newRow);
                }

                newRow = new Row();

                // A  - Nivel
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.Nivel.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // B  - Owner
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.SoportadoPor);
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // C  - Nombre del Aplicativo
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.ObsoletoKPI.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // D  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PorcentajeObsoletoKPI.ToString("0.00"));
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // E  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.VigenteKPI.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // F  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PorcentajeVigenteKPI.ToString("0.00"));
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // I  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.TotalKPI.ToString());
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                // J  - Gestionado Por
                cell = new Cell();
                cell.DataType = CellValues.String;
                cell.CellValue = new CellValue(item.PorcentajeTotalKPI.ToString("0.00"));
                cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                newRow.AppendChild(cell);

                sheetData.AppendChild(newRow);

                if (item.ListaDetalle.Count > 0) ListarTecnologiaSoportadoPorConsolidadoObsolescenciaAddSheetData(item.ListaDetalle, sheetData, estilos);
            }
        }

        public byte[] ExportarListarTecnologiaSoportadoPorConsolidadoObsolescencia(string correoOwner, int perfilId, string dominioIds, string subDominioIds, string aplicacionStr, string gestionadoPor)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);
                    var datos = ServiceManager<TecnologiaDAO>.Provider.ListarTecnologiaSoportadoPorConsolidadoObsolescenciaReporte(correoOwner, perfilId, dominioIds, subDominioIds, aplicacionStr, gestionadoPor);
                    var datosFinal = ListarTecnologiaSoportadoPorConsolidadoObsolescencia(datos);

                    int k = 2;
                    var sheetName = "Tecnologias";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 30D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 30D, CustomWidth = true });//H

                    //Contenedor de Merge de columnas
                    MergeCells mergeCells1 = new MergeCells();

                    //TITULO DEL REPORTE
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", 1, TipoDato.Cadena, $"BCP - Reporte Consolidado Por Gestionado", string.Empty, estilos.INDICE_TITULO);
                    mergeCells1.Append(new MergeCell() { Reference = "A1:H1" });

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Nivel", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Soportado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Obsoleto KPI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "%", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Vigente KPI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "%", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Total KPI", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Total %", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        ListarTecnologiaSoportadoPorConsolidadoObsolescenciaAddSheetData(datosFinal, sheetData, estilos);
                    }

                    PageMargins pageMargins1 = worksheetPart.Worksheet.GetFirstChild<PageMargins>();
                    worksheetPart.Worksheet.InsertBefore(mergeCells1, pageMargins1);
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] GetConsultaAppValidaExportar(string soportado, string codigoAPT, string dominio, string subdominio, string comboJE, string comboLU)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;
                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<InfoAplicacionDAO>.Provider.GetInfoAppExportar(null,soportado, codigoAPT,dominio,subdominio,comboJE,comboLU);

                    int k = 2;
                    var sheetName = "Aplicaciones";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 50D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
                    columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
                    columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 50D, CustomWidth = true });//I
                    columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
                    columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre del Aplicativo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de ultima validación", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Usuario Validador", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Product Owner", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "TL", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Experto", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            // A  - Código APT
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CodigoAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.NombreAPT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaValida.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioModificacion);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);
                            // A  - Código APT
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.gestionadopor);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.owner);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.PO);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TTL);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // B  - Nombre del Aplicativo
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.TL);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.jefe);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            // C  - Gestionado Por
                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.experto);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }
                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarReporteConsolido2(string estado, string apps, string gest)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos1 = ServiceManager<GuardicoreDAO>.Provider.GetGuardicoreConsolidado2tab1Exportar(estado, apps, gest);

                    int k = 1;
                    var sheetName = "Esta en Guardicore y no en CVT";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//F


                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Aplicaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Equipo Origen", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Ip Origen", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Equipo Destino", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Ip Destino", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Esta en CVT", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos1)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.codigoapp);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoOrigen);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IpOrigen);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoDestino);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IpDestino);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EstadoCVT);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    //Hoja 2
                    //#region HOJA 2

                    sheetName = "Coincide en Guardicore y CVT";
                    k = 1;

                    var datos2 = ServiceManager<GuardicoreDAO>.Provider.GetGuardicoreConsolidado2tab2Exportar(estado, apps, gest);
                    WorksheetPart worksheetPart2 = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Data", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns2 = new Columns();
                    SheetData sd2 = worksheetPart2.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd2 != null))
                    {
                        columns2 = worksheetPart2.Worksheet.InsertBefore(new Columns(), sd2);
                    }
                    else
                    {
                        columns2 = new Columns();
                        worksheetPart2.Worksheet.Append(columns2);
                    }

                    columns2.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns2.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//C

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "A", k, TipoDato.Cadena, "Aplicaciones", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "B", k, TipoDato.Cadena, "Equipo CVT", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart2, "C", k, TipoDato.Cadena, "IP CVT", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart2 != null)
                    {
                        SheetData sheetData = worksheetPart2.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos2)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.codigoapp);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.EquipoOrigen);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.IpOrigen);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        //public byte[] GetConsultaAppValidaExportar(string soportado, string codigoAPT, string dominio, string subdominio, string comboJE, string comboLU)
        //{
        //    var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

        //    using (MemoryStream documentStream = new MemoryStream())
        //    {
        //        documentStream.Write(archivoBytes, 0, archivoBytes.Length);
        //        documentStream.Position = 0;
        //        using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))

        //        {
        //            Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
        //            spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
        //            spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

        //            var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

        //            var datos = ServiceManager<InfoAplicacionDAO>.Provider.GetInfoAppExportar(null, soportado, codigoAPT, dominio, subdominio, comboJE, comboLU);

        //            int k = 2;
        //            var sheetName = "Aplicaciones";

        //            WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

        //            //Definicion de columnas estáticas
        //            Columns columns1 = new Columns();
        //            SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
        //            if ((sd != null))
        //            {
        //                columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
        //            }
        //            else
        //            {
        //                columns1 = new Columns();
        //                worksheetPart.Worksheet.Append(columns1);
        //            }

        //            columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 15D, CustomWidth = true });//A
        //            columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 50D, CustomWidth = true });//B
        //            columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 20D, CustomWidth = true });//C
        //            columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 20D, CustomWidth = true });//D
        //            columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 15D, CustomWidth = true });//E
        //            columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 50D, CustomWidth = true });//F
        //            columns1.Append(new Column() { Min = 7U, Max = 7U, Width = 20D, CustomWidth = true });//G
        //            columns1.Append(new Column() { Min = 8U, Max = 8U, Width = 20D, CustomWidth = true });//H
        //            columns1.Append(new Column() { Min = 9U, Max = 9U, Width = 50D, CustomWidth = true });//I
        //            columns1.Append(new Column() { Min = 10U, Max = 10U, Width = 20D, CustomWidth = true });//J
        //            columns1.Append(new Column() { Min = 11U, Max = 11U, Width = 20D, CustomWidth = true });//K

        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Código APT", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Nombre del Aplicativo", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Fecha de ultima validación", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Usuario Validador", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Gestionado Por", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Owner", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Product Owner", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "TTL", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "TL", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "J", k, TipoDato.Cadena, "Jefe de Equipo", string.Empty, estilos.INDICE_CABECERA);
        //            OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "K", k, TipoDato.Cadena, "Experto", string.Empty, estilos.INDICE_CABECERA);

        //            if (worksheetPart != null)
        //            {
        //                SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
        //                foreach (var item in datos)
        //                {
        //                    Row newRow = new Row();
        //                    Cell cell = new Cell();

        //                    // A  - Código APT
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.CodigoAPT);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // B  - Nombre del Aplicativo
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.NombreAPT);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // C  - Gestionado Por
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.FechaValida.ToString());
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // C  - Gestionado Por
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.UsuarioModificacion);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);
        //                    // A  - Código APT
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.gestionadopor);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // B  - Nombre del Aplicativo
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.owner);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // C  - Gestionado Por
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.PO);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // C  - Gestionado Por
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.TTL);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // B  - Nombre del Aplicativo
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.TL);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // C  - Gestionado Por
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.jefe);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    // C  - Gestionado Por
        //                    cell = new Cell();
        //                    cell.DataType = CellValues.String;
        //                    cell.CellValue = new CellValue(item.experto);
        //                    cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
        //                    newRow.AppendChild(cell);

        //                    sheetData.AppendChild(newRow);
        //                }
        //            }
        //            spreadSheet.Close();
        //        }
        //        return documentStream.ToArray();
        //    }
        //}

        public byte[] ExportarMatrizRolesPorProducto(string producto, int dominioId, int subDominioId, string matricula, string perfil, string tribu, string squad, string codigoTribu)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte_v2.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var objDTO = new PaginacionSolicitud { Producto = producto, DominioId = dominioId, SubDominioId = subDominioId, pageNumber = 1, pageSize = int.MaxValue, sortName = "Nombre", sortOrder = "asc", Matricula = matricula, Perfil = perfil,
                        TribuId = tribu, SquadId = squad, CodigoTribu= codigoTribu
                    };

                    var datos1 = ServiceManager<SolicitudAplicacionDAO>.Provider.GetProductos(objDTO, out int totalRows);

                    int k = 1;
                    var sheetName = "Roles por Producto";

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", sheetName);

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 20D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//C
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//D
                    //columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//E
                    //columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//F


                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Dominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "SubDominio", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Producto", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Roles Relacionados", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
                        foreach (var item in datos1)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.DominioStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.SubDominioStr);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.Nombre);
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.CantidadRoles.ToString());
                            cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.IpDestino);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            //cell = new Cell();
                            //cell.DataType = CellValues.String;
                            //cell.CellValue = new CellValue(item.EstadoCVT);
                            //cell.StyleIndex = uint.Parse(estilos.INDICE_DATOS.ToString());
                            //newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }
                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionEtiquetadoGeneral(string etiqueta, string clave)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<GuardicoreDAO>.Provider.GetEtiquetado(etiqueta, clave);

                    int k = 2;

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", "Reporte Etiqueta General");

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Etiqueta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Clave", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Comentario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Usuario Creacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Fecha Creacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Usuario Modificacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha Modificacion", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.etiqueta);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.clave);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.comentario);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacion.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioModificacion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaModificacion.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }

        public byte[] ExportarGestionEtiquetadoTecnologia(string etiqueta, string comodin, int prioridad, int tipo)
        {
            var archivoBytes = Utilitarios.ObtenerPlantillaExportar("PlantillaReporte.xlsx");

            using (MemoryStream documentStream = new MemoryStream())
            {
                documentStream.Write(archivoBytes, 0, archivoBytes.Length);
                documentStream.Position = 0;

                using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(documentStream, true))
                {
                    Stylesheet stylesheet = spreadSheet.WorkbookPart.WorkbookStylesPart.Stylesheet;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
                    spreadSheet.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;

                    var estilos = ConfigurarEstilos(spreadSheet, stylesheet);

                    var datos = ServiceManager<GuardicoreDAO>.Provider.GetServidorRelacion(etiqueta,comodin,prioridad,tipo);

                    int k = 2;

                    WorksheetPart worksheetPart = OpenXMLUtilitarios.ObtenerHoja(spreadSheet.WorkbookPart, "Reporte", "Reporte Etiqueta Tecnologia");

                    //Definicion de columnas estáticas
                    Columns columns1 = new Columns();
                    SheetData sd = worksheetPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                    if ((sd != null))
                    {
                        columns1 = worksheetPart.Worksheet.InsertBefore(new Columns(), sd);
                    }
                    else
                    {
                        columns1 = new Columns();
                        worksheetPart.Worksheet.Append(columns1);
                    }

                    columns1.Append(new Column() { Min = 1U, Max = 1U, Width = 30D, CustomWidth = true });//A
                    columns1.Append(new Column() { Min = 2U, Max = 2U, Width = 30D, CustomWidth = true });//B
                    columns1.Append(new Column() { Min = 3U, Max = 3U, Width = 30D, CustomWidth = true });//C                  
                    columns1.Append(new Column() { Min = 4U, Max = 4U, Width = 30D, CustomWidth = true });//D
                    columns1.Append(new Column() { Min = 5U, Max = 5U, Width = 30D, CustomWidth = true });//E
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//F
                    columns1.Append(new Column() { Min = 6U, Max = 6U, Width = 30D, CustomWidth = true });//G

                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "A", k, TipoDato.Cadena, "Etiqueta", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "B", k, TipoDato.Cadena, "Comodin", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "C", k, TipoDato.Cadena, "Tipo", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "D", k, TipoDato.Cadena, "Prioridad", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "E", k, TipoDato.Cadena, "Comentario", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "F", k, TipoDato.Cadena, "Usuario Creacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "G", k, TipoDato.Cadena, "Fecha Creacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "H", k, TipoDato.Cadena, "Usuario Modificacion", string.Empty, estilos.INDICE_CABECERA);
                    OpenXMLUtilitarios.SetCellValueOperacion(worksheetPart, "I", k, TipoDato.Cadena, "Fecha Modificacion", string.Empty, estilos.INDICE_CABECERA);

                    if (worksheetPart != null)
                    {
                        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
                        foreach (var item in datos)
                        {
                            Row newRow = new Row();
                            Cell cell = new Cell();

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.etiqueta);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.comodin);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.nombreTipoAplicacionRelacion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.prioridad.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.comentario);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioCreacion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaCreacion.ToString());
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.UsuarioModificacion);
                            newRow.AppendChild(cell);

                            cell = new Cell();
                            cell.DataType = CellValues.String;
                            cell.CellValue = new CellValue(item.FechaModificacion.ToString());
                            newRow.AppendChild(cell);

                            sheetData.AppendChild(newRow);
                        }
                    }

                    spreadSheet.Close();
                }

                return documentStream.ToArray();
            }
        }
    }
}
