using BCP.CVT.Cross;
using BCP.CVT.DTO;
using BCP.CVT.Services.Email;
using BCP.CVT.Services.Interface;
using BCP.CVT.Services.Interface.PortafolioAplicaciones;
using BCP.CVT.Services.ModelDB;
using BCP.PAPP.Common.Cross;
using BCP.PAPP.Common.Custom;
using BCP.PAPP.Common.Dto;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;

using Newtonsoft.Json;
using log4net;
using Newtonsoft.Json.Serialization;
using RestSharp;
using RestSharp.Authenticators;
using System.Net.Http.Headers;


namespace BCP.CVT.Services.Service.PortafolioAplicaciones
{
    public class ApplicationSvc : ApplicationDAO
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        public override DataResultAplicacion AddApplicationStepOne(ApplicationDto objeto, List<ApplicationManagerCatalogDto> usuarios)
        {
            DbContextTransaction transaction = null;
            try
            {
                int ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        bool existsCodigoAPT = this.ExistsApplicationById(objeto.applicationId);
                        int mainOfficeId = this.GetMainOfficeId(objeto.architectId);
                        var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);
                        var gestionadoPor = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(objeto.managed.Value);

                        if (existsCodigoAPT) dataResult.EstadoTransaccion = false;
                        if (gestionadoPor == null) dataResult.EstadoTransaccion = false;

                        if (dataResult.EstadoTransaccion)
                        {
                            var entidad = new Application()
                            {
                                applicationId = objeto.applicationId,
                                managed = objeto.managed,
                                applicationName = objeto.applicationName,
                                implementationType = objeto.implementationType,
                                description = objeto.description,
                                deploymentType = objeto.deploymentType,
                                deploymentTypeOriginal = objeto.deploymentType,
                                parentAPTCode = objeto.parentAPTCode == "0" ? string.Empty : objeto.parentAPTCode,
                                status = objeto.status,
                                mainOffice = mainOfficeId,
                                //Arquitecto                                
                                //tiene interfaz,
                                hasInterfaceId = objeto.hasInterfaceId,
                                interfaceId = objeto.interfaceId,
                                registerDate = DateTime.Now,
                                registerBy = objeto.registerBy,
                                architectId = objeto.architectId,
                                registrationSituation = (int)ApplicationSituationRegister.RegistroParcial,
                                isApproved = false,
                                isImported = false,
                                isActive = true,
                                isObserved = false
                            };
                            ctx.Application.Add(entidad);

                            //Registrando responsables
                            var solicitante = new ApplicationManagerCatalog()
                            {
                                applicationId = objeto.applicationId,
                                applicationManagerCatalogId = 0,
                                createdBy = objeto.registerBy,
                                dateCreation = DateTime.Now,
                                email = objeto.registerByEmail,
                                isActive = true,
                                managerName = objeto.registerByName,
                                username = objeto.registerBy,
                                applicationManagerId = (int)ApplicationManagerRole.Solicitante
                            };
                            ctx.ApplicationManagerCatalog.Add(solicitante);

                            var esUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;

                            if (esUserIT)
                            {
                                var usuariosUserIT = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                if (usuariosUserIT != null)
                                {
                                    foreach (var item in usuariosUserIT)
                                    {
                                        if (item.applicationManagerId != 0)
                                        {
                                            var flujoRol = new ApplicationFlow()
                                            {
                                                AppId = ID,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = item.username,
                                                ownerEmail = item.email,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = item.applicationManagerId,
                                                isActive = true,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoRol);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (arquitectoEvaluador != null)
                                {
                                    //Registrando el flujo para el arquitecto para aplicaciones que no son User IT                                    
                                    var flujoArquitecto = new ApplicationFlow()
                                    {
                                        AppId = ID,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        isCompleted = false,
                                        isNotified = false,
                                        ownerId = arquitectoEvaluador.Matricula,
                                        ownerEmail = arquitectoEvaluador.Correo,
                                        typeFlow = (int)Flow.Registro,
                                        typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                        isActive = true,
                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                    };
                                    ctx.ApplicationFlow.Add(flujoArquitecto);
                                }
                            }


                            //Registrando responsables por grupos
                            if (usuarios != null)
                            {
                                if (usuarios.Count() > 0)
                                {
                                    var exoneradosSinUserIT = usuarios.Where(x => x.applicationManagerId != (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                    foreach (var item in exoneradosSinUserIT)
                                    {
                                        if (item.applicationManagerId != 0)
                                        {
                                            var flujoRol = new ApplicationFlow()
                                            {
                                                AppId = ID,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = item.username,
                                                ownerEmail = item.email,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = item.applicationManagerId,
                                                isActive = true,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoRol);
                                        }
                                    }
                                }
                            }
                            ctx.SaveChanges();

                            ID = entidad.AppId;
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        //Enviar Correos
                        try
                        {
                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", objeto.applicationId);
                            diccionario.Add("[NombreAplicacion]", objeto.applicationName);
                            diccionario.Add("[Descripcion]", objeto.description);
                            diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)objeto.status.Value));
                            diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2(ApplicationSituationRegister.RegistroParcial));
                            diccionario.Add("[FechaRegistro]", DateTime.Now.ToString("dd/MM/yyyy"));
                            diccionario.Add("[CodigoAPTPadre]", objeto.parentAPTCode);
                            diccionario.Add("[GestionadoPor]", getManagedName(objeto.managed));
                            diccionario.Add("[ModeloEntrega]", getParametricaDetalleName(objeto.deploymentType));
                            diccionario.Add("[Interface]", objeto.interfaceId);

                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M1RegistroAplicacion, objeto.applicationId, diccionario);
                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M1NotificacionRegistroAplicaciónCustodioInformacion, objeto.applicationId, diccionario);
                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.RegistroAplicacionGrupoRemedy, objeto.applicationId, diccionario);
                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.RegistroParcialAplicacion, objeto.applicationId, diccionario);

                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }


                        //Bitacora
                        try
                        {

                            //Agregar registro en bitácora
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " registró la aplicación " + "" + objeto.applicationId + "" + " - " + "" + objeto.applicationName + "" + " el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = objeto.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.registerByName
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();

                        }
                        catch (Exception ex)
                        {
                            log.Error("Error ", ex);
                        }

                        this.SincronizarConCVT(objeto.applicationId);

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int AddOrEditTipo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int AddOrEditTipo(TipoDTO objeto)"
                    , new object[] { null });
            }


        }

        public override DataResultAplicacion AddApplicationReversion(ApplicationDto objeto, List<ApplicationManagerCatalogDto> usuarios)
        {
            DbContextTransaction transaction = null;
            try
            {
                int ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        bool existsCodigoAPT = this.ExistsApplicationById(objeto.applicationId);
                        int mainOfficeId = this.GetMainOfficeId(objeto.architectId);
                        var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);
                        var gestionadoPor = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(objeto.managed.Value);

                        var aplicacion = ctx.Application.Where(x => x.applicationId == objeto.applicationId).FirstOrDefault();
                        ID = aplicacion.AppId;

                        //if (existsCodigoAPT) dataResult.EstadoTransaccion = false;
                        if (gestionadoPor == null) dataResult.EstadoTransaccion = false;

                        if (dataResult.EstadoTransaccion)
                        {

                            //applicationId = objeto.applicationId,
                            aplicacion.managed = objeto.managed;
                            aplicacion.applicationName = objeto.applicationName;
                            aplicacion.implementationType = objeto.implementationType;
                            aplicacion.description = objeto.description;
                            aplicacion.deploymentType = objeto.deploymentType;
                            aplicacion.deploymentTypeOriginal = objeto.deploymentType;

                            aplicacion.parentAPTCode = objeto.parentAPTCode == "0" ? string.Empty : objeto.parentAPTCode;
                            aplicacion.status = objeto.status;
                            aplicacion.hasInterfaceId = objeto.hasInterfaceId;
                            aplicacion.interfaceId = objeto.interfaceId;

                            aplicacion.architectId = objeto.architectId;
                            aplicacion.registrationSituation = (int)ApplicationSituationRegister.RegistroParcial;
                            aplicacion.aplicacionRevertida = false;
                            aplicacion.isReactivated = true;
                            aplicacion.EstadoReactivacion = (int)EstadoReactivacion.AplicaciónProcesoReactivacion;

                            ctx.SaveChanges();

                            var esUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;

                            if (esUserIT)
                            {
                                var usuariosUserIT = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                if (usuariosUserIT != null)
                                {
                                    foreach (var item in usuariosUserIT)
                                    {
                                        if (item.applicationManagerId != 0)
                                        {
                                            var flujoRol = new ApplicationFlow()
                                            {
                                                AppId = ID,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = item.username,
                                                ownerEmail = item.email,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = item.applicationManagerId,
                                                isActive = true,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoRol);
                                            ctx.SaveChanges();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (arquitectoEvaluador != null)
                                {
                                    //Registrando el flujo para el arquitecto para aplicaciones que no son User IT                                    
                                    var flujoArquitecto = new ApplicationFlow()
                                    {
                                        AppId = ID,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        isCompleted = false,
                                        isNotified = false,
                                        ownerId = arquitectoEvaluador.Matricula,
                                        ownerEmail = arquitectoEvaluador.Correo,
                                        typeFlow = (int)Flow.Registro,
                                        typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                        isActive = true,
                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                    };
                                    ctx.ApplicationFlow.Add(flujoArquitecto);
                                    ctx.SaveChanges();
                                }
                            }


                            //Registrando responsables por grupos
                            if (usuarios != null)
                            {
                                if (usuarios.Count() > 0)
                                {
                                    var exoneradosSinUserIT = usuarios.Where(x => x.applicationManagerId != (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                    foreach (var item in exoneradosSinUserIT)
                                    {
                                        if (item.applicationManagerId != 0)
                                        {
                                            var flujoRol = new ApplicationFlow()
                                            {
                                                AppId = ID,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = item.username,
                                                ownerEmail = item.email,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = item.applicationManagerId,
                                                isActive = true,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoRol);
                                            ctx.SaveChanges();
                                        }
                                    }
                                }
                            }
                            ctx.SaveChanges();

                            ID = aplicacion.AppId;
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        //Enviar Correos
                        try
                        {
                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", objeto.applicationId);
                            diccionario.Add("[NombreAplicacion]", objeto.applicationName);
                            diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)objeto.status.Value));
                            diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2(ApplicationSituationRegister.RegistroParcial));
                            diccionario.Add("[FechaRegistro]", DateTime.Now.ToString("dd/MM/yyyy"));

                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.Reactivacion, objeto.applicationId, diccionario);
                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.CustodiosReactivacion, objeto.applicationId, diccionario);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }


                        //Bitacora
                        try
                        {

                            //Agregar registro en bitácora
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " revirtió la aplicación " + "" + objeto.applicationId + "" + " - " + "" + objeto.applicationName + "" + " el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = objeto.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.registerByName
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();

                        }
                        catch (Exception ex)
                        {
                            log.Error("Error ", ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int AddOrEditTipo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int AddOrEditTipo(TipoDTO objeto)"
                    , new object[] { null });
            }


        }

        public override void AddOrEditPortafolioManager(ApplicationManagerCatalogDto objeto)
        {
            DbContextTransaction transaction = null;
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        if (objeto.applicationManagerCatalogId == 0)
                        {
                            var entidad = new ApplicationManagerCatalog()
                            {
                                applicationId = objeto.applicationId,
                                applicationManagerCatalogId = 0,
                                applicationManagerId = objeto.applicationManagerId,
                                createdBy = objeto.createdBy,
                                dateCreation = FECHA_ACTUAL,
                                email = objeto.email,
                                isActive = true,
                                managerName = objeto.managerName,
                                modifiedBy = objeto.modifiedBy,
                                username = objeto.username
                            };
                            ctx.ApplicationManagerCatalog.Add(entidad);
                            ctx.SaveChanges();
                        }
                        else
                        {
                            var entidad = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationManagerCatalogId == objeto.applicationManagerCatalogId);

                            if (entidad != null)
                            {
                                entidad.applicationId = objeto.applicationId;
                                entidad.applicationManagerId = objeto.applicationManagerId;
                                entidad.dateModification = FECHA_ACTUAL;
                                entidad.email = objeto.email;
                                entidad.managerName = objeto.managerName;
                                entidad.modifiedBy = objeto.modifiedBy;
                                entidad.username = objeto.username;

                                ctx.SaveChanges();
                            }
                        }

                        transaction.Commit();
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int AddOrEditPortafolioManager(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int AddOrEditPortafolioManager(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override void ChangeStatusApplication(int id, int status, string user, string comments, string previousState)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.AppId == id
                                    select u
                                    ).FirstOrDefault();

                    DateTime today = DateTime.Today;
                    var solicitud = new Solicitud();
                    solicitud.TipoSolicitud = (int)TipoSolicitud.NoVigente;
                    solicitud.UsuarioCreacion = user;
                    solicitud.FechaCreacion = today;
                    solicitud.AplicacionId = id;
                    solicitud.EstadoSolicitud = 1;
                    solicitud.Observaciones = comments;
                    solicitud.FlagAprobacion = true;
                    int idEstado = 0;
                    if (previousState == "En Desarrollo") { idEstado = 1; }
                    else if (previousState == "Vigente") { idEstado = 2; }
                    else if (previousState == "Eliminada") { idEstado = 4; }
                    solicitud.EstadoAnterior = Convert.ToString(idEstado);
                    ctx.Solicitud.Add(solicitud);

                    if (registro != null)
                    {
                        registro.status = status;
                        ctx.SaveChanges();
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override void ChangeStatusApplicationEliminada(int id, string user)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {


                    var registro = (from u in ctx.Solicitud
                                    where u.AplicacionId == id && u.TipoSolicitud == (int)TipoSolicitud.Eliminacion
                                    select u
                              ).FirstOrDefault();

                    var registro2 = (from u in ctx.Application
                                     where u.AppId == id
                                     select u
                          ).FirstOrDefault();

                    registro2.status = Convert.ToInt32(registro.EstadoAnterior);


                    ctx.SaveChanges();

                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override void ReverseStatusApplication(int id, int status, string user, string comments)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {


                    DateTime today = DateTime.Today;
                    var solicitud = new Solicitud();
                    solicitud.TipoSolicitud = (int)TipoSolicitud.RegresoNoVigente;
                    solicitud.UsuarioCreacion = user;
                    solicitud.FechaCreacion = today;
                    solicitud.AplicacionId = id;
                    solicitud.EstadoSolicitud = 2;
                    solicitud.Observaciones = comments;
                    solicitud.FlagAprobacion = false;

                    var registro = (from u in ctx.Solicitud
                                    where u.AplicacionId == id
                                    select u
                              ).FirstOrDefault();


                    solicitud.EstadoAnterior = registro.EstadoAnterior;
                    ctx.Solicitud.Add(solicitud);


                    ctx.SaveChanges();

                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override int RemoveApplication(int id, int status, string user, string comments, string matricula, string estadoAnterior, string NombreUsuarioModificacion, string email,
                                              bool flagRequiereConformidad, string ticketEliminacion, string expertoNombre, string expertoMatricula, string expertoCorreo, int tipoEliminacion)
        {
            int idSol = 0;
            string CodigoApp = "";
            string NombreApp = "";

            var estadosSolicitud = new List<int>() {
                (int)EstadoSolicitud.Observada,
                (int)EstadoSolicitud.Pendiente,
                (int)EstadoSolicitud.PendienteCustodio
            };
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    DateTime today = DateTime.Now;

                    //Validar si al menos hay una solicitud de eliminación pendiente de atención
                    var solicitudesAnterioresVigentes = ctx.Solicitud.Where(x => x.AplicacionId == id && estadosSolicitud.Contains(x.EstadoSolicitud) && x.TipoSolicitud == (int)TipoSolicitud.Eliminacion).Count();

                    var appli = ctx.Application.Where(x => x.AppId == id).FirstOrDefault();

                    appli.UsuarioEliminacion = NombreUsuarioModificacion;



                    if (solicitudesAnterioresVigentes == 0)
                    {
                        var solicitud = new Solicitud();
                        solicitud.TipoSolicitud = (int)TipoSolicitud.Eliminacion;
                        solicitud.UsuarioCreacion = user;
                        solicitud.FechaCreacion = today;
                        solicitud.AplicacionId = id;
                        solicitud.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                        solicitud.Observaciones = comments;
                        solicitud.FlagAprobacion = false;
                        solicitud.MatriculaUsuario = matricula;
                        solicitud.NombreUsuarioCreacion = NombreUsuarioModificacion;
                        solicitud.EmailSolicitante = email;
                        solicitud.NombreSolicitante = NombreUsuarioModificacion;

                        if (tipoEliminacion == (int)TipoEliminacion.PasoProcesoEliminacion)
                        {
                            solicitud.FlagRequiereConformidad = flagRequiereConformidad;
                            solicitud.TicketEliminacion = ticketEliminacion;
                        }

                        solicitud.ExpertoNombre = expertoNombre;
                        solicitud.ExpertoMatricula = expertoMatricula;
                        solicitud.ExpertoCorreo = expertoCorreo;
                        solicitud.TipoEliminacion = tipoEliminacion;

                        int idEstado = 0;
                        if (estadoAnterior == "En Desarrollo") { idEstado = 1; }
                        else if (estadoAnterior == "Vigente") { idEstado = 2; }
                        else if (estadoAnterior == "No Vigente") { idEstado = 2; }
                        else if (estadoAnterior == "Eliminada") { idEstado = 4; }
                        solicitud.EstadoAnterior = Convert.ToString(idEstado);
                        ctx.Solicitud.Add(solicitud);

                        ctx.SaveChanges();

                        idSol = solicitud.SolicitudAplicacionId;
                        var app = ctx.Application.FirstOrDefault(x => x.AppId == id);
                        var unidad = ctx.Unidad.FirstOrDefault(x => x.UnidadId == app.unit);

                        var flujo = new ApplicationFlow();
                        flujo.AppId = id;
                        flujo.typeRegister = (int)ApplicationManagerRole.Owner;
                        flujo.typeFlow = (int)Flow.Eliminacion;
                        flujo.ownerId = unidad == null ? "" : unidad.ResponsableMatricula;
                        flujo.ownerEmail = unidad == null ? "" : unidad.ResponsableCorreo;
                        flujo.dateCreation = today;
                        flujo.createdBy = matricula;
                        flujo.isActive = true;
                        flujo.isCompleted = false;
                        flujo.SolicitudAplicacionId = idSol;
                        flujo.RegistradoPor = NombreUsuarioModificacion;

                        ctx.ApplicationFlow.Add(flujo);

                        ctx.SaveChanges();

                        try
                        {

                            var entidad = ctx.Application.FirstOrDefault(x => x.AppId == id);
                            CodigoApp = entidad.applicationId;
                            NombreApp = entidad.applicationName;

                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + NombreUsuarioModificacion + "" + "(" + matricula + ")" + " " +
                                "generó una solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con el siguiente motivo:";
                            BitacoraMensaje = BitacoraMensaje + " " + comments + ".";
                            BitacoraMensaje = BitacoraMensaje + " Los datos de la solicitud son los siguientes:";
                            if (tipoEliminacion == 1)
                            {
                                BitacoraMensaje = BitacoraMensaje + " Tipo de eliminación: Eliminación administrativa,";
                                BitacoraMensaje = BitacoraMensaje + " Persona que brindo la conformidad: " + expertoNombre;
                            }
                            else if (tipoEliminacion == 2)
                            {
                                BitacoraMensaje = BitacoraMensaje + " Tipo de eliminación: Pasó por proceso de eliminación de aplicación,";
                                BitacoraMensaje = BitacoraMensaje + " Requiere Conformidad GST: " + (flagRequiereConformidad ? "Si" : "No");
                                if (!string.IsNullOrWhiteSpace(expertoNombre))
                                {
                                    BitacoraMensaje = BitacoraMensaje + ", Ratificante: " + expertoNombre;
                                }
                                if (!string.IsNullOrWhiteSpace(ticketEliminacion))
                                {
                                    BitacoraMensaje = BitacoraMensaje + ", Ticket de eliminación: " + ticketEliminacion;
                                }
                            }

                            BitacoraMensaje = BitacoraMensaje + "; el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        //Envio de correo
                        try
                        {
                            List<string> correos = new List<string>();
                            correos.Add(email);

                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", CodigoApp);
                            diccionario.Add("[NombreAplicacion]", NombreApp);
                            diccionario.Add("[MotivoEliminacion]", comments);
                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.EliminacionCreacionSolicitud, CodigoApp, diccionario, correos, false);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return idSol;
                    }
                    else
                        return -1;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }


        public override int RemoveApplicationAdmin(int id, int status, string user, string comments, string matricula, string estadoAnterior, string NombreUsuarioModificacion, string email,
                                             bool flagRequiereConformidad, string ticketEliminacion, string expertoNombre, string expertoMatricula, string expertoCorreo, int tipoEliminacion)
        {
            int idSol = 0;
            string CodigoApp = "";
            string NombreApp = "";

            var estadosSolicitud = new List<int>() {
                (int)EstadoSolicitud.Observada,
                (int)EstadoSolicitud.Pendiente,
                (int)EstadoSolicitud.PendienteCustodio
            };
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    DateTime today = DateTime.Now;

                    //Validar si al menos hay una solicitud de eliminación pendiente de atención
                    var solicitudesAnterioresVigentes = ctx.Solicitud.Where(x => x.AplicacionId == id && estadosSolicitud.Contains(x.EstadoSolicitud) && x.TipoSolicitud == (int)TipoSolicitud.Eliminacion).Count();

                    var appli = ctx.Application.Where(x => x.AppId == id).FirstOrDefault();

                    appli.UsuarioEliminacion = NombreUsuarioModificacion;
                    appli.status = 4;



                    if (solicitudesAnterioresVigentes == 0)
                    {
                        var solicitud = new Solicitud();
                        solicitud.TipoSolicitud = (int)TipoSolicitud.Eliminacion;
                        solicitud.UsuarioCreacion = user;
                        solicitud.FechaCreacion = today;
                        solicitud.AplicacionId = id;
                        solicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                        solicitud.Observaciones = comments;
                        solicitud.FlagAprobacion = true;
                        solicitud.MatriculaUsuario = matricula;
                        solicitud.NombreUsuarioCreacion = NombreUsuarioModificacion;
                        solicitud.EmailSolicitante = email;
                        solicitud.NombreSolicitante = NombreUsuarioModificacion;
                        solicitud.NombreUsuarioAprobacion = NombreUsuarioModificacion;
                        solicitud.FechaAprobacion = today;

                        if (tipoEliminacion == (int)TipoEliminacion.PasoProcesoEliminacion)
                        {
                            solicitud.FlagRequiereConformidad = flagRequiereConformidad;
                            solicitud.TicketEliminacion = ticketEliminacion;
                        }

                        solicitud.ExpertoNombre = expertoNombre;
                        solicitud.ExpertoMatricula = expertoMatricula;
                        solicitud.ExpertoCorreo = expertoCorreo;
                        solicitud.TipoEliminacion = tipoEliminacion;

                        int idEstado = 0;
                        if (estadoAnterior == "En Desarrollo") { idEstado = 1; }
                        else if (estadoAnterior == "Vigente") { idEstado = 2; }
                        else if (estadoAnterior == "No Vigente") { idEstado = 2; }
                        else if (estadoAnterior == "Eliminada") { idEstado = 4; }
                        solicitud.EstadoAnterior = Convert.ToString(idEstado);
                        ctx.Solicitud.Add(solicitud);

                        ctx.SaveChanges();

                        idSol = solicitud.SolicitudAplicacionId;
                        var app = ctx.Application.FirstOrDefault(x => x.AppId == id);
                        var unidad = ctx.Unidad.FirstOrDefault(x => x.UnidadId == app.unit);

                        var flujo = new ApplicationFlow();
                        flujo.AppId = id;
                        flujo.typeRegister = (int)ApplicationManagerRole.Owner;
                        flujo.typeFlow = (int)Flow.Eliminacion;
                        flujo.ownerId = unidad == null ? "" : unidad.ResponsableMatricula;
                        flujo.ownerEmail = unidad == null ? "" : unidad.ResponsableCorreo;
                        flujo.dateCreation = today;
                        flujo.createdBy = matricula;
                        flujo.isActive = true;
                        flujo.isCompleted = true;
                        flujo.SolicitudAplicacionId = idSol;
                        flujo.RegistradoPor = NombreUsuarioModificacion;
                        flujo.isApproved = true;
                        flujo.dateApproved = today;
                        flujo.approvedByName = NombreUsuarioModificacion;
                        flujo.approvedBy = matricula;

                        ctx.ApplicationFlow.Add(flujo);

                        ctx.SaveChanges();

                        try
                        {

                            var entidad = ctx.Application.FirstOrDefault(x => x.AppId == id);
                            CodigoApp = entidad.applicationId;
                            NombreApp = entidad.applicationName;

                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + NombreUsuarioModificacion + "" + "(" + matricula + ")" + " " +
                                "cambio el estado ha eliminado de la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con el siguiente motivo:";
                            BitacoraMensaje = BitacoraMensaje + " " + comments + ".";
                            BitacoraMensaje = BitacoraMensaje + " Los datos de la solicitud son los siguientes:";
                            if (tipoEliminacion == 1)
                            {
                                BitacoraMensaje = BitacoraMensaje + " Tipo de eliminación: Eliminación administrativa,";
                                BitacoraMensaje = BitacoraMensaje + " Persona que brindo la conformidad: " + expertoNombre;
                            }
                            else if (tipoEliminacion == 2)
                            {
                                BitacoraMensaje = BitacoraMensaje + " Tipo de eliminación: Pasó por proceso de eliminación de aplicación,";
                                BitacoraMensaje = BitacoraMensaje + " Requiere Conformidad GST: " + (flagRequiereConformidad ? "Si" : "No");
                                if (!string.IsNullOrWhiteSpace(expertoNombre))
                                {
                                    BitacoraMensaje = BitacoraMensaje + ", Ratificante: " + expertoNombre;
                                }
                                if (!string.IsNullOrWhiteSpace(ticketEliminacion))
                                {
                                    BitacoraMensaje = BitacoraMensaje + ", Ticket de eliminación: " + ticketEliminacion;
                                }
                            }

                            BitacoraMensaje = BitacoraMensaje + "; el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        //Envio de correo
                        try
                        {
                            List<string> correos = new List<string>();
                            correos.Add(email);

                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", CodigoApp);
                            diccionario.Add("[NombreAplicacion]", NombreApp);
                            diccionario.Add("[MotivoEliminacion]", comments);
                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.EliminacionAprobacionSolicitud, CodigoApp, diccionario, correos, false);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return idSol;
                    }
                    else
                        return -1;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }


        public override int UpdateSolicitud(int id, int status, string user, string comments, string matricula, string estadoAnterior, string NombreUsuarioModificacion, string email,
                                            bool flagRequiereConformidad, string ticketEliminacion, string expertoNombre, string expertoMatricula, string expertoCorreo, int tipoEliminacion)
        {
            int idSol = 0;
            string CodigoApp = "";
            string NombreApp = "";
            int appId = 0;
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {

                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == id);

                    DateTime today = DateTime.Now;

                    //solicitud.TipoSolicitud = (int)TipoSolicitud.Eliminacion;
                    //solicitud.UsuarioCreacion = user;
                    //solicitud.FechaCreacion = today;
                    appId = solicitud.AplicacionId;
                    //solicitud.AplicacionId = id;
                    solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                    solicitud.Observaciones = comments;
                    //solicitud.FlagAprobacion = false;
                    //solicitud.MatriculaUsuario = matricula;
                    //solicitud.NombreUsuarioCreacion = NombreUsuarioModificacion;
                    //solicitud.EmailSolicitante = email;

                    if (tipoEliminacion == 2)
                    {
                        solicitud.FlagRequiereConformidad = flagRequiereConformidad;
                        solicitud.TicketEliminacion = ticketEliminacion;
                    }

                    solicitud.ExpertoNombre = expertoNombre;
                    solicitud.ExpertoMatricula = expertoMatricula;
                    solicitud.ExpertoCorreo = expertoCorreo;
                    solicitud.TipoEliminacion = tipoEliminacion;

                    //int idEstado = 0;
                    //if (estadoAnterior == "En Desarrollo") { idEstado = 1; }
                    //else if (estadoAnterior == "Vigente") { idEstado = 2; }
                    //else if (estadoAnterior == "No Vigente") { idEstado = 2; }
                    //else if (estadoAnterior == "Eliminada") { idEstado = 4; }
                    //solicitud.EstadoAnterior = Convert.ToString(idEstado);
                    //ctx.Solicitud.Add(solicitud);
                    //var solicitudArhivos = ctx.SolicitudArchivos.FirstOrDefault(x => x.IdSolicitud == id);

                    //if (solicitudArhivos != null)
                    //{
                    //    ctx.SolicitudArchivos.Remove(solicitudArhivos);
                    //}

                    ctx.SaveChanges();

                    idSol = solicitud.SolicitudAplicacionId;



                }

                //Generacion de bitacora
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    try
                    {

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "" + NombreUsuarioModificacion + "" + "(" + matricula + ")" + " " +
                            "modificó la solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + "  con el siguiente motivo:";
                        BitacoraMensaje = BitacoraMensaje + " " + comments + ".";

                        BitacoraMensaje = BitacoraMensaje + " Los datos de la solicitud son los siguientes:";
                        if (tipoEliminacion == 1)
                        {
                            BitacoraMensaje = BitacoraMensaje + " Tipo de eliminación: Eliminación administrativa,";
                            BitacoraMensaje = BitacoraMensaje + " Persona que brindo la conformidad: " + expertoNombre;
                        }
                        else if (tipoEliminacion == 2)
                        {
                            BitacoraMensaje = BitacoraMensaje + " Tipo de eliminación: Pasó por proceso de eliminación de aplicación,";
                            BitacoraMensaje = BitacoraMensaje + " Requiere Conformidad GST: " + (flagRequiereConformidad ? "Si" : "No");
                            if (!string.IsNullOrWhiteSpace(expertoNombre))
                            {
                                BitacoraMensaje = BitacoraMensaje + ", Ratificante: " + expertoNombre;
                            }
                            if (!string.IsNullOrWhiteSpace(ticketEliminacion))
                            {
                                BitacoraMensaje = BitacoraMensaje + ", Ticket de eliminación: " + ticketEliminacion;
                            }
                        }

                        BitacoraMensaje = BitacoraMensaje + " , el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = NombreUsuarioModificacion
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }
                }

                //Envio de correo
                try
                {
                    List<string> correos = new List<string>();
                    correos.Add(email);

                    var mailManager = new MailingManager();
                    var diccionario = new Dictionary<string, string>();
                    diccionario.Add("[CodigoAPT]", CodigoApp);
                    diccionario.Add("[NombreAplicacion]", NombreApp);

                    mailManager.ProcesarEnvioNotificacionesAdministradores((int)NotificationFlow.ReenvíoSolicitudEliminacion, CodigoApp, diccionario, true, true);
                }
                catch (Exception ex)
                {
                    log.Error(ex.Message, ex);
                }
                return idSol;


            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override int ApproveRemoveApplication(int idSol, int idFlow, string matricula, string NombreUsuarioModificacion, string Email)
        {
            int idSol2 = 0;
            string CodigoApp = "";
            string NombreApp = "";
            int appId = 0;
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {

                    DateTime today = DateTime.Now;
                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == idSol);
                    appId = solicitud.AplicacionId;

                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == idFlow);


                    solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                    solicitud.FlagAprobacion = true;
                    solicitud.FechaModificacion = today;
                    solicitud.NombreUsuarioModificacion = NombreUsuarioModificacion;

                    flujo.isApproved = true;
                    flujo.approvedBy = matricula;
                    flujo.dateApproved = today;
                    flujo.isCompleted = true;
                    flujo.approvedByName = NombreUsuarioModificacion;

                    ctx.SaveChanges();

                    idSol2 = solicitud.SolicitudAplicacionId;
                }

                //Generacion de bitacora
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    try
                    {

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El Owner/Líder Usuario " + NombreUsuarioModificacion + "" + "(" + matricula + ")" + " " +
                            "aprobó una solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " ";


                        BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = NombreUsuarioModificacion
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }
                }

                //Envio de correo
                try
                {
                    List<string> correos = new List<string>();
                    correos.Add(Email);

                    var mailManager = new MailingManager();
                    var diccionario = new Dictionary<string, string>();
                    diccionario.Add("[CodigoAPT]", CodigoApp);
                    diccionario.Add("[NombreAplicacion]", NombreApp);
                    diccionario.Add("[Custodio]", NombreUsuarioModificacion);
                    mailManager.ProcesarEnvioNotificacionesAdministradores((int)NotificationFlow.AprobacionSsolicitudEliminaciónCustodios, CodigoApp, diccionario, true, true);
                }
                catch (Exception ex)
                {
                    log.Error(ex.Message, ex);
                }
                return idSol;


            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override int RefuseRemoveApplication(int idSol, int idFlow, string matricula, string NombreUsuarioModificacion, string Email, string Comments)
        {
            int idSol2 = 0;
            string CodigoApp = "";
            string NombreApp = "";
            int appId = 0;
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {

                    DateTime today = DateTime.Now;
                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == idSol);
                    appId = solicitud.AplicacionId;

                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == idFlow);


                    solicitud.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                    solicitud.NombreRechazo = "Owner/Líder usuario";
                    solicitud.FechaRechazo = today;
                    solicitud.NombreUsuarioModificacion = NombreUsuarioModificacion;
                    solicitud.FechaModificacion = today;

                    flujo.isApproved = false;
                    flujo.rejectedBy = matricula;
                    flujo.dateRejected = today;
                    flujo.isCompleted = true;
                    flujo.comments = Comments;
                    flujo.rejectedByName = NombreUsuarioModificacion;


                    ctx.SaveChanges();

                    idSol2 = solicitud.SolicitudAplicacionId;
                }

                //Generacion de bitacora
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    try
                    {

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El Owner / Líder Usuario " + NombreUsuarioModificacion + "" + "(" + matricula + ")" + " " +
                            "rechazó una solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " por el siguiente motivo:  ";

                        BitacoraMensaje = BitacoraMensaje + Comments + " ";

                        BitacoraMensaje = BitacoraMensaje + " , el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = NombreUsuarioModificacion
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }
                }

                //Envio de correo
                try
                {
                    List<string> correos = new List<string>();
                    correos.Add(Email);

                    var mailManager = new MailingManager();
                    var diccionario = new Dictionary<string, string>();
                    diccionario.Add("[CodigoAPT]", CodigoApp);
                    diccionario.Add("[NombreAplicacion]", NombreApp);
                    diccionario.Add("[Custodio]", NombreUsuarioModificacion);
                    diccionario.Add("[Motivo]", Comments);
                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.RechazoSolicitudEliminaciónCustodios, CodigoApp, diccionario, correos);
                }
                catch (Exception ex)
                {
                    log.Error(ex.Message, ex);
                }
                return idSol;


            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override int ObservarRemoveApplication(int idSol, int idFlow, string matricula, string NombreUsuarioModificacion, string Email, string Comments)
        {
            int idSol2 = 0;
            string CodigoApp = "";
            string NombreApp = "";
            int appId = 0;
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {

                    DateTime today = DateTime.Now;
                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == idSol);
                    appId = solicitud.AplicacionId;

                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == idFlow);


                    solicitud.EstadoSolicitud = (int)EstadoSolicitud.Observada;
                    solicitud.NombreRechazo = "Owner/Líder usuario";
                    solicitud.FechaRechazo = today;
                    solicitud.NombreUsuarioModificacion = NombreUsuarioModificacion;
                    solicitud.FechaModificacion = today;

                    flujo.isApproved = false;
                    flujo.observedBy = matricula;
                    flujo.dateObserved = today;
                    flujo.isCompleted = true;
                    flujo.comments = Comments;

                    flujo.isObserved = true;
                    flujo.observedByName = NombreUsuarioModificacion;


                    ctx.SaveChanges();

                    idSol2 = solicitud.SolicitudAplicacionId;
                }

                //Generacion de bitacora
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    try
                    {

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El Owner / Líder Usuario " + NombreUsuarioModificacion + "" + "(" + matricula + ")" + " " +
                            "observó una solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " por el siguiente motivo:  ";

                        BitacoraMensaje = BitacoraMensaje + Comments + " ";

                        BitacoraMensaje = BitacoraMensaje + " , el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = NombreUsuarioModificacion
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }
                }

                //Envio de correo
                try
                {
                    List<string> correos = new List<string>();
                    correos.Add(Email);

                    var mailManager = new MailingManager();
                    var diccionario = new Dictionary<string, string>();
                    diccionario.Add("[CodigoAPT]", CodigoApp);
                    diccionario.Add("[NombreAplicacion]", NombreApp);
                    diccionario.Add("[Custodio]", NombreUsuarioModificacion);
                    diccionario.Add("[Motivo]", Comments);
                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionSolicitudEliminaciónCustodios, CodigoApp, diccionario, correos);
                }
                catch (Exception ex)
                {
                    log.Error(ex.Message, ex);
                }
                return idSol;


            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override void SubirArchivosRemove(SolicitudArchivosDTO obj)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var objArchivosSolicitud = ctx.SolicitudArchivos.FirstOrDefault(x => x.IdSolicitud == obj.IdSolicitud);
                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == obj.IdSolicitud);

                    if (objArchivosSolicitud != null)
                    {
                        if (solicitud.TipoEliminacion == 1 && solicitud.TipoSolicitud == (int)TipoSolicitud.Eliminacion)
                        {
                            if (!string.IsNullOrWhiteSpace(obj.NombreConformidadGST))
                            {
                                objArchivosSolicitud.ConformidadGST = obj.ConformidadGST;
                                objArchivosSolicitud.NombreConformidadGST = obj.NombreConformidadGST;
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrWhiteSpace(obj.NombreConformidadGST))
                            {
                                objArchivosSolicitud.ConformidadGST = obj.ConformidadGST;
                                objArchivosSolicitud.NombreConformidadGST = obj.NombreConformidadGST;
                            }

                            if (!string.IsNullOrWhiteSpace(obj.NombreRatificacion))
                            {
                                objArchivosSolicitud.Ratificacion = obj.Ratificacion;
                                objArchivosSolicitud.NombreRatificacion = obj.NombreRatificacion;
                            }

                            if (!string.IsNullOrWhiteSpace(obj.NombreTicketEliminacion))
                            {
                                objArchivosSolicitud.TicketEliminacion = obj.TicketEliminacion;
                                objArchivosSolicitud.NombreTicketEliminacion = obj.NombreTicketEliminacion;
                            }
                            //objArchivosSolicitud.ConformidadGST = obj.ConformidadGST;
                            //objArchivosSolicitud.TicketEliminacion = obj.TicketEliminacion;
                            //objArchivosSolicitud.Ratificacion = obj.Ratificacion;
                            //objArchivosSolicitud.NombreConformidadGST = obj.NombreConformidadGST;
                            //objArchivosSolicitud.NombreRatificacion = obj.NombreRatificacion;
                            //objArchivosSolicitud.NombreTicketEliminacion = obj.NombreTicketEliminacion;
                        }
                    }
                    else
                    {
                        var archivosSolicitud = new SolicitudArchivos();
                        archivosSolicitud.IdSolicitud = obj.IdSolicitud;
                        archivosSolicitud.ConformidadGST = obj.ConformidadGST;
                        archivosSolicitud.TicketEliminacion = obj.TicketEliminacion;
                        archivosSolicitud.Ratificacion = obj.Ratificacion;
                        archivosSolicitud.NombreConformidadGST = obj.NombreConformidadGST;
                        archivosSolicitud.NombreRatificacion = obj.NombreRatificacion;
                        archivosSolicitud.NombreTicketEliminacion = obj.NombreTicketEliminacion;

                        ctx.SolicitudArchivos.Add(archivosSolicitud);
                    }

                    ctx.SaveChanges();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override void ActualizarSolicitudArchivos(SolicitudArchivosDTO obj, int accion)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {

                    var objArchivosSolicitud = ctx.SolicitudArchivos.First(x => x.IdSolicitud == obj.IdSolicitud);

                    if (accion == 1)
                    {
                        objArchivosSolicitud.TicketEliminacion = obj.TicketEliminacion;
                        objArchivosSolicitud.NombreTicketEliminacion = obj.NombreTicketEliminacion;
                    }
                    else if (accion == 2)
                    {
                        objArchivosSolicitud.Ratificacion = obj.Ratificacion;
                        objArchivosSolicitud.NombreRatificacion = obj.NombreRatificacion;
                    }

                    ctx.SaveChanges();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: ActualizarSolicitudArchivos(SolicitudArchivosDTO obj)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: ActualizarSolicitudArchivos(SolicitudArchivosDTO obj)"
                    , new object[] { null });
            }
        }


        public override DataResultAplicacion EditApplicationStepTwo(ApplicationDto objeto, List<ApplicationManagerCatalogDto> usuarios)
        {
            DbContextTransaction transaction = null;
            var correoDevSecOps = false;
            var correoOwner = false;
            var correoJefeEquipo = false;
            var correoTTL = false;
            var correoCustodios = false;
            var modificacionCamposPortafolio = false;
            var codigoAPT = string.Empty;

            bool flagUserIt = false;

            bool nuevosPCI = false;

            bool modificacionExperto = false;
            var bitacoraExperto = string.Empty;
            bool modificacionAutorizador = false;
            bool modificacionExperto2 = false;

            List<string> listaExpertosAntiguos = new List<string>();
            List<string> listaAutorizadoresAntiguos = new List<string>();

            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);

                        ApplicationDtoTemporal entidadInicial = new ApplicationDtoTemporal();
                        int mainOfficeId = this.GetMainOfficeId(objeto.architectId);

                        entidadInicial.managed = entidad.managed;
                        entidadInicial.applicationName = entidad.applicationName;
                        entidadInicial.implementationType = entidad.implementationType;
                        entidadInicial.description = entidad.description;
                        entidadInicial.deploymentType = entidad.deploymentType;
                        entidadInicial.parentAPTCode = entidad.parentAPTCode;
                        entidadInicial.mainOffice = mainOfficeId;

                        entidadInicial.hasInterfaceId = entidad.hasInterfaceId;
                        entidadInicial.interfaceId = entidad.interfaceId;
                        entidadInicial.unit = entidad.unit;
                        entidadInicial.teamName = entidad.teamName;
                        entidadInicial.teamId = entidad.teamId;

                        entidadInicial.userEntity = entidad.userEntity;
                        entidadInicial.developmentType = entidad.developmentType;
                        entidadInicial.developmentProvider = entidad.developmentProvider;
                        entidadInicial.infrastructure = entidad.infrastructure;
                        entidadInicial.replacementApplication = entidad.replacementApplication;
                        entidadInicial.authenticationMethod = entidad.authenticationMethod;
                        entidadInicial.authorizationMethod = entidad.authorizationMethod;
                        entidadInicial.architectId = entidad.architectId;

                        entidadInicial.groupTicketRemedy = entidad.groupTicketRemedy;
                        entidadInicial.webDomain = entidad.webDomain;

                        entidadInicial.summaryStandard = entidad.summaryStandard;
                        entidadInicial.complianceLevel = entidad.complianceLevel;

                        //entidadInicial.isFormalApplication = entidad.isFormalApplication;
                        //entidadInicial.regularizationDate = entidad.regularizationDate;
                        entidadInicial.status = entidad.status;

                        var gestionadoPor = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(objeto.managed.Value);
                        var sql = string.Empty;


                        if (entidad == null) dataResult.EstadoTransaccion = false;
                        if (gestionadoPor == null) dataResult.EstadoTransaccion = false;

                        if (dataResult.EstadoTransaccion)
                        {
                            codigoAPT = entidad.applicationId;

                            entidad.managed = objeto.managed;
                            entidad.applicationName = objeto.applicationName;
                            entidad.implementationType = objeto.implementationType;
                            entidad.description = objeto.description;

                            correoDevSecOps = !(entidad.deploymentType == objeto.deploymentType);
                            entidad.deploymentType = objeto.deploymentType;

                            entidad.parentAPTCode = objeto.parentAPTCode;
                            entidad.mainOffice = mainOfficeId;
                            //Arquitecto                                
                            //tiene interfaz,
                            entidad.hasInterfaceId = objeto.hasInterfaceId;
                            entidad.interfaceId = objeto.interfaceId;
                            entidad.unit = objeto.unit;
                            entidad.teamName = objeto.teamName;
                            entidad.teamId = objeto.teamId;

                            entidad.userEntity = objeto.userEntity;
                            entidad.developmentType = objeto.developmentType;
                            entidad.developmentProvider = objeto.developmentProvider;
                            entidad.infrastructure = objeto.infrastructure;
                            entidad.replacementApplication = objeto.replacementApplication;
                            entidad.authenticationMethod = objeto.authenticationMethod;
                            entidad.authorizationMethod = objeto.authorizationMethod;
                            entidad.architectId = objeto.architectId;

                            entidad.groupTicketRemedy = objeto.groupTicketRemedy;
                            entidad.webDomain = objeto.webDomain;

                            entidad.summaryStandard = objeto.summaryStandard;
                            entidad.complianceLevel = objeto.complianceLevel;

                            //entidad.isFormalApplication = objeto.isFormalApplication;
                            //entidad.regularizationDate = objeto.regularizationDate;
                            entidad.status = objeto.status;

                            //PCI
                            var PCIActuales = ctx.ApplicationPCI.Where(x => x.ApplicationId == entidad.AppId && x.FlagActivo == true && x.FlagEliminado == false).ToList();

                            var IdPCIS = ctx.ApplicationPCI.Where(x => x.ApplicationId == entidad.AppId && x.FlagActivo == true && x.FlagEliminado == false).Select(x => x.TipoPCIId).ToList();




                            var set = new HashSet<int?>(IdPCIS);
                            nuevosPCI = !(set.SetEquals(objeto.TipoPCI));




                            if (objeto.TipoPCI != null) {

                                //Desactiva los PCI actuales

                                foreach (ApplicationPCI a in PCIActuales) {
                                    a.FlagActivo = false;
                                    a.FlagEliminado = true;
                                }

                                //Crea los nuevos PCI asociados
                                foreach (int PCI in objeto.TipoPCI) {
                                    ApplicationPCI registro = new ApplicationPCI();
                                    registro.ApplicationId = entidad.AppId;
                                    registro.TipoPCIId = PCI;
                                    registro.FlagActivo = true;
                                    registro.FlagEliminado = false;
                                    ctx.ApplicationPCI.Add(registro);
                                }
                            }




                            //Agregar mas de un experto

                            var listaManagers = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.Experto)).ToList();

                            listaExpertosAntiguos = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.Experto)).Select(x => x.managerName).ToList();
                          

                            foreach (ApplicationManagerCatalog item in listaManagers)
                            {

                                ctx.ApplicationManagerCatalog.Remove(item);
                            }


                            //Agrega nuevos expertos 
                            foreach (ApplicationManagerCatalogDto item in objeto.NuevosRolesList)
                            {
                                var nuevoApplicationManager = new ApplicationManagerCatalog()
                                {
                                    applicationId = entidad.applicationId,
                                    applicationManagerCatalogId = 0,
                                    applicationManagerId = item.applicationManagerId,
                                    createdBy = objeto.registerBy,
                                    dateCreation = DateTime.Now,
                                    email = item.email,
                                    isActive = true,
                                    managerName = item.managerName,
                                    username = item.username
                                };
                                ctx.ApplicationManagerCatalog.Add(nuevoApplicationManager);
                            }



                            var expertosActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto && x.isActive).Select(x => x.username).ToList();


                          
                            var expertosLista = objeto.NuevosRolesList.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.Experto).ToList();



                            if (expertosActuales.Count() != expertosLista.Count())
                            {
                                modificacionExperto2 = true;
                                modificacionExperto = true;
                            }
      
                            foreach (ApplicationManagerCatalogDto owner in objeto.NuevosExpertosList)
                            {
                                if (!expertosActuales.Any(x => x == owner.username))
                                {
                                    modificacionExperto = true;
                                    modificacionExperto2 = true;
                                }
                                //filas = filas + string.Format(formato, owner.applicationManagerId == (int)ApplicationManagerRole.Experto ? "Experto/Líder técnico" : "Usuario Autorizador", string.Empty, owner.managerName);
                            }
                      




                            //Validar unidad
                            if (objeto.unit.HasValue)
                            {
                                if (objeto.unit.Value > 0)
                                {
                                    var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(objeto.unit.Value);
                                    if (unidad != null)
                                    {
                                        //Registrando rol
                                        var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Owner && x.isActive);
                                        if (rol != null)
                                        {
                                            if (rol.username != unidad.ResponsableMatricula)
                                            {
                                                rol.isActive = false;
                                                rol.dateModification = DateTime.Now;
                                                rol.modifiedBy = objeto.registerBy;

                                                var nuevoRol = new ApplicationManagerCatalog()
                                                {
                                                    applicationId = entidad.applicationId,
                                                    applicationManagerCatalogId = 0,
                                                    applicationManagerId = (int)ApplicationManagerRole.Owner,
                                                    createdBy = objeto.registerBy,
                                                    dateCreation = DateTime.Now,
                                                    email = unidad.ResponsableCorreo,
                                                    isActive = true,
                                                    managerName = unidad.Responsable,
                                                    username = unidad.ResponsableMatricula
                                                };
                                                ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                            }
                                        }
                                        else
                                        {
                                            var nuevoRol = new ApplicationManagerCatalog()
                                            {
                                                applicationId = entidad.applicationId,
                                                applicationManagerCatalogId = 0,
                                                applicationManagerId = (int)ApplicationManagerRole.Owner,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                email = unidad.ResponsableCorreo,
                                                isActive = true,
                                                managerName = unidad.Responsable,
                                                username = unidad.ResponsableMatricula
                                            };
                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                        }

                                        //Registrando flujo
                                        var flujoActualSinAprobar = ctx.ApplicationFlow
                                            .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.Owner && x.AppId == entidad.AppId && x.ownerId == unidad.ResponsableMatricula);
                                        if (flujoActualSinAprobar == null)
                                        {
                                            sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0", entidad.AppId, (int)ApplicationManagerRole.Owner);
                                            ctx.Database.ExecuteSqlCommand(sql);

                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.Owner);
                                            ctx.Database.ExecuteSqlCommand(sql);


                                            var nuevoFlujo = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerEmail = unidad.ResponsableCorreo,
                                                ownerId = unidad.ResponsableMatricula,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = (int)ApplicationManagerRole.Owner,
                                                isActive = true,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(nuevoFlujo);


                                            //Enviando correo al Owner
                                            correoOwner = true;
                                        }
                                        else
                                        {
                                            //Validar si el flujo esta rechazado y es para el mismo Owner                                            
                                            if (flujoActualSinAprobar.isApproved.HasValue)
                                            {
                                                var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                if (activo && !aprobado)
                                                {
                                                    flujoActualSinAprobar.isActive = false;



                                                    var nuevoFlujo = new ApplicationFlow()
                                                    {
                                                        AppId = entidad.AppId,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        FlowAppId = 0,
                                                        isCompleted = false,
                                                        isNotified = false,
                                                        ownerEmail = unidad.ResponsableCorreo,
                                                        ownerId = unidad.ResponsableMatricula,
                                                        typeFlow = (int)Flow.Registro,
                                                        typeRegister = (int)ApplicationManagerRole.Owner,
                                                        isActive = true,
                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                    };
                                                    ctx.ApplicationFlow.Add(nuevoFlujo);

                                                    //Enviando correo al Owner
                                                    correoOwner = true;
                                                }
                                                else if (!activo)
                                                {
                                                    flujoActualSinAprobar.isActive = false;
                                                    flujoActualSinAprobar.isApproved = null;



                                                    var nuevoFlujo = new ApplicationFlow()
                                                    {
                                                        AppId = entidad.AppId,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        FlowAppId = 0,
                                                        isCompleted = false,
                                                        isNotified = false,
                                                        ownerEmail = unidad.ResponsableCorreo,
                                                        ownerId = unidad.ResponsableMatricula,
                                                        typeFlow = (int)Flow.Registro,
                                                        typeRegister = (int)ApplicationManagerRole.Owner,
                                                        isActive = true,
                                                        isApproved = null,
                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                    };
                                                    ctx.ApplicationFlow.Add(nuevoFlujo);

                                                    //Enviando correo al Owner
                                                    correoOwner = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            //Validar experto
                            if (!string.IsNullOrEmpty(objeto.expertEmail)
                                && !string.IsNullOrEmpty(objeto.expertId)
                                && !string.IsNullOrEmpty(objeto.expertName))
                            {
                                //Registrando rol
                                var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto && x.isActive);
                                if (rol != null)
                                {
                                    if (rol.username != objeto.expertId)
                                    {
                                        rol.isActive = false;
                                        rol.dateModification = DateTime.Now;
                                        rol.modifiedBy = objeto.registerBy;

                                        var nuevoRol = new ApplicationManagerCatalog()
                                        {
                                            applicationId = entidad.applicationId,
                                            applicationManagerCatalogId = 0,
                                            applicationManagerId = (int)ApplicationManagerRole.Experto,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            email = objeto.expertEmail,
                                            isActive = true,
                                            managerName = objeto.expertName,
                                            username = objeto.expertId
                                        };
                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                    }
                                }
                                else
                                {
                                    var nuevoRol = new ApplicationManagerCatalog()
                                    {
                                        applicationId = entidad.applicationId,
                                        applicationManagerCatalogId = 0,
                                        applicationManagerId = (int)ApplicationManagerRole.Experto,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        email = objeto.expertEmail,
                                        isActive = true,
                                        managerName = objeto.expertName,
                                        username = objeto.expertId
                                    };
                                    ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                }
                            }

                            //Validar si la aplicación es de tribu o si tiene jefe de equipo
                            var esTribu = gestionadoPor.FlagEquipoAgil.HasValue ? gestionadoPor.FlagEquipoAgil.Value : false;
                            var esUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;
                            flagUserIt = esUserIT;
                            var tieneJefeEquipo = gestionadoPor.FlagJefeEquipo.HasValue ? gestionadoPor.FlagJefeEquipo.Value : false;
                            var esSubsidiaria = gestionadoPor.FlagSubsidiarias.HasValue ? gestionadoPor.FlagSubsidiarias.Value : false;

                            if (!esSubsidiaria)
                            {
                                if (!esTribu && !esUserIT)
                                {

                                    //Desactivar ttl y tl
                                    sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                    ctx.Database.ExecuteSqlCommand(sql);
                                    sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TL);
                                    ctx.Database.ExecuteSqlCommand(sql);

                                    sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.TTL);
                                    ctx.Database.ExecuteSqlCommand(sql);
                                    sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.TL);
                                    ctx.Database.ExecuteSqlCommand(sql);

                                    //Desactivar Gobierno User IT
                                    sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.GobiernoUserIT);
                                    ctx.Database.ExecuteSqlCommand(sql);

                                    //Validar si cuenta con un arquitecto evaluador activo, caso contrario se crea
                                    var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);
                                    if (arquitectoEvaluador != null)
                                    {
                                        var flujoActualSinAprobar = ctx.ApplicationFlow
                                                            .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador && x.AppId == entidad.AppId && x.ownerId == arquitectoEvaluador.Matricula && x.isActive == true);
                                        if (flujoActualSinAprobar == null)
                                        {


                                            var flujoArquitecto = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = arquitectoEvaluador.Matricula,
                                                ownerEmail = arquitectoEvaluador.Correo,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                                isActive = true,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoArquitecto);

                                            //Desactivar todos los flujos de arquitecto evaluador que ya existen
                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.ArquitectoEvaluador);
                                            ctx.Database.ExecuteSqlCommand(sql);
                                        }
                                        else if (flujoActualSinAprobar != null && flujoActualSinAprobar.isObserved == true)
                                        {
                                            flujoActualSinAprobar.isObserved = false;
                                        }
                                    }

                                    if (tieneJefeEquipo)
                                    {
                                        //Validar Jefe de Equipo
                                        if (objeto.teamId.HasValue)
                                        {
                                            if (objeto.teamId.Value > 0)
                                            {
                                                var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                if (equipo != null)
                                                {
                                                    //Registrando rol
                                                    var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo && x.isActive);
                                                    if (rol != null)
                                                    {
                                                        if (rol.username != equipo.ResponsableMatricula)
                                                        {
                                                            rol.isActive = false;
                                                            rol.dateModification = DateTime.Now;
                                                            rol.modifiedBy = objeto.registerBy;

                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = equipo.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = equipo.Responsable,
                                                            username = equipo.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }

                                                    //Registrando flujo
                                                    var flujoActualSinAprobar = ctx.ApplicationFlow
                                                        .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.JefeDeEquipo && x.AppId == entidad.AppId && x.ownerId == equipo.ResponsableMatricula);

                                                    if (flujoActualSinAprobar == null)
                                                    {
                                                        sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                        ctx.Database.ExecuteSqlCommand(sql);



                                                        var nuevoFlujo = new ApplicationFlow()
                                                        {
                                                            AppId = entidad.AppId,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            FlowAppId = 0,
                                                            isCompleted = false,
                                                            isNotified = false,
                                                            ownerEmail = equipo.ResponsableCorreo,
                                                            ownerId = equipo.ResponsableMatricula,
                                                            typeFlow = (int)Flow.Registro,
                                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                            isActive = true,
                                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                                        };
                                                        ctx.ApplicationFlow.Add(nuevoFlujo);

                                                        //Enviando correo al Jefe de Equipo
                                                        correoJefeEquipo = true;
                                                    }
                                                    else
                                                    {
                                                        //Validar si el flujo esta rechazado y es para el mismo JdE
                                                        if (flujoActualSinAprobar.isApproved.HasValue)
                                                        {
                                                            var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                            var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                            if (activo && !aprobado)
                                                            {
                                                                flujoActualSinAprobar.isActive = false;
                                                                var nuevoFlujo = new ApplicationFlow()
                                                                {
                                                                    AppId = entidad.AppId,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    FlowAppId = 0,
                                                                    isCompleted = false,
                                                                    isNotified = false,
                                                                    ownerEmail = equipo.ResponsableCorreo,
                                                                    ownerId = equipo.ResponsableMatricula,
                                                                    typeFlow = (int)Flow.Registro,
                                                                    typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                    isActive = true,
                                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                                };
                                                                ctx.ApplicationFlow.Add(nuevoFlujo);

                                                                //Enviando correo al Jefe de Equipo
                                                                correoJefeEquipo = true;
                                                            }
                                                            else
                                                            {
                                                                //Reactivación
                                                                if (entidad.aplicacionRevertida.HasValue)
                                                                {
                                                                    flujoActualSinAprobar.isActive = true;
                                                                    flujoActualSinAprobar.isApproved = false;
                                                                    flujoActualSinAprobar.isCompleted = false;
                                                                    flujoActualSinAprobar.isNotified = false;

                                                                    correoJefeEquipo = true;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Reactivación
                                                            if (entidad.aplicacionRevertida.HasValue)
                                                            {
                                                                flujoActualSinAprobar.isActive = true;
                                                                flujoActualSinAprobar.isApproved = false;
                                                                flujoActualSinAprobar.isCompleted = false;
                                                                flujoActualSinAprobar.isNotified = false;

                                                                correoTTL = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //Desactivar jde
                                    sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                    ctx.Database.ExecuteSqlCommand(sql);

                                    sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.JefeDeEquipo);
                                    ctx.Database.ExecuteSqlCommand(sql);

                                    if (!esUserIT)
                                    {
                                        //Deactivar Gobierno User IT
                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.GobiernoUserIT);
                                        ctx.Database.ExecuteSqlCommand(sql);
                                    }

                                    if (esTribu)
                                    {
                                        //Validar si cuenta con un arquitecto evaluador activo, caso contrario se crea
                                        var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);
                                        if (arquitectoEvaluador != null)
                                        {
                                            var flujoActualSinAprobar = ctx.ApplicationFlow
                                                                .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador && x.AppId == entidad.AppId && x.ownerId == arquitectoEvaluador.Matricula && x.isActive == true);
                                            if (flujoActualSinAprobar == null)
                                            {


                                                var flujoArquitecto = new ApplicationFlow()
                                                {
                                                    AppId = entidad.AppId,
                                                    createdBy = objeto.registerBy,
                                                    dateCreation = DateTime.Now,
                                                    isCompleted = false,
                                                    isNotified = false,
                                                    ownerId = arquitectoEvaluador.Matricula,
                                                    ownerEmail = arquitectoEvaluador.Correo,
                                                    typeFlow = (int)Flow.Registro,
                                                    typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                                    isActive = true,
                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                };
                                                ctx.ApplicationFlow.Add(flujoArquitecto);

                                                //Desactivar todos los flujos de arquitecto evaluador que ya existen
                                                sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.ArquitectoEvaluador);
                                                ctx.Database.ExecuteSqlCommand(sql);
                                            }
                                        }

                                        //Validar TTL
                                        if (objeto.teamId.HasValue)
                                        {
                                            if (objeto.teamId.Value > 0)
                                            {
                                                var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                if (equipo != null)
                                                {
                                                    //Registrando rol
                                                    var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TTL && x.isActive);
                                                    if (rol != null)
                                                    {
                                                        if (rol.username != equipo.ResponsableMatricula)
                                                        {
                                                            rol.isActive = false;
                                                            rol.dateModification = DateTime.Now;
                                                            rol.modifiedBy = objeto.registerBy;

                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = equipo.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = equipo.Responsable,
                                                            username = equipo.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }

                                                    //Registrando flujo
                                                    var flujoActualSinAprobar = ctx.ApplicationFlow
                                                        .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.TTL && x.AppId == entidad.AppId && x.ownerId == equipo.ResponsableMatricula);
                                                    if (flujoActualSinAprobar == null)
                                                    {
                                                        sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                        ctx.Database.ExecuteSqlCommand(sql);



                                                        var nuevoFlujo = new ApplicationFlow()
                                                        {
                                                            AppId = entidad.AppId,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            FlowAppId = 0,
                                                            isCompleted = false,
                                                            isNotified = false,
                                                            ownerEmail = equipo.ResponsableCorreo,
                                                            ownerId = equipo.ResponsableMatricula,
                                                            typeFlow = (int)Flow.Registro,
                                                            typeRegister = (int)ApplicationManagerRole.TTL,
                                                            isActive = true,
                                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                                        };
                                                        ctx.ApplicationFlow.Add(nuevoFlujo);

                                                        //Enujviando correo al TTL
                                                        correoTTL = true;
                                                    }
                                                    else
                                                    {
                                                        //Validar si el flujo esta rechazado y es para el mismo TTL
                                                        if (flujoActualSinAprobar.isApproved.HasValue)
                                                        {
                                                            var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                            var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                            if (activo && !aprobado)
                                                            {
                                                                flujoActualSinAprobar.isActive = false;



                                                                var nuevoFlujo = new ApplicationFlow()
                                                                {
                                                                    AppId = entidad.AppId,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    FlowAppId = 0,
                                                                    isCompleted = false,
                                                                    isNotified = false,
                                                                    ownerEmail = equipo.ResponsableCorreo,
                                                                    ownerId = equipo.ResponsableMatricula,
                                                                    typeFlow = (int)Flow.Registro,
                                                                    typeRegister = (int)ApplicationManagerRole.TTL,
                                                                    isActive = true,
                                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                                };
                                                                ctx.ApplicationFlow.Add(nuevoFlujo);

                                                                //Enviando correo al TTL
                                                                correoTTL = true;
                                                            }
                                                            else
                                                            {
                                                                //Reactivación
                                                                if (entidad.aplicacionRevertida.HasValue)
                                                                {
                                                                    flujoActualSinAprobar.isActive = true;
                                                                    flujoActualSinAprobar.isApproved = false;
                                                                    flujoActualSinAprobar.isCompleted = false;
                                                                    flujoActualSinAprobar.isNotified = false;

                                                                    correoTTL = true;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Reactivación
                                                            if (entidad.aplicacionRevertida.HasValue)
                                                            {
                                                                flujoActualSinAprobar.isActive = true;
                                                                flujoActualSinAprobar.isApproved = false;
                                                                flujoActualSinAprobar.isCompleted = false;
                                                                flujoActualSinAprobar.isNotified = false;

                                                                correoTTL = true;
                                                            }
                                                        }
                                                    }

                                                    //Registrando TL
                                                    var tlTeam = ctx.TribeLeader.FirstOrDefault(x => x.EquipoId == objeto.teamId.Value);
                                                    if (tlTeam != null)
                                                    {
                                                        var rolTL = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TL && x.isActive);
                                                        if (rolTL != null)
                                                        {
                                                            if (rolTL.username != tlTeam.ResponsableMatricula)
                                                            {
                                                                rolTL.isActive = false;
                                                                rolTL.dateModification = DateTime.Now;
                                                                rolTL.modifiedBy = objeto.registerBy;

                                                                var nuevoRol = new ApplicationManagerCatalog()
                                                                {
                                                                    applicationId = entidad.applicationId,
                                                                    applicationManagerCatalogId = 0,
                                                                    applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    email = tlTeam.ResponsableCorreo,
                                                                    isActive = true,
                                                                    managerName = tlTeam.Responsable,
                                                                    username = tlTeam.ResponsableMatricula
                                                                };
                                                                ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = tlTeam.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = tlTeam.Responsable,
                                                                username = tlTeam.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (esUserIT)
                                    {

                                        //Desactivar ttl y tl
                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                        ctx.Database.ExecuteSqlCommand(sql);
                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TL);
                                        ctx.Database.ExecuteSqlCommand(sql);

                                        sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.TTL);
                                        ctx.Database.ExecuteSqlCommand(sql);
                                        sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.TL);
                                        ctx.Database.ExecuteSqlCommand(sql);

                                        //Validar si GobiernoUserIT aprobó la solicitud
                                        var aprobacionGobiernoUserIT = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT && x.AppId == entidad.AppId && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);

                                        if (aprobacionGobiernoUserIT == null)
                                        {
                                            //Desactivar arquitecto evaluador
                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.ArquitectoEvaluador);
                                            ctx.Database.ExecuteSqlCommand(sql);

                                            var usuariosUserIT = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                            if (usuariosUserIT != null)
                                            {
                                                foreach (var item in usuariosUserIT)
                                                {
                                                    if (item.applicationManagerId != 0)
                                                    {
                                                        //Validar si el rol ya existe, caso contrario crearlo
                                                        var flujoActualSinAprobar = ctx.ApplicationFlow
                                                            .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT && x.AppId == entidad.AppId && x.ownerId == item.username && x.isActive == true);
                                                        if (flujoActualSinAprobar == null)
                                                        {


                                                            var nuevoFlujo = new ApplicationFlow()
                                                            {
                                                                AppId = entidad.AppId,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                FlowAppId = 0,
                                                                isCompleted = false,
                                                                isNotified = false,
                                                                ownerEmail = item.username,
                                                                ownerId = item.email,
                                                                typeFlow = (int)Flow.Registro,
                                                                typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                                                isActive = true,
                                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                                            };
                                                            ctx.ApplicationFlow.Add(nuevoFlujo);

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //Desactivar ttl y tl
                                sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                ctx.Database.ExecuteSqlCommand(sql);
                                sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TL);
                                ctx.Database.ExecuteSqlCommand(sql);

                                sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.TTL);
                                ctx.Database.ExecuteSqlCommand(sql);
                                sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.TL);
                                ctx.Database.ExecuteSqlCommand(sql);

                                //Desactivar Gobierno User IT
                                sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.GobiernoUserIT);
                                ctx.Database.ExecuteSqlCommand(sql);

                                //Desactivar jde
                                sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                ctx.Database.ExecuteSqlCommand(sql);

                                sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId={1}", entidad.applicationId, (int)ApplicationManagerRole.JefeDeEquipo);
                                ctx.Database.ExecuteSqlCommand(sql);


                            }

                            //Validar si el arquitecto evaluador, tecnologia o user it ha sido rechazado y se vuelve a asignar la solicitud
                            var listaRechazados = ctx.ApplicationFlow.Where(x => x.AppId == objeto.AppId
                                                            && x.isApproved == false
                                                            && x.isActive == true
                                                            && x.typeRegister != (int)ApplicationManagerRole.AdministradorPortafolio).ToList();
                            if (listaRechazados != null)
                            {
                                if (listaRechazados.Count > 0)
                                {
                                    //Arquitecto evaluador
                                    var rechazoArquitectoEvaluador = listaRechazados.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador);
                                    if (rechazoArquitectoEvaluador != null)
                                    {
                                        var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);
                                        if (arquitectoEvaluador != null)
                                        {
                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.ArquitectoEvaluador);
                                            ctx.Database.ExecuteSqlCommand(sql);



                                            var flujoArquitecto = new ApplicationFlow()
                                            {
                                                AppId = objeto.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = arquitectoEvaluador.Matricula,
                                                ownerEmail = arquitectoEvaluador.Correo,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                                isActive = true,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoArquitecto);

                                        }
                                    }

                                    //Arquitecto tecnología
                                    var rechazoArquitectoTecnologia = listaRechazados.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoTI);
                                    if (rechazoArquitectoTecnologia != null)
                                    {
                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.ArquitectoTI);
                                        ctx.Database.ExecuteSqlCommand(sql);

                                        if (usuarios != null)
                                        {
                                            if (usuarios.Count > 0)
                                            {
                                                var arquitectosTI = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.ArquitectoTI).ToList();
                                                foreach (var item in arquitectosTI)
                                                {
                                                    if (item.applicationManagerId != 0)
                                                    {


                                                        var flujoRol = new ApplicationFlow()
                                                        {
                                                            AppId = objeto.AppId,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            isCompleted = false,
                                                            isNotified = false,
                                                            ownerId = item.username,
                                                            ownerEmail = item.email,
                                                            typeFlow = (int)Flow.Registro,
                                                            typeRegister = item.applicationManagerId,
                                                            isActive = true,
                                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                                        };
                                                        ctx.ApplicationFlow.Add(flujoRol);

                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (esUserIT)
                                    {
                                        var rechazoUserIT = listaRechazados.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT);
                                        if (rechazoUserIT != null)
                                        {
                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.GobiernoUserIT);
                                            ctx.Database.ExecuteSqlCommand(sql);

                                            if (usuarios != null)
                                            {
                                                if (usuarios.Count > 0)
                                                {
                                                    var userIT = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                                    foreach (var item in userIT)
                                                    {
                                                        if (item.applicationManagerId != 0)
                                                        {


                                                            var flujoRol = new ApplicationFlow()
                                                            {
                                                                AppId = objeto.AppId,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                isCompleted = false,
                                                                isNotified = false,
                                                                ownerId = item.username,
                                                                ownerEmail = item.email,
                                                                typeFlow = (int)Flow.Registro,
                                                                typeRegister = item.applicationManagerId,
                                                                isActive = true,
                                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                                            };
                                                            ctx.ApplicationFlow.Add(flujoRol);

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    //Enviar Correos
                                    correoCustodios = true;
                                }
                            }

                            ctx.SaveChanges();

                            ID = entidad.AppId;
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        try
                        {
                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", entidad.applicationId);
                            diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                            diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                            diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2((ApplicationSituationRegister)entidad.registrationSituation.Value));
                            diccionario.Add("[FechaRegistro]", entidad.registerDate.Value.ToString("dd/MM/yyyy"));

                            if (correoOwner)
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionOwner, entidad.applicationId, diccionario);
                            if (correoJefeEquipo)
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionJefeEquipo, entidad.applicationId, diccionario);
                            if (correoTTL)
                            {
                                diccionario.Add("[NombreEquipo]", getTeamName(entidad.teamId));
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionTTL, entidad.applicationId, diccionario);
                            }
                            if (correoCustodios && (entidad.aplicacionRevertida == false || entidad.aplicacionRevertida == null))
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M1NotificacionRegistroAplicaciónCustodioInformacion, entidad.applicationId, diccionario);
                            //if(correoDevSecOps)
                            //    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2ModificacionModeloEntrega, entidad.applicationId, diccionario);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        //Agregar registro en bitácora
                        try
                        {
                            if (objeto.userEntity != entidadInicial.userEntity || objeto.infrastructure != entidadInicial.infrastructure || objeto.replacementApplication != entidadInicial.replacementApplication ||
                                objeto.authorizationMethod != entidadInicial.authorizationMethod || objeto.authenticationMethod != entidadInicial.authenticationMethod || objeto.groupTicketRemedy != entidadInicial.groupTicketRemedy ||
                                objeto.webDomain != entidadInicial.webDomain || (objeto.summaryStandard != entidadInicial.summaryStandard && flagUserIt) || (objeto.complianceLevel != entidadInicial.complianceLevel && flagUserIt) ||
                                objeto.developmentProvider != entidadInicial.developmentProvider || objeto.developmentType != entidadInicial.developmentType || objeto.managed != entidadInicial.managed ||
                                objeto.implementationType != entidadInicial.implementationType || objeto.description != entidadInicial.description || objeto.parentAPTCode != entidadInicial.parentAPTCode ||
                                objeto.hasInterfaceId != entidadInicial.hasInterfaceId || objeto.interfaceId != entidadInicial.interfaceId || objeto.unit != entidadInicial.unit ||
                                objeto.teamId != entidadInicial.teamId || objeto.architectId != entidadInicial.architectId ||
                                objeto.status != entidadInicial.status || nuevosPCI || modificacionExperto2)
                            {
                                var BitacoraMensaje = "";
                                var dateAndTime = DateTime.Now;
                                string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                var hour = dateAndTime.ToString("HH:mm:ss");
                                BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " +
                                    " completó los datos de la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con los siguientes campos:";
                                if (objeto.userEntity != entidadInicial.userEntity)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Entidad Usuaria : " + getUserEntityName(objeto.userEntity) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.infrastructure != entidadInicial.infrastructure)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Infraestructura : " + getInfraestructureName(objeto.infrastructure) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.replacementApplication != entidadInicial.replacementApplication)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Aplicación reemplazada : " + (objeto.replacementApplication == "" ? "Ningún valor" : objeto.replacementApplication) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.authorizationMethod != entidadInicial.authorizationMethod)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Método de autorización : " + getParametricaDetalleName(objeto.authorizationMethod) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.authenticationMethod != entidadInicial.authenticationMethod)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Método de Autenticación : " + getParametricaDetalleName(objeto.authenticationMethod) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.groupTicketRemedy != entidadInicial.groupTicketRemedy)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Grupo Ticket Remedy : " + getGroupRemedyName(objeto.groupTicketRemedy) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.webDomain != entidadInicial.webDomain)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - URL Dominio Web : " + (objeto.webDomain == "" ? "Ningún valor" : objeto.webDomain) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (flagUserIt)
                                {
                                    if (objeto.summaryStandard != entidadInicial.summaryStandard)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Resumen de lineamientos de seguridad : " + (objeto.summaryStandard == "" ? "Ningún valor" : objeto.summaryStandard) + "  ";
                                        modificacionCamposPortafolio = true;
                                    }

                                    if (objeto.complianceLevel != entidadInicial.complianceLevel)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Nivel de Cumplimiento de Seguridad : " + (Convert.ToString(objeto.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(objeto.complianceLevel)) + "  ";
                                        modificacionCamposPortafolio = true;
                                    }
                                }

                                if (objeto.developmentProvider != entidadInicial.developmentProvider)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Proveedor de desarrollo : " + (objeto.developmentProvider == "" ? "Ningún valor" : objeto.developmentProvider) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.developmentType != entidadInicial.developmentType)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Tipo de desarrollo : " + getDevelopmentTypeName(objeto.developmentType) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.managed != entidadInicial.managed)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Gestionado por : " + getManagedName(objeto.managed) + "  ";
                                    modificacionCamposPortafolio = true;
                                }
                                if (objeto.implementationType != entidadInicial.implementationType)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Tipo de implementación : " + getParametricaDetalleName(objeto.implementationType) + "  ";
                                    modificacionCamposPortafolio = true;
                                }
                                if (objeto.description != entidadInicial.description)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Descripción : " + (objeto.description == "" ? "Ningún valor" : objeto.description) + "  ";
                                    modificacionCamposPortafolio = true;
                                }
                                if (objeto.parentAPTCode != entidadInicial.parentAPTCode)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Código de aplicación padre : " + (objeto.parentAPTCode == "" ? "Ningún valor" : objeto.parentAPTCode) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                //if (objeto.hasInterfaceId != entidadInicial.hasInterfaceId)
                                //{
                                //    BitacoraMensaje = BitacoraMensaje + " - Tiene interfaz? : " + objeto.hasInterfaceId + "  ";
                                //    modificacionCamposPortafolio = true;
                                //}
                                if (objeto.interfaceId != entidadInicial.interfaceId)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Código de interfaz : " + (objeto.interfaceId == "" ? "Ningún valor" : objeto.interfaceId) + "  ";
                                    modificacionCamposPortafolio = true;
                                }
                                if (objeto.unit != entidadInicial.unit)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Unidad dueña de la aplicación : " + getUnitName(objeto.unit) + "  ";
                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.teamId != entidadInicial.teamId)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Equipo : " + getTeamName(objeto.teamId) + "  ";
                                    modificacionCamposPortafolio = true;
                                }
                                if (objeto.architectId != entidadInicial.architectId)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Arquitecto : " + getArchitectName(objeto.architectId) + "  ";
                                    modificacionCamposPortafolio = true;
                                }
                                if (objeto.NuevosExpertosList != null && modificacionExperto2 )
                                {
                                    BitacoraMensaje = BitacoraMensaje + "-Expertos de : ";
                                    foreach (string a in listaExpertosAntiguos)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " " + a + ", ";
                                    
                                    }

                                    BitacoraMensaje = BitacoraMensaje + " a : ";

                                    var listaExpertosNuevos = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.Experto)).Select(x => x.managerName).ToList();

                                    foreach (string a in listaExpertosNuevos)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " " + a + ", ";
                                     
                                    }

                                   
                                }

                                if (objeto.status != entidadInicial.status)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Estado de la aplicación : " + getStatusName(objeto.status) + "  ";
                                    modificacionCamposPortafolio = true;
                                }


                                if (nuevosPCI)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - PCI DSS : " + "  ";

                                    foreach (int a in objeto.TipoPCI) {

                                        BitacoraMensaje = BitacoraMensaje + "" + getPCIName(a) + ",  ";

                                    }
                                    modificacionCamposPortafolio = true;
                                }

                                BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                                var registroBitacora = new BitacoraAcciones()
                                {
                                    CodigoAPT = entidad.applicationId,
                                    DetalleBitacora = BitacoraMensaje,
                                    CreadoPor = objeto.Matricula,
                                    FechaCreacion = dateAndTime,
                                    NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                                };

                                ctx.BitacoraAcciones.Add(registroBitacora);
                                ctx.SaveChanges();
                            }
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }


                        //LLAMAR A API JENKINS EN CASO LAS INFRAESTRUCTURAS SEAN LAS ADECUADAS
                        var objURL = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("INFRAESTRUCTURAS_JENKINS");
                        var ActivarJenkins = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("ACTIVAR_INTEGRACION_JENKINS");

                        var listInfraestructuras = getInfrastructureId(objURL.Valor);


                        if (listInfraestructuras.Contains(Convert.ToString(objeto.infrastructure)) && ActivarJenkins.Valor.ToUpper() == "TRUE".ToUpper())
                        {
                            CallPipelineJenkins(entidad.applicationId);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public string getInfrastructureId(string name)
        {

            string[] infrastructures = name.Split(';');
            string resultado = "";
            int flag = 0;

            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (name != null && name != "")
                    {
                        foreach (string a in infrastructures)
                        {
                            var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor.ToString() == a);
                            if (flag == infrastructures.Length - 1)
                                resultado += registro.ParametricaDetalleId;
                            else resultado += registro.ParametricaDetalleId + ", ";
                        }
                        return resultado;
                    }

                    else return "-";

                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public void CallPipelineJenkins(string codApp) {
			var objURL = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("URL_CLIENTE_JENKINS");
			var objUsername = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("USERNAME_CLIENTE_JENKINS");
			var objPassword = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("PASSWORD_CLIENTE_JENKINS");

			System.Net.ServicePointManager.ServerCertificateValidationCallback = ((sender, certificate, chain, sslPolicyErrors) => true);

			log.Debug("Iniciando conexión");
			RestClient client = null;
			RestRequest request = null;
			JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings
			{
				ContractResolver = new CamelCasePropertyNamesContractResolver()
			};

			log.DebugFormat("Intentando conexión al host: {0}", objURL.Valor);
			client = new RestClient(objURL.Valor + codApp);
			client.Authenticator = new HttpBasicAuthenticator(objUsername.Valor, objPassword.Valor);
			string arg = objUsername.Valor + ":" + objPassword.Valor;
			log.DebugFormat("Generando token de autorización: {0}", arg);

			request = new RestRequest(Method.POST);

			request.RequestFormat = DataFormat.Json;
			request.AddHeader("Content-Type", "application/json;charset=utf-8");
			log.DebugFormat("Código de aplicación enviada: {0}", codApp);

			var response = client.Execute(request);

			if (response.StatusCode == HttpStatusCode.OK)
			{
				var jsonRetorno = response.Content;
				log.Debug("HTTP Status code response: 200");
				log.DebugFormat("Respuesta: {0}", jsonRetorno);
			}
            else if (response.StatusCode == HttpStatusCode.Created)
            {
                var jsonRetorno = response.Content;
                log.Debug("HTTP Status code response: 201");
                log.DebugFormat("Respuesta: {0}", jsonRetorno);
            }
            else
			{
				log.DebugFormat("HTTP Status code response: {0}", response.StatusCode.ToString());
				log.DebugFormat("HTTP Status Message: {0}", response.StatusDescription);
				log.DebugFormat("HTTP Error Message: {0}", response.ErrorMessage);
			}
		}

        public override DataResultAplicacion EditApplicationStepTwo2(ApplicationDto objeto, List<ApplicationManagerCatalogDto> usuarios)
        {
            DbContextTransaction transaction = null;
            var camposModificado = string.Empty;
            try
            {
                long ID = 0;
                int IDSol = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        var archivo = ctx.ApplicationFile.FirstOrDefault(x => x.ApplicationId == objeto.AppId && x.FileType == (int)FileType.ArchivoSeguridad);
                        var tipoActivoUserIT = ctx.TipoActivoInformacion.FirstOrDefault(x => x.FlagUserIT == true);

                        var gestionadoPor = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == objeto.managed);
                        if (string.IsNullOrWhiteSpace(objeto.summaryStandard))
                            objeto.summaryStandard = null;
                        if (string.IsNullOrWhiteSpace(entidad.summaryStandard))
                            entidad.summaryStandard = null;

                        var flagUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;

                        var modificacionCamposPortafolio = false;
                        var modificacionEstadoUserIT = false;

                        if (objeto.applicationName.Trim().ToUpper() != entidad.applicationName.Trim().ToUpper())
                            modificacionCamposPortafolio = true;

                        if (gestionadoPor.FlagUserIT == true || entidad.assetType == tipoActivoUserIT.TipoActivoInformacionId)
                        {
                            if (archivo != null)
                            {
                                if (archivo.Nombre.Trim().ToUpper() != objeto.nombreArchivo.Trim().ToUpper())
                                {
                                    modificacionCamposPortafolio = true;
                                }
                            }
                        }


                        if (objeto.implementationType != entidad.implementationType)
                        {
                            if (!flagUserIT)
                                modificacionCamposPortafolio = true;
                        }
                        if (objeto.description.Trim().ToUpper() != entidad.description.Trim().ToUpper())
                            modificacionCamposPortafolio = true;
                        if (!string.IsNullOrWhiteSpace(objeto.parentAPTCode) || !string.IsNullOrWhiteSpace(entidad.parentAPTCode))
                        {
                            if (objeto.parentAPTCode != entidad.parentAPTCode)
                                modificacionCamposPortafolio = true;
                        }
                            
                        if (objeto.hasInterfaceId != entidad.hasInterfaceId)
                            modificacionCamposPortafolio = true;
                        if (objeto.hasInterfaceId.HasValue)
                        {
                            if (objeto.hasInterfaceId.Value)
                            {
                                if (!string.IsNullOrWhiteSpace(objeto.interfaceId) || !string.IsNullOrWhiteSpace(entidad.interfaceId))
                                {
                                    if (objeto.interfaceId != entidad.interfaceId)
                                        modificacionCamposPortafolio = true;
                                }
                            }
                        }                        

                        if (objeto.status != entidad.status)
                        {
                            if (!flagUserIT)
                                modificacionCamposPortafolio = true;
                        }

                        if (flagUserIT)
                        {
                            if (!string.IsNullOrWhiteSpace(objeto.summaryStandard) || !string.IsNullOrWhiteSpace(entidad.summaryStandard))
                            {
                                if (objeto.summaryStandard != entidad.summaryStandard)
                                    modificacionCamposPortafolio = true;
                            }

                            if (objeto.complianceLevel != entidad.complianceLevel)
                                modificacionCamposPortafolio = true;

                            if (objeto.status != entidad.status)
                                modificacionEstadoUserIT = true;
                        }

                        if (modificacionCamposPortafolio)
                        {
                            Solicitud solicitud = new Solicitud();

                            solicitud.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                            solicitud.UsuarioCreacion = objeto.registerBy;
                            solicitud.FechaCreacion = DateTime.Now;
                            solicitud.AplicacionId = objeto.AppId;
                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                            solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                            solicitud.NombreUsuarioAprobacion = objeto.NombreUsuarioModificacion;
                            solicitud.VisiblePortafolio = true;

                            ctx.Solicitud.Add(solicitud);
                            ctx.SaveChanges();
                            IDSol = solicitud.SolicitudAplicacionId;
                            dataResult.SolUserIt = IDSol;

                            if (gestionadoPor.FlagUserIT == true || entidad.assetType == tipoActivoUserIT.TipoActivoInformacionId)
                            {
                                if (archivo != null)
                                {
                                    if (archivo.Nombre.Trim().ToUpper() != objeto.nombreArchivo.Trim().ToUpper())
                                    {
                                        camposModificado = camposModificado + "- Archivo adjunto de seguridad <br/>";
                                    }
                                }
                            }                           

                            if (objeto.applicationName.Trim().ToUpper() != entidad.applicationName.Trim().ToUpper())
                            {
                                SolicitudCampos campos = new SolicitudCampos();
                                campos.ApplicationId = entidad.applicationId;
                                campos.ColumnaId = (int)Campos.NombreAplicacion;
                                campos.ValorAnterior = entidad.applicationName;
                                campos.NuevoValor = objeto.applicationName;
                                campos.EstadoPendiente = true;
                                campos.SolicitudId = IDSol;
                                ctx.SolicitudCampos.Add(campos);

                                ctx.SaveChanges();
                                camposModificado = camposModificado + "- Nombre de la aplicación <br/>";
                            }

                            if (objeto.description.Trim().ToUpper() != entidad.description.Trim().ToUpper())
                            {
                                SolicitudCampos campos = new SolicitudCampos();
                                campos.ApplicationId = entidad.applicationId;
                                campos.ColumnaId = (int)Campos.Descripcion;
                                campos.ValorAnterior = entidad.description;
                                campos.NuevoValor = objeto.description;
                                campos.EstadoPendiente = true;
                                campos.SolicitudId = IDSol;
                                ctx.SolicitudCampos.Add(campos);

                                ctx.SaveChanges();
                                camposModificado = camposModificado + "- Descripción <br/>";
                            }

                            if (!string.IsNullOrWhiteSpace(objeto.parentAPTCode) || !string.IsNullOrWhiteSpace(entidad.parentAPTCode))
                            {
                                if (objeto.parentAPTCode != entidad.parentAPTCode)
                                {
                                    SolicitudCampos campos = new SolicitudCampos();
                                    campos.ApplicationId = entidad.applicationId;
                                    campos.ColumnaId = (int)Campos.CódigoAPTPadre;
                                    campos.ValorAnterior = entidad.parentAPTCode;
                                    campos.NuevoValor = objeto.parentAPTCode;
                                    campos.EstadoPendiente = true;
                                    campos.SolicitudId = IDSol;

                                    ctx.SolicitudCampos.Add(campos);
                                    ctx.SaveChanges();
                                    camposModificado = camposModificado + "- Código de aplicación padre <br/>";
                                }
                            }                            

                            if (objeto.hasInterfaceId.HasValue)
                            {
                                if (objeto.hasInterfaceId.Value)
                                {
                                    if (!string.IsNullOrWhiteSpace(objeto.interfaceId) || !string.IsNullOrWhiteSpace(entidad.interfaceId))
                                    {
                                        if (objeto.interfaceId != entidad.interfaceId)
                                        {
                                            SolicitudCampos campos = new SolicitudCampos();
                                            campos.ApplicationId = entidad.applicationId;
                                            campos.ColumnaId = (int)Campos.CodigoInterfaz;
                                            campos.ValorAnterior = entidad.interfaceId;
                                            campos.NuevoValor = objeto.interfaceId;
                                            campos.EstadoPendiente = true;
                                            campos.SolicitudId = IDSol;

                                            ctx.SolicitudCampos.Add(campos);
                                            ctx.SaveChanges();
                                            camposModificado = camposModificado + "- Código de interfaz <br/>";
                                        }
                                    }
                                }
                            }
                            

                            if (!flagUserIT)
                            {
                                if (objeto.status != entidad.status)
                                {
                                    SolicitudCampos campos = new SolicitudCampos();
                                    campos.ApplicationId = entidad.applicationId;
                                    campos.ColumnaId = (int)Campos.EstadoAplicacion;
                                    campos.ValorAnterior = Convert.ToString(entidad.status);
                                    campos.NuevoValor = Convert.ToString(objeto.status);
                                    campos.EstadoPendiente = true;
                                    campos.SolicitudId = IDSol;

                                    ctx.SolicitudCampos.Add(campos);

                                    ctx.SaveChanges();
                                    camposModificado = camposModificado + "- Estado de la aplicación <br/>";
                                }

                                if (objeto.implementationType != entidad.implementationType)
                                {
                                    SolicitudCampos campos = new SolicitudCampos();
                                    campos.ApplicationId = entidad.applicationId;
                                    campos.ColumnaId = (int)Campos.TipoImplementacion;
                                    campos.ValorAnterior = Convert.ToString(entidad.implementationType);
                                    campos.NuevoValor = Convert.ToString(objeto.implementationType);
                                    campos.EstadoPendiente = true;
                                    campos.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(campos);

                                    ctx.SaveChanges();
                                    camposModificado = camposModificado + "- Tipo de implementación <br/>";
                                }
                            }


                            if (flagUserIT || entidad.assetType == tipoActivoUserIT.TipoActivoInformacionId)
                            {
                                if (!string.IsNullOrWhiteSpace(objeto.summaryStandard) || !string.IsNullOrWhiteSpace(entidad.summaryStandard))
                                {
                                    if (objeto.summaryStandard != entidad.summaryStandard)
                                    {
                                        SolicitudCampos campos = new SolicitudCampos();
                                        campos.ApplicationId = entidad.applicationId;
                                        campos.ColumnaId = (int)Campos.ResumenEstandares;
                                        campos.ValorAnterior = Convert.ToString(entidad.summaryStandard);
                                        campos.NuevoValor = Convert.ToString(objeto.summaryStandard);
                                        campos.EstadoPendiente = true;
                                        campos.SolicitudId = IDSol;

                                        ctx.SolicitudCampos.Add(campos);

                                        ctx.SaveChanges();
                                        camposModificado = camposModificado + "- Resumen de lineamientos de seguridad <br/>";
                                    }
                                }

                                if (objeto.complianceLevel != entidad.complianceLevel)
                                {
                                    SolicitudCampos campos = new SolicitudCampos();
                                    campos.ApplicationId = entidad.applicationId;
                                    campos.ColumnaId = (int)Campos.NivelCumplimientoSeguridad;
                                    campos.ValorAnterior = Convert.ToString(entidad.complianceLevel);
                                    campos.NuevoValor = Convert.ToString(objeto.complianceLevel);
                                    campos.EstadoPendiente = true;
                                    campos.SolicitudId = IDSol;

                                    ctx.SolicitudCampos.Add(campos);

                                    ctx.SaveChanges();
                                    camposModificado = camposModificado + "- Nivel de cumplimiento de seguridad <br/>";
                                }
                            }


                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[Campos]", camposModificado);
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionCreaciónSolicitudModificación, entidad.applicationId, diccionario);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        if (flagUserIT)
                        {
                            if (modificacionEstadoUserIT)
                            {
                                //Se crea la solicitud para Gobierno UserIT
                                Solicitud solicitudGobiernoUserIT = new Solicitud();

                                solicitudGobiernoUserIT.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                solicitudGobiernoUserIT.UsuarioCreacion = objeto.registerBy;
                                solicitudGobiernoUserIT.FechaCreacion = DateTime.Now;
                                solicitudGobiernoUserIT.AplicacionId = objeto.AppId;
                                solicitudGobiernoUserIT.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                solicitudGobiernoUserIT.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                solicitudGobiernoUserIT.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                solicitudGobiernoUserIT.VisiblePortafolio = true;

                                ctx.Solicitud.Add(solicitudGobiernoUserIT);
                                ctx.SaveChanges();
                                IDSol = solicitudGobiernoUserIT.SolicitudAplicacionId;


                                var flujoUserITRequerido = new ApplicationFlow()
                                {
                                    AppId = entidad.AppId,
                                    createdBy = objeto.registerBy,
                                    dateCreation = DateTime.Now,
                                    FlowAppId = 0,
                                    isActive = true,
                                    ownerEmail = string.Empty,
                                    ownerId = string.Empty,
                                    typeFlow = (int)Flow.Modificacion,
                                    isCompleted = false,
                                    isNotified = false,
                                    typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                    SolicitudAplicacionId = IDSol,
                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                };
                                ctx.ApplicationFlow.Add(flujoUserITRequerido);
                                ctx.SaveChanges();

                                if (objeto.status != entidad.status)
                                {
                                    SolicitudCampos campos = new SolicitudCampos();
                                    campos.ApplicationId = entidad.applicationId;
                                    campos.ColumnaId = (int)Campos.EstadoAplicacion;
                                    campos.ValorAnterior = Convert.ToString(entidad.status);
                                    campos.NuevoValor = Convert.ToString(objeto.status);
                                    campos.EstadoPendiente = true;
                                    campos.SolicitudId = IDSol;

                                    ctx.SolicitudCampos.Add(campos);
                                    ctx.SaveChanges();

                                    var flujoDataUserITRequerido = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.status.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.EstadoAplicacion,
                                        FlowAppId = flujoUserITRequerido.FlowAppId,
                                        newValue = objeto.status.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataUserITRequerido);
                                    ctx.SaveChanges();
                                }

                                if (objeto.implementationType != entidad.implementationType)
                                {
                                    SolicitudCampos campos = new SolicitudCampos();
                                    campos.ApplicationId = entidad.applicationId;
                                    campos.ColumnaId = (int)Campos.TipoImplementacion;
                                    campos.ValorAnterior = Convert.ToString(entidad.implementationType);
                                    campos.NuevoValor = Convert.ToString(objeto.implementationType);
                                    campos.EstadoPendiente = true;
                                    campos.SolicitudId = IDSol;

                                    ctx.SolicitudCampos.Add(campos);
                                    ctx.SaveChanges();

                                    var flujoDataUserITRequerido = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.implementationType.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.TipoImplementacion,
                                        FlowAppId = flujoUserITRequerido.FlowAppId,
                                        newValue = objeto.implementationType.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataUserITRequerido);
                                    ctx.SaveChanges();
                                }

                                try
                                {
                                    var usuariosGobierno = this.DevolverRolesGestion();
                                    var corresoGobierno = usuariosGobierno.Select(x => x.email).Distinct().ToList();

                                    var mailManager = new MailingManager();
                                    var diccionario = new Dictionary<string, string>();
                                    diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                    diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                    diccionario.Add("[EstadoActual]", getStatusName(entidad.status));
                                    diccionario.Add("[EstadoNuevo]", getStatusName(objeto.status));



                                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionEstadoParaGobiernoUserIT, entidad.applicationId, diccionario, corresoGobierno, false);
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message, ex);
                                }
                            }

                        }

                        //Campos que requieren flujos de aprobación
                        IDSol = 0;
                        if (objeto.deploymentType != entidad.deploymentType)
                        {
                            //Se crea una nueva solicitud y se asignan los flujos
                            Solicitud solicitudDevSecOps = new Solicitud();

                            solicitudDevSecOps.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                            solicitudDevSecOps.UsuarioCreacion = objeto.registerBy;
                            solicitudDevSecOps.FechaCreacion = DateTime.Now;
                            solicitudDevSecOps.AplicacionId = objeto.AppId;
                            solicitudDevSecOps.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                            solicitudDevSecOps.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                            solicitudDevSecOps.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                            solicitudDevSecOps.VisiblePortafolio = false;

                            ctx.Solicitud.Add(solicitudDevSecOps);
                            ctx.SaveChanges();
                            IDSol = solicitudDevSecOps.SolicitudAplicacionId;

                            //Crear flujo a todos los usuarios de DevSecOps
                            var usuariosDevSecOps = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.DevSecOps);
                            if (usuariosDevSecOps != null)
                            {
                                foreach (var item in usuariosDevSecOps)
                                {
                                    var flujo = new ApplicationFlow()
                                    {
                                        AppId = entidad.AppId,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        FlowAppId = 0,
                                        isActive = true,
                                        ownerEmail = item.email,
                                        ownerId = item.username,
                                        typeFlow = (int)Flow.Modificacion,
                                        isCompleted = false,
                                        isNotified = false,
                                        typeRegister = (int)ApplicationManagerRole.DevSecOps,
                                        SolicitudAplicacionId = IDSol,
                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                    };
                                    ctx.ApplicationFlow.Add(flujo);

                                    var flujoData = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.deploymentType.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.ModeloEntrega,
                                        FlowAppId = flujo.FlowAppId,
                                        newValue = objeto.deploymentType.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoData);
                                    ctx.SaveChanges();
                                }

                                SolicitudCampos campos = new SolicitudCampos();
                                campos.ApplicationId = entidad.applicationId;
                                campos.ColumnaId = (int)Campos.ModeloEntrega;
                                campos.ValorAnterior = Convert.ToString(entidad.deploymentType);
                                campos.NuevoValor = Convert.ToString(objeto.deploymentType);
                                campos.EstadoPendiente = true;
                                campos.SolicitudId = IDSol;

                                ctx.SolicitudCampos.Add(campos);
                                ctx.SaveChanges();
                            }

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionAsignacionSolicitudModificacionDevSecOps, entidad.applicationId, diccionario);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        IDSol = 0;
                        if (objeto.managed == entidad.managed)
                        {
                            if (objeto.teamId != entidad.teamId)
                            {
                                var esTribu = gestionadoPor.FlagEquipoAgil.HasValue ? gestionadoPor.FlagEquipoAgil.Value : false;
                                var esEquipo = gestionadoPor.FlagJefeEquipo.HasValue ? gestionadoPor.FlagJefeEquipo.Value : false;
                                if (esTribu)
                                {
                                    //Enviar flujo a los dos JdE para aprobación
                                    var ttlActual = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                    var ttlNuevo = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);
                                    if (ttlActual != null && ttlNuevo != null)
                                    {
                                        //Se crea una nueva solicitud y se asignan los flujos
                                        Solicitud solicitudEquipo = new Solicitud();

                                        solicitudEquipo.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudEquipo.UsuarioCreacion = objeto.registerBy;
                                        solicitudEquipo.FechaCreacion = DateTime.Now;
                                        solicitudEquipo.AplicacionId = objeto.AppId;
                                        solicitudEquipo.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudEquipo.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudEquipo.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudEquipo.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudEquipo);
                                        ctx.SaveChanges();
                                        IDSol = solicitudEquipo.SolicitudAplicacionId;

                                        SolicitudCampos campos = new SolicitudCampos();
                                        campos.ApplicationId = entidad.applicationId;
                                        campos.ColumnaId = (int)Campos.NombreEquipo;
                                        campos.ValorAnterior = Convert.ToString(entidad.teamId);
                                        campos.NuevoValor = Convert.ToString(objeto.teamId);
                                        campos.EstadoPendiente = true;
                                        campos.SolicitudId = IDSol;

                                        ctx.SolicitudCampos.Add(campos);
                                        ctx.SaveChanges();

                                        if (ttlActual.ResponsableMatricula == ttlNuevo.ResponsableMatricula)
                                        {
                                            var flujoJefeActual = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = ttlActual.ResponsableCorreo,
                                                ownerId = ttlActual.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoJefeActual);
                                            ctx.SaveChanges();

                                            var flujoJefeActualData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = Convert.ToString(entidad.teamId),
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                dateModification = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoJefeActual.FlowAppId,
                                                newValue = Convert.ToString(objeto.teamId),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoJefeActualData);
                                            ctx.SaveChanges();
                                        }
                                        else
                                        {
                                            var flujoJefeActual = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = ttlActual.ResponsableCorreo,
                                                ownerId = ttlActual.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoJefeActual);
                                            ctx.SaveChanges();

                                            var flujoJefeActualData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = Convert.ToString(entidad.teamId),
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                dateModification = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoJefeActual.FlowAppId,
                                                newValue = Convert.ToString(objeto.teamId),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoJefeActualData);
                                            ctx.SaveChanges();

                                            var flujoJefeNuevo = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = ttlNuevo.ResponsableCorreo,
                                                ownerId = ttlNuevo.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoJefeNuevo);
                                            ctx.SaveChanges();

                                            var flujoJefeNuevoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = Convert.ToString(entidad.teamId),
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                dateModification = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoJefeNuevo.FlowAppId,
                                                newValue = Convert.ToString(objeto.teamId),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoJefeNuevoData);
                                            ctx.SaveChanges();
                                        }

                                        try
                                        {
                                            var mailManager = new MailingManager();
                                            var diccionario = new Dictionary<string, string>();
                                            diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                            diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                            diccionario.Add("[EquipoActual]", getTeamName(entidad.teamId));
                                            diccionario.Add("[EquipoNuevo]", getTeamName(objeto.teamId));

                                            mailManager.ProcesarEnvioNotificacionesEspecifico((int)NotificationFlow.ActualizacionModificacionSquad
                                                , entidad.applicationId
                                                , diccionario
                                                , new List<string>() { ttlActual.ResponsableCorreo, ttlNuevo.ResponsableCorreo }
                                                , new List<string>() { objeto.EmailSolicitante });
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message, ex);
                                        }
                                    }
                                }

                                if (esEquipo)
                                {
                                    //Enviar flujo a los dos JdE para aprobación
                                    var jefeActual = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                    var jefeNuevo = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);
                                    if (jefeActual != null && jefeNuevo != null)
                                    {
                                        //Se crea una nueva solicitud y se asignan los flujos
                                        Solicitud solicitudEquipo = new Solicitud();

                                        solicitudEquipo.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudEquipo.UsuarioCreacion = objeto.registerBy;
                                        solicitudEquipo.FechaCreacion = DateTime.Now;
                                        solicitudEquipo.AplicacionId = objeto.AppId;
                                        solicitudEquipo.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudEquipo.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudEquipo.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudEquipo.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudEquipo);
                                        ctx.SaveChanges();
                                        IDSol = solicitudEquipo.SolicitudAplicacionId;

                                        SolicitudCampos campos = new SolicitudCampos();
                                        campos.ApplicationId = entidad.applicationId;
                                        campos.ColumnaId = (int)Campos.NombreEquipo;
                                        campos.ValorAnterior = Convert.ToString(entidad.teamId);
                                        campos.NuevoValor = Convert.ToString(objeto.teamId);
                                        campos.EstadoPendiente = true;
                                        campos.SolicitudId = IDSol;

                                        ctx.SolicitudCampos.Add(campos);
                                        ctx.SaveChanges();

                                        var flujoJefeActual = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = jefeActual.ResponsableCorreo,
                                            ownerId = jefeActual.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoJefeActual);
                                        ctx.SaveChanges();

                                        var flujoJefeActualData = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = Convert.ToString(entidad.teamId),
                                            DataId = 0,
                                            dateCreation = DateTime.Now,
                                            dateModification = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoJefeActual.FlowAppId,
                                            newValue = Convert.ToString(objeto.teamId),
                                            typeFlow = (int)Flow.Modificacion
                                        };
                                        ctx.ApplicationFlowData.Add(flujoJefeActualData);
                                        ctx.SaveChanges();

                                        var flujoJefeNuevo = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = jefeNuevo.ResponsableCorreo,
                                            ownerId = jefeNuevo.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoJefeNuevo);
                                        ctx.SaveChanges();

                                        var flujoJefeNuevoData = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = Convert.ToString(entidad.teamId),
                                            DataId = 0,
                                            dateCreation = DateTime.Now,
                                            dateModification = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoJefeNuevo.FlowAppId,
                                            newValue = Convert.ToString(objeto.teamId),
                                            typeFlow = (int)Flow.Modificacion
                                        };
                                        ctx.ApplicationFlowData.Add(flujoJefeNuevoData);
                                        ctx.SaveChanges();

                                        try
                                        {
                                            var mailManager = new MailingManager();
                                            var diccionario = new Dictionary<string, string>();
                                            diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                            diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                            diccionario.Add("[EquipoActual]", getTeamName(entidad.teamId));
                                            diccionario.Add("[EquipoNuevo]", getTeamName(objeto.teamId));
                                            diccionario.Add("[JefeEquipoActual]", jefeActual.Responsable);
                                            diccionario.Add("[JefeEquipoNuevo]", jefeNuevo.Responsable);
                                            mailManager.ProcesarEnvioNotificacionesEspecifico((int)NotificationFlow.ActualizacionAsignacionSolicitudModificacionEquipo
                                                , entidad.applicationId
                                                , diccionario
                                                , new List<string>() { jefeActual.ResponsableCorreo, jefeNuevo.ResponsableCorreo }
                                                , new List<string>() { objeto.EmailSolicitante });
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message, ex);
                                        }
                                    }
                                }
                            }
                        }

                        IDSol = 0;
                        if (objeto.unit != entidad.unit)
                        {
                            var unidadActual = ctx.Unidad.FirstOrDefault(x => x.UnidadId == entidad.unit);
                            var unidadNuevo = ctx.Unidad.FirstOrDefault(x => x.UnidadId == objeto.unit);

                            //Se crea una nueva solicitud y se asignan los flujos
                            Solicitud solicitudOwners = new Solicitud();
                            solicitudOwners.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                            solicitudOwners.UsuarioCreacion = objeto.registerBy;
                            solicitudOwners.FechaCreacion = DateTime.Now;
                            solicitudOwners.AplicacionId = objeto.AppId;
                            solicitudOwners.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                            solicitudOwners.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                            solicitudOwners.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                            solicitudOwners.VisiblePortafolio = false;
                            solicitudOwners.EmailSolicitante = objeto.EmailSolicitante;

                            ctx.Solicitud.Add(solicitudOwners);
                            ctx.SaveChanges();
                            IDSol = solicitudOwners.SolicitudAplicacionId;

                            SolicitudCampos campos = new SolicitudCampos();
                            campos.ApplicationId = entidad.applicationId;
                            campos.ColumnaId = (int)Campos.UnidadUsuaria;
                            campos.ValorAnterior = Convert.ToString(entidad.unit);
                            campos.NuevoValor = Convert.ToString(objeto.unit);
                            campos.EstadoPendiente = true;
                            campos.SolicitudId = IDSol;

                            ctx.SolicitudCampos.Add(campos);
                            ctx.SaveChanges();

                            ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false' where AppId={0} and typeFlow=2 and isActive='true' and typeRegister=4", entidad.AppId));
                            var flujoOwnerActualNuevo = new ApplicationFlow()
                            {
                                AppId = entidad.AppId,
                                createdBy = objeto.registerBy,
                                dateCreation = DateTime.Now,
                                FlowAppId = 0,
                                isActive = true,
                                ownerEmail = unidadActual == null ? "" : unidadActual.ResponsableCorreo,
                                ownerId = unidadActual == null ? "" : unidadActual.ResponsableMatricula,
                                typeFlow = (int)Flow.Modificacion,
                                isCompleted = false,
                                isNotified = false,
                                typeRegister = (int)ApplicationManagerRole.Owner,
                                isActiveOwner = false,
                                SolicitudAplicacionId = IDSol,
                                RegistradoPor = objeto.NombreUsuarioModificacion
                            };
                            ctx.ApplicationFlow.Add(flujoOwnerActualNuevo);
                            ctx.SaveChanges();

                            var flujoOwnerActualData = new ApplicationFlowData()
                            {
                                createdBy = objeto.registerBy,
                                currentValue = Convert.ToString(entidad.unit),
                                DataId = 0,
                                dateCreation = DateTime.Now,
                                dateModification = DateTime.Now,
                                fieldId = (int)Campos.UnidadUsuaria,
                                FlowAppId = flujoOwnerActualNuevo.FlowAppId,
                                newValue = Convert.ToString(objeto.unit),
                                typeFlow = (int)Flow.Modificacion
                            };
                            ctx.ApplicationFlowData.Add(flujoOwnerActualData);
                            ctx.SaveChanges();


                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[Descripcion]", entidad.description);
                                diccionario.Add("[UnidadActual]", getUnitName(unidadActual.UnidadId));
                                diccionario.Add("[UnidadNueva]", getUnitName(unidadNuevo.UnidadId));

                                mailManager.ProcesarEnvioNotificacionesEspecifico((int)NotificationFlow.ActualizacionAsignacionSolicitudModificacionOwner
                                    , entidad.applicationId
                                    , diccionario
                                    , new List<string>() { unidadActual.ResponsableCorreo }
                                    , new List<string>() { objeto.EmailSolicitante });
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        IDSol = 0;
                        if (objeto.managed != entidad.managed)
                        {
                            var fin = false;
                            var gestionadoPorRequerido = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == objeto.managed);
                            var gestionadoPorInicial = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == entidad.managed);

                            var flagUserITInicial = gestionadoPorInicial.FlagUserIT.HasValue ? gestionadoPorInicial.FlagUserIT.Value : false;
                            var flagJefeEquipoInicial = gestionadoPorInicial.FlagJefeEquipo.HasValue ? gestionadoPorInicial.FlagJefeEquipo.Value : false;
                            var flagSubsidiariaInicial = gestionadoPorInicial.FlagSubsidiarias.HasValue ? gestionadoPorInicial.FlagSubsidiarias.Value : false;
                            var flagTribuInicial = gestionadoPorInicial.FlagEquipoAgil.HasValue ? gestionadoPorInicial.FlagEquipoAgil.Value : false;

                            var flagUserITFinal = gestionadoPorRequerido.FlagUserIT.HasValue ? gestionadoPorRequerido.FlagUserIT.Value : false;
                            var flagJefeEquipoFinal = gestionadoPorRequerido.FlagJefeEquipo.HasValue ? gestionadoPorRequerido.FlagJefeEquipo.Value : false;
                            var flagSubsidiariaFinal = gestionadoPorRequerido.FlagSubsidiarias.HasValue ? gestionadoPorRequerido.FlagSubsidiarias.Value : false;
                            var flagTribuFinal = gestionadoPorRequerido.FlagEquipoAgil.HasValue ? gestionadoPorRequerido.FlagEquipoAgil.Value : false;

                            if (!fin)
                            {
                                if (flagJefeEquipoInicial && flagJefeEquipoFinal)
                                {
                                    var equipoOriginal = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                    var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                    //Se crea una nueva solicitud y se asignan los flujos
                                    Solicitud solicitudJdE = new Solicitud();

                                    solicitudJdE.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                    solicitudJdE.UsuarioCreacion = objeto.registerBy;
                                    solicitudJdE.FechaCreacion = DateTime.Now;
                                    solicitudJdE.AplicacionId = objeto.AppId;
                                    solicitudJdE.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                    solicitudJdE.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                    solicitudJdE.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                    solicitudJdE.VisiblePortafolio = false;
                                    ctx.Solicitud.Add(solicitudJdE);
                                    ctx.SaveChanges();
                                    IDSol = solicitudJdE.SolicitudAplicacionId;

                                    SolicitudCampos camposGestionado = new SolicitudCampos();
                                    camposGestionado.ApplicationId = entidad.applicationId;
                                    camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                    camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                    camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                    camposGestionado.EstadoPendiente = true;
                                    camposGestionado.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposGestionado);

                                    SolicitudCampos camposJefeEquipo = new SolicitudCampos();
                                    camposJefeEquipo.ApplicationId = entidad.applicationId;
                                    camposJefeEquipo.ColumnaId = (int)Campos.NombreEquipo;
                                    camposJefeEquipo.ValorAnterior = Convert.ToString(entidad.teamId);
                                    camposJefeEquipo.NuevoValor = Convert.ToString(objeto.teamId);
                                    camposJefeEquipo.EstadoPendiente = true;
                                    camposJefeEquipo.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposJefeEquipo);

                                    ctx.SaveChanges();

                                    var flujoJefeOriginal = new ApplicationFlow()
                                    {
                                        AppId = entidad.AppId,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        FlowAppId = 0,
                                        isActive = true,
                                        ownerEmail = equipoOriginal.ResponsableCorreo,
                                        ownerId = equipoOriginal.ResponsableMatricula,
                                        typeFlow = (int)Flow.Modificacion,
                                        isCompleted = false,
                                        isNotified = false,
                                        typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                        SolicitudAplicacionId = IDSol,
                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                    };
                                    ctx.ApplicationFlow.Add(flujoJefeOriginal);
                                    ctx.SaveChanges();

                                    var flujoDataJefeOriginal = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.teamId.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.NombreEquipo,
                                        FlowAppId = flujoJefeOriginal.FlowAppId,
                                        newValue = objeto.teamId.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataJefeOriginal);
                                    ctx.SaveChanges();

                                    var flujoDataJefeOriginal2 = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.managed.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.GestionadoPor,
                                        FlowAppId = flujoJefeOriginal.FlowAppId,
                                        newValue = objeto.managed.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataJefeOriginal2);
                                    ctx.SaveChanges();

                                    var flujoJefeRequerido = new ApplicationFlow()
                                    {
                                        AppId = entidad.AppId,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        FlowAppId = 0,
                                        isActive = true,
                                        ownerEmail = equipoDestino.ResponsableCorreo,
                                        ownerId = equipoDestino.ResponsableMatricula,
                                        typeFlow = (int)Flow.Modificacion,
                                        isCompleted = false,
                                        isNotified = false,
                                        typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                        SolicitudAplicacionId = IDSol,
                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                    };
                                    ctx.ApplicationFlow.Add(flujoJefeRequerido);
                                    ctx.SaveChanges();

                                    var flujoDataJefeRequerido = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.teamId.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.NombreEquipo,
                                        FlowAppId = flujoJefeRequerido.FlowAppId,
                                        newValue = objeto.teamId.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataJefeRequerido);
                                    ctx.SaveChanges();

                                    var flujoDataJefeRequerido2 = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.managed.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.GestionadoPor,
                                        FlowAppId = flujoJefeRequerido.FlowAppId,
                                        newValue = objeto.managed.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataJefeRequerido2);
                                    ctx.SaveChanges();

                                    EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                        , entidad.AppId
                                        , equipoOriginal.ResponsableCorreo
                                        , equipoDestino.ResponsableCorreo
                                        , entidad.managed
                                        , objeto.managed
                                        , entidad.teamId
                                        , objeto.teamId
                                        , false
                                        , false);

                                    fin = true;
                                }
                            }

                            if (!fin)
                            {
                                if (flagTribuInicial && flagTribuFinal)
                                {
                                    //Crear solicitudes a los TTL
                                    var equipoOriginal = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                    var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                    //Se crea una nueva solicitud y se asignan los flujos
                                    Solicitud solicitudTTL = new Solicitud();

                                    solicitudTTL.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                    solicitudTTL.UsuarioCreacion = objeto.registerBy;
                                    solicitudTTL.FechaCreacion = DateTime.Now;
                                    solicitudTTL.AplicacionId = objeto.AppId;
                                    solicitudTTL.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                    solicitudTTL.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                    solicitudTTL.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                    solicitudTTL.VisiblePortafolio = false;
                                    ctx.Solicitud.Add(solicitudTTL);
                                    ctx.SaveChanges();
                                    IDSol = solicitudTTL.SolicitudAplicacionId;

                                    SolicitudCampos camposGestionado = new SolicitudCampos();
                                    camposGestionado.ApplicationId = entidad.applicationId;
                                    camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                    camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                    camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                    camposGestionado.EstadoPendiente = true;
                                    camposGestionado.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposGestionado);

                                    SolicitudCampos camposTTL = new SolicitudCampos();
                                    camposTTL.ApplicationId = entidad.applicationId;
                                    camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                    camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                    camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                    camposTTL.EstadoPendiente = true;
                                    camposTTL.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposTTL);

                                    ctx.SaveChanges();

                                    var flujoTTLOriginal = new ApplicationFlow()
                                    {
                                        AppId = entidad.AppId,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        FlowAppId = 0,
                                        isActive = true,
                                        ownerEmail = equipoOriginal.ResponsableCorreo,
                                        ownerId = equipoOriginal.ResponsableMatricula,
                                        typeFlow = (int)Flow.Modificacion,
                                        isCompleted = false,
                                        isNotified = false,
                                        typeRegister = (int)ApplicationManagerRole.TTL,
                                        SolicitudAplicacionId = IDSol,
                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                    };
                                    ctx.ApplicationFlow.Add(flujoTTLOriginal);
                                    ctx.SaveChanges();

                                    var flujoDataTTLOriginal = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.teamId.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.NombreEquipo,
                                        FlowAppId = flujoTTLOriginal.FlowAppId,
                                        newValue = objeto.teamId.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataTTLOriginal);
                                    ctx.SaveChanges();

                                    var flujoDataTTLOriginal2 = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.managed.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.GestionadoPor,
                                        FlowAppId = flujoTTLOriginal.FlowAppId,
                                        newValue = objeto.managed.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataTTLOriginal2);
                                    ctx.SaveChanges();

                                    var flujoTTLRequerido = new ApplicationFlow()
                                    {
                                        AppId = entidad.AppId,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        FlowAppId = 0,
                                        isActive = true,
                                        ownerEmail = equipoDestino.ResponsableCorreo,
                                        ownerId = equipoDestino.ResponsableMatricula,
                                        typeFlow = (int)Flow.Modificacion,
                                        isCompleted = false,
                                        isNotified = false,
                                        typeRegister = (int)ApplicationManagerRole.TTL,
                                        SolicitudAplicacionId = IDSol,
                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                    };
                                    ctx.ApplicationFlow.Add(flujoTTLRequerido);
                                    ctx.SaveChanges();

                                    var flujoDataTTLRequerido = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.teamId.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.NombreEquipo,
                                        FlowAppId = flujoTTLRequerido.FlowAppId,
                                        newValue = objeto.teamId.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataTTLRequerido);
                                    ctx.SaveChanges();

                                    var flujoDataTTLRequerido2 = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = entidad.managed.ToString(),
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.GestionadoPor,
                                        FlowAppId = flujoTTLRequerido.FlowAppId,
                                        newValue = objeto.managed.ToString()
                                    };
                                    ctx.ApplicationFlowData.Add(flujoDataTTLRequerido2);
                                    ctx.SaveChanges();

                                    fin = true;

                                    EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                        , entidad.AppId
                                        , equipoOriginal.ResponsableCorreo
                                        , equipoDestino.ResponsableCorreo
                                        , entidad.managed
                                        , objeto.managed
                                        , entidad.teamId
                                        , objeto.teamId
                                        , false
                                        , false);
                                }
                            }

                            if (!fin)
                            {
                                if (flagJefeEquipoInicial)
                                {
                                    if (flagUserITFinal)
                                    {
                                        var equipoOrigen = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);

                                        //Se crea una nueva solicitud y se asignan los flujos
                                        Solicitud solicitudJdE = new Solicitud();

                                        solicitudJdE.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudJdE.UsuarioCreacion = objeto.registerBy;
                                        solicitudJdE.FechaCreacion = DateTime.Now;
                                        solicitudJdE.AplicacionId = objeto.AppId;
                                        solicitudJdE.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudJdE.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudJdE.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudJdE.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudJdE);
                                        ctx.SaveChanges();
                                        IDSol = solicitudJdE.SolicitudAplicacionId;

                                        SolicitudCampos camposGestionado = new SolicitudCampos();
                                        camposGestionado.ApplicationId = entidad.applicationId;
                                        camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                        camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                        camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                        camposGestionado.EstadoPendiente = true;
                                        camposGestionado.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposGestionado);
                                        ctx.SaveChanges();

                                        SolicitudCampos camposEquipos = new SolicitudCampos();
                                        camposEquipos.ApplicationId = entidad.applicationId;
                                        camposEquipos.ColumnaId = (int)Campos.NombreEquipo;
                                        camposEquipos.ValorAnterior = Convert.ToString(entidad.teamId);
                                        camposEquipos.NuevoValor = null;
                                        camposEquipos.EstadoPendiente = true;
                                        camposEquipos.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposEquipos);
                                        ctx.SaveChanges();

                                        var flujoJdEOrigen = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoOrigen.ResponsableCorreo,
                                            ownerId = equipoOrigen.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoJdEOrigen);
                                        ctx.SaveChanges();

                                        var flujoDataJdEOrigen = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoJdEOrigen.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJdEOrigen);
                                        ctx.SaveChanges();

                                        var flujoDataJdEOrigen2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoJdEOrigen.FlowAppId,
                                            newValue = null
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJdEOrigen2);
                                        ctx.SaveChanges();

                                        var flujoUserITRequerido = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = string.Empty,
                                            ownerId = string.Empty,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoUserITRequerido);
                                        ctx.SaveChanges();

                                        var flujoDataUserITRequerido = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoUserITRequerido.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataUserITRequerido);
                                        ctx.SaveChanges();

                                        var flujoDataUserITRequerido2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoUserITRequerido.FlowAppId,
                                            newValue = null
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataUserITRequerido2);
                                        ctx.SaveChanges();

                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                            , entidad.AppId
                                            , equipoOrigen.ResponsableCorreo
                                            , null
                                            , entidad.managed
                                            , objeto.managed
                                            , entidad.teamId
                                            , objeto.teamId
                                            , true
                                            , false);
                                    }

                                    if (!fin)
                                    {
                                        if (flagSubsidiariaFinal)
                                        {
                                            var equipoOrigen = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudSubsidiaria = new Solicitud();

                                            solicitudSubsidiaria.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudSubsidiaria.UsuarioCreacion = objeto.registerBy;
                                            solicitudSubsidiaria.FechaCreacion = DateTime.Now;
                                            solicitudSubsidiaria.AplicacionId = objeto.AppId;
                                            solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudSubsidiaria.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudSubsidiaria.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudSubsidiaria.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudSubsidiaria);
                                            ctx.SaveChanges();
                                            IDSol = solicitudSubsidiaria.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);
                                            ctx.SaveChanges();

                                            SolicitudCampos camposEquipo = new SolicitudCampos();
                                            camposEquipo.ApplicationId = entidad.applicationId;
                                            camposEquipo.ColumnaId = (int)Campos.NombreEquipo;
                                            camposEquipo.ValorAnterior = Convert.ToString(entidad.teamId);
                                            camposEquipo.NuevoValor = null;
                                            camposEquipo.EstadoPendiente = true;
                                            camposEquipo.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposEquipo);
                                            ctx.SaveChanges();

                                            var flujoJdEOrigen = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoOrigen.ResponsableCorreo,
                                                ownerId = equipoOrigen.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoJdEOrigen);
                                            ctx.SaveChanges();

                                            var flujoDataJdEOrigen = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoJdEOrigen.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdEOrigen);
                                            ctx.SaveChanges();
                                            fin = true;

                                            var flujoDataJdEOrigen2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoJdEOrigen.FlowAppId,
                                                newValue = null
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdEOrigen2);
                                            ctx.SaveChanges();
                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , equipoOrigen.ResponsableCorreo
                                                , null
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , false
                                                , true);
                                        }
                                    }

                                    if (!fin)
                                    {
                                        if (flagTribuFinal)
                                        {
                                            //Crear solicitudes a los TTL
                                            var equipoOriginal = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                            var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudTTL = new Solicitud();

                                            solicitudTTL.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudTTL.UsuarioCreacion = objeto.registerBy;
                                            solicitudTTL.FechaCreacion = DateTime.Now;
                                            solicitudTTL.AplicacionId = objeto.AppId;
                                            solicitudTTL.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudTTL.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudTTL.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudTTL.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudTTL);
                                            ctx.SaveChanges();
                                            IDSol = solicitudTTL.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);

                                            SolicitudCampos camposTTL = new SolicitudCampos();
                                            camposTTL.ApplicationId = entidad.applicationId;
                                            camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                            camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                            camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                            camposTTL.EstadoPendiente = true;
                                            camposTTL.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposTTL);

                                            ctx.SaveChanges();

                                            var flujoJdEOriginal = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoOriginal.ResponsableCorreo,
                                                ownerId = equipoOriginal.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoJdEOriginal);
                                            ctx.SaveChanges();

                                            var flujoDataJdEOriginal = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoJdEOriginal.FlowAppId,
                                                newValue = objeto.teamId.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdEOriginal);
                                            ctx.SaveChanges();

                                            var flujoDataJdEOriginal2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoJdEOriginal.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdEOriginal2);
                                            ctx.SaveChanges();

                                            var flujoTTLRequerido = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoDestino.ResponsableCorreo != null ? equipoDestino.ResponsableCorreo : "",
                                                ownerId = equipoDestino.ResponsableMatricula != null ? equipoDestino.ResponsableMatricula : "",
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoTTLRequerido);
                                            ctx.SaveChanges();

                                            var flujoDataTTLRequerido = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoTTLRequerido.FlowAppId,
                                                newValue = objeto.teamId.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLRequerido);
                                            ctx.SaveChanges();

                                            var flujoDataTTLRequerido2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoTTLRequerido.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLRequerido2);
                                            ctx.SaveChanges();

                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , equipoOriginal.ResponsableCorreo
                                                , equipoDestino.ResponsableCorreo
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , false
                                                , true);
                                        }
                                    }
                                }
                            }

                            if (!fin)
                            {
                                if (flagSubsidiariaInicial)
                                {
                                    if (flagUserITFinal)
                                    {
                                        //Crear solicitudes a GobUserIT
                                        Solicitud solicitudUserIT = new Solicitud();

                                        solicitudUserIT.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudUserIT.UsuarioCreacion = objeto.registerBy;
                                        solicitudUserIT.FechaCreacion = DateTime.Now;
                                        solicitudUserIT.AplicacionId = objeto.AppId;
                                        solicitudUserIT.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudUserIT.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudUserIT.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudUserIT.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudUserIT);
                                        ctx.SaveChanges();
                                        IDSol = solicitudUserIT.SolicitudAplicacionId;

                                        SolicitudCampos camposGestionado = new SolicitudCampos();
                                        camposGestionado.ApplicationId = entidad.applicationId;
                                        camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                        camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                        camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                        camposGestionado.EstadoPendiente = true;
                                        camposGestionado.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposGestionado);
                                        ctx.SaveChanges();

                                        var flujoUserITRequerido = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = string.Empty,
                                            ownerId = string.Empty,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoUserITRequerido);
                                        ctx.SaveChanges();

                                        var flujoDataUserITRequerido = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoUserITRequerido.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataUserITRequerido);
                                        ctx.SaveChanges();

                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , null
                                                , null
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , true
                                                , false);
                                    }

                                    if (!fin)
                                    {
                                        if (flagJefeEquipoFinal)
                                        {
                                            var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudJdE = new Solicitud();

                                            solicitudJdE.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudJdE.UsuarioCreacion = objeto.registerBy;
                                            solicitudJdE.FechaCreacion = DateTime.Now;
                                            solicitudJdE.AplicacionId = objeto.AppId;
                                            solicitudJdE.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudJdE.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudJdE.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudJdE.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudJdE);
                                            ctx.SaveChanges();
                                            IDSol = solicitudJdE.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);

                                            SolicitudCampos camposTTL = new SolicitudCampos();
                                            camposTTL.ApplicationId = entidad.applicationId;
                                            camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                            camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                            camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                            camposTTL.EstadoPendiente = true;
                                            camposTTL.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposTTL);
                                            ctx.SaveChanges();

                                            var flujoJdERequerido = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoDestino.ResponsableCorreo,
                                                ownerId = equipoDestino.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoJdERequerido);
                                            ctx.SaveChanges();

                                            var flujoDataJdERequerido = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoJdERequerido.FlowAppId,
                                                newValue = objeto.teamId.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdERequerido);
                                            ctx.SaveChanges();

                                            var flujoDataJdERequerido2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoJdERequerido.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdERequerido2);
                                            ctx.SaveChanges();

                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , null
                                                , equipoDestino.ResponsableCorreo
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , false
                                                , false);
                                        }
                                    }

                                    if (!fin)
                                    {
                                        if (flagTribuFinal)
                                        {
                                            var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudTTL = new Solicitud();

                                            solicitudTTL.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudTTL.UsuarioCreacion = objeto.registerBy;
                                            solicitudTTL.FechaCreacion = DateTime.Now;
                                            solicitudTTL.AplicacionId = objeto.AppId;
                                            solicitudTTL.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudTTL.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudTTL.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudTTL.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudTTL);
                                            ctx.SaveChanges();
                                            IDSol = solicitudTTL.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);

                                            SolicitudCampos camposTTL = new SolicitudCampos();
                                            camposTTL.ApplicationId = entidad.applicationId;
                                            camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                            camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                            camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                            camposTTL.EstadoPendiente = true;
                                            camposTTL.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposTTL);

                                            ctx.SaveChanges();

                                            var flujoTTLRequerido = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoDestino.ResponsableCorreo,
                                                ownerId = equipoDestino.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoTTLRequerido);
                                            ctx.SaveChanges();

                                            var flujoDataTTLRequerido = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoTTLRequerido.FlowAppId,
                                                newValue = objeto.teamId.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLRequerido);
                                            ctx.SaveChanges();

                                            var flujoDataTTLRequerido2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoTTLRequerido.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLRequerido2);
                                            ctx.SaveChanges();

                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , null
                                                , equipoDestino.ResponsableCorreo
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , false
                                                , false);
                                        }
                                    }
                                }
                            }

                            if (!fin)
                            {
                                if (flagTribuInicial)
                                {
                                    if (flagUserITFinal)
                                    {
                                        var equipoOrigen = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);

                                        //Se crea una nueva solicitud y se asignan los flujos
                                        Solicitud solicitudUserIT = new Solicitud();

                                        solicitudUserIT.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudUserIT.UsuarioCreacion = objeto.registerBy;
                                        solicitudUserIT.FechaCreacion = DateTime.Now;
                                        solicitudUserIT.AplicacionId = objeto.AppId;
                                        solicitudUserIT.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudUserIT.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudUserIT.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudUserIT.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudUserIT);
                                        ctx.SaveChanges();
                                        IDSol = solicitudUserIT.SolicitudAplicacionId;

                                        SolicitudCampos camposGestionado = new SolicitudCampos();
                                        camposGestionado.ApplicationId = entidad.applicationId;
                                        camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                        camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                        camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                        camposGestionado.EstadoPendiente = true;
                                        camposGestionado.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposGestionado);
                                        ctx.SaveChanges();

                                        SolicitudCampos camposEquipo = new SolicitudCampos();
                                        camposEquipo.ApplicationId = entidad.applicationId;
                                        camposEquipo.ColumnaId = (int)Campos.NombreEquipo;
                                        camposEquipo.ValorAnterior = Convert.ToString(entidad.teamId);
                                        camposEquipo.NuevoValor = null;
                                        camposEquipo.EstadoPendiente = true;
                                        camposEquipo.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposEquipo);
                                        ctx.SaveChanges();

                                        var flujoTTLOrigen = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoOrigen.ResponsableCorreo,
                                            ownerId = equipoOrigen.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.TTL,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoTTLOrigen);
                                        ctx.SaveChanges();

                                        var flujoDataTTLOrigen = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoTTLOrigen.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataTTLOrigen);
                                        ctx.SaveChanges();

                                        var flujoDataTTLOrigen2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoTTLOrigen.FlowAppId,
                                            newValue = null
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataTTLOrigen2);
                                        ctx.SaveChanges();

                                        var flujoUserITRequerido = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = string.Empty,
                                            ownerId = string.Empty,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoUserITRequerido);
                                        ctx.SaveChanges();

                                        var flujoDataUserITRequerido = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoUserITRequerido.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataUserITRequerido);
                                        ctx.SaveChanges();

                                        var flujoDataUserITRequerido2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoUserITRequerido.FlowAppId,
                                            newValue = null
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataUserITRequerido2);
                                        ctx.SaveChanges();

                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , equipoOrigen.ResponsableCorreo
                                                , null
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , true
                                                , false);
                                    }

                                    if (!fin)
                                    {
                                        if (flagJefeEquipoFinal)
                                        {
                                            //Crear solicitudes a los TTL
                                            var equipoOriginal = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                            var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudJdE = new Solicitud();

                                            solicitudJdE.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudJdE.UsuarioCreacion = objeto.registerBy;
                                            solicitudJdE.FechaCreacion = DateTime.Now;
                                            solicitudJdE.AplicacionId = objeto.AppId;
                                            solicitudJdE.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudJdE.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudJdE.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudJdE.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudJdE);
                                            ctx.SaveChanges();
                                            IDSol = solicitudJdE.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);

                                            SolicitudCampos camposTTL = new SolicitudCampos();
                                            camposTTL.ApplicationId = entidad.applicationId;
                                            camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                            camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                            camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                            camposTTL.EstadoPendiente = true;
                                            camposTTL.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposTTL);

                                            ctx.SaveChanges();

                                            var flujoTTLOriginal = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoOriginal.ResponsableCorreo,
                                                ownerId = equipoOriginal.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoTTLOriginal);
                                            ctx.SaveChanges();

                                            var flujoDataTTLOriginal = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoTTLOriginal.FlowAppId,
                                                newValue = objeto.teamId.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLOriginal);
                                            ctx.SaveChanges();

                                            var flujoDataTTLOriginal2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoTTLOriginal.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLOriginal2);
                                            ctx.SaveChanges();

                                            var flujoJdERequerido = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoDestino.ResponsableCorreo,
                                                ownerId = equipoDestino.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoJdERequerido);
                                            ctx.SaveChanges();

                                            var flujoDataJdERequerido = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoJdERequerido.FlowAppId,
                                                newValue = objeto.teamId.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdERequerido);
                                            ctx.SaveChanges();

                                            var flujoDataJdERequerido2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoJdERequerido.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataJdERequerido2);
                                            ctx.SaveChanges();

                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , equipoOriginal.ResponsableCorreo
                                                , equipoDestino.ResponsableCorreo
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , false
                                                , false);
                                        }
                                    }

                                    if (!fin)
                                    {
                                        if (flagSubsidiariaFinal)
                                        {
                                            var equipoOrigen = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudSubsidiaria = new Solicitud();

                                            solicitudSubsidiaria.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudSubsidiaria.UsuarioCreacion = objeto.registerBy;
                                            solicitudSubsidiaria.FechaCreacion = DateTime.Now;
                                            solicitudSubsidiaria.AplicacionId = objeto.AppId;
                                            solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudSubsidiaria.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudSubsidiaria.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudSubsidiaria.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudSubsidiaria);
                                            ctx.SaveChanges();
                                            IDSol = solicitudSubsidiaria.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);
                                            ctx.SaveChanges();

                                            SolicitudCampos camposEquipo = new SolicitudCampos();
                                            camposEquipo.ApplicationId = entidad.applicationId;
                                            camposEquipo.ColumnaId = (int)Campos.NombreEquipo;
                                            camposEquipo.ValorAnterior = Convert.ToString(entidad.teamId);
                                            camposEquipo.NuevoValor = null;
                                            camposEquipo.EstadoPendiente = true;
                                            camposEquipo.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposEquipo);
                                            ctx.SaveChanges();

                                            var flujoTTLOrigen = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoOrigen.ResponsableCorreo,
                                                ownerId = equipoOrigen.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoTTLOrigen);
                                            ctx.SaveChanges();

                                            var flujoDataTTLOrigen = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoTTLOrigen.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLOrigen);
                                            ctx.SaveChanges();

                                            var flujoDataTTLOrigen2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoTTLOrigen.FlowAppId,
                                                newValue = null
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLOrigen2);
                                            ctx.SaveChanges();

                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , equipoOrigen.ResponsableCorreo
                                                , null
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , false
                                                , false);
                                        }
                                    }
                                }
                            }

                            if (!fin)
                            {
                                if (flagUserITInicial)
                                {
                                    if (flagJefeEquipoFinal)
                                    {
                                        var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                        //Se crea una nueva solicitud y se asignan los flujos
                                        Solicitud solicitudJdE = new Solicitud();

                                        solicitudJdE.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudJdE.UsuarioCreacion = objeto.registerBy;
                                        solicitudJdE.FechaCreacion = DateTime.Now;
                                        solicitudJdE.AplicacionId = objeto.AppId;
                                        solicitudJdE.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudJdE.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudJdE.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudJdE.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudJdE);
                                        ctx.SaveChanges();
                                        IDSol = solicitudJdE.SolicitudAplicacionId;

                                        SolicitudCampos camposGestionado = new SolicitudCampos();
                                        camposGestionado.ApplicationId = entidad.applicationId;
                                        camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                        camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                        camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                        camposGestionado.EstadoPendiente = true;
                                        camposGestionado.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposGestionado);

                                        SolicitudCampos camposTTL = new SolicitudCampos();
                                        camposTTL.ApplicationId = entidad.applicationId;
                                        camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                        camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                        camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                        camposTTL.EstadoPendiente = true;
                                        camposTTL.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposTTL);
                                        ctx.SaveChanges();

                                        var flujoJdERequerido = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoDestino.ResponsableCorreo,
                                            ownerId = equipoDestino.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoJdERequerido);
                                        ctx.SaveChanges();

                                        var flujoDataJdERequerido = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoJdERequerido.FlowAppId,
                                            newValue = objeto.teamId.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJdERequerido);
                                        ctx.SaveChanges();

                                        var flujoDataJdERequerido2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoJdERequerido.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJdERequerido2);
                                        ctx.SaveChanges();

                                        //var flujoUserIT = new ApplicationFlow()
                                        //{
                                        //    AppId = entidad.AppId,
                                        //    createdBy = objeto.registerBy,
                                        //    dateCreation = DateTime.Now,
                                        //    FlowAppId = 0,
                                        //    isActive = true,
                                        //    ownerEmail = string.Empty,
                                        //    ownerId = string.Empty,
                                        //    typeFlow = (int)Flow.Modificacion,
                                        //    isCompleted = false,
                                        //    isNotified = false,
                                        //    typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                        //    SolicitudAplicacionId = IDSol,
                                        //    RegistradoPor = objeto.NombreUsuarioModificacion
                                        //};
                                        //ctx.ApplicationFlow.Add(flujoUserIT);
                                        //ctx.SaveChanges();

                                        //var flujoDataUserIT = new ApplicationFlowData()
                                        //{
                                        //    createdBy = objeto.registerBy,
                                        //    currentValue = entidad.teamId.ToString(),
                                        //    dateCreation = DateTime.Now,
                                        //    fieldId = (int)Campos.NombreEquipo,
                                        //    FlowAppId = flujoUserIT.FlowAppId,
                                        //    newValue = objeto.teamId.ToString()
                                        //};
                                        //ctx.ApplicationFlowData.Add(flujoDataUserIT);
                                        //ctx.SaveChanges();

                                        //var flujoDataUserIT2 = new ApplicationFlowData()
                                        //{
                                        //    createdBy = objeto.registerBy,
                                        //    currentValue = entidad.managed.ToString(),
                                        //    dateCreation = DateTime.Now,
                                        //    fieldId = (int)Campos.GestionadoPor,
                                        //    FlowAppId = flujoUserIT.FlowAppId,
                                        //    newValue = objeto.managed.ToString()
                                        //};
                                        //ctx.ApplicationFlowData.Add(flujoDataUserIT2);
                                        //ctx.SaveChanges();

                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                                , entidad.AppId
                                                , null
                                                , equipoDestino.ResponsableCorreo
                                                , entidad.managed
                                                , objeto.managed
                                                , entidad.teamId
                                                , objeto.teamId
                                                , true
                                                , false);
                                    }

                                    if (!fin)
                                    {
                                        if (flagTribuFinal)
                                        {
                                            var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudTTL = new Solicitud();

                                            solicitudTTL.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudTTL.UsuarioCreacion = objeto.registerBy;
                                            solicitudTTL.FechaCreacion = DateTime.Now;
                                            solicitudTTL.AplicacionId = objeto.AppId;
                                            solicitudTTL.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudTTL.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudTTL.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudTTL.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudTTL);
                                            ctx.SaveChanges();
                                            IDSol = solicitudTTL.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);

                                            SolicitudCampos camposTTL = new SolicitudCampos();
                                            camposTTL.ApplicationId = entidad.applicationId;
                                            camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                            camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                            camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                            camposTTL.EstadoPendiente = true;
                                            camposTTL.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposTTL);

                                            ctx.SaveChanges();

                                            var flujoTTLRequerido = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = equipoDestino.ResponsableCorreo,
                                                ownerId = equipoDestino.ResponsableMatricula,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.TTL,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoTTLRequerido);
                                            ctx.SaveChanges();

                                            var flujoDataTTLRequerido = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.teamId.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.NombreEquipo,
                                                FlowAppId = flujoTTLRequerido.FlowAppId,
                                                newValue = objeto.teamId.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLRequerido);
                                            ctx.SaveChanges();

                                            var flujoDataTTLRequerido2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoTTLRequerido.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataTTLRequerido2);
                                            ctx.SaveChanges();

                                            //var flujoUserIT = new ApplicationFlow()
                                            //{
                                            //    AppId = entidad.AppId,
                                            //    createdBy = objeto.registerBy,
                                            //    dateCreation = DateTime.Now,
                                            //    FlowAppId = 0,
                                            //    isActive = true,
                                            //    ownerEmail = string.Empty,
                                            //    ownerId = string.Empty,
                                            //    typeFlow = (int)Flow.Modificacion,
                                            //    isCompleted = false,
                                            //    isNotified = false,
                                            //    typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            //    SolicitudAplicacionId = IDSol,
                                            //    RegistradoPor = objeto.NombreUsuarioModificacion
                                            //};
                                            //ctx.ApplicationFlow.Add(flujoUserIT);
                                            //ctx.SaveChanges();

                                            //var flujoDataUserIT = new ApplicationFlowData()
                                            //{
                                            //    createdBy = objeto.registerBy,
                                            //    currentValue = entidad.teamId.ToString(),
                                            //    dateCreation = DateTime.Now,
                                            //    fieldId = (int)Campos.NombreEquipo,
                                            //    FlowAppId = flujoUserIT.FlowAppId,
                                            //    newValue = objeto.teamId.ToString()
                                            //};
                                            //ctx.ApplicationFlowData.Add(flujoDataUserIT);
                                            //ctx.SaveChanges();

                                            //var flujoDataUserIT2 = new ApplicationFlowData()
                                            //{
                                            //    createdBy = objeto.registerBy,
                                            //    currentValue = entidad.managed.ToString(),
                                            //    dateCreation = DateTime.Now,
                                            //    fieldId = (int)Campos.GestionadoPor,
                                            //    FlowAppId = flujoUserIT.FlowAppId,
                                            //    newValue = objeto.managed.ToString()
                                            //};
                                            //ctx.ApplicationFlowData.Add(flujoDataUserIT2);
                                            //ctx.SaveChanges();

                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , equipoDestino.ResponsableCorreo
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , true
                                               , false);
                                        }
                                    }

                                    if (!fin)
                                    {
                                        if (flagSubsidiariaFinal)
                                        {
                                            var equipoOrigen = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);

                                            //Se crea una nueva solicitud y se asignan los flujos
                                            Solicitud solicitudSubsidiaria = new Solicitud();

                                            solicitudSubsidiaria.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                            solicitudSubsidiaria.UsuarioCreacion = objeto.registerBy;
                                            solicitudSubsidiaria.FechaCreacion = DateTime.Now;
                                            solicitudSubsidiaria.AplicacionId = objeto.AppId;
                                            solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                            solicitudSubsidiaria.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitudSubsidiaria.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitudSubsidiaria.VisiblePortafolio = false;

                                            ctx.Solicitud.Add(solicitudSubsidiaria);
                                            ctx.SaveChanges();
                                            IDSol = solicitudSubsidiaria.SolicitudAplicacionId;

                                            SolicitudCampos camposGestionado = new SolicitudCampos();
                                            camposGestionado.ApplicationId = entidad.applicationId;
                                            camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                            camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                            camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                            camposGestionado.EstadoPendiente = true;
                                            camposGestionado.SolicitudId = IDSol;
                                            ctx.SolicitudCampos.Add(camposGestionado);

                                            ctx.SaveChanges();

                                            var flujoUserIT = new ApplicationFlow()
                                            {
                                                AppId = entidad.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                FlowAppId = 0,
                                                isActive = true,
                                                ownerEmail = string.Empty,
                                                ownerId = string.Empty,
                                                typeFlow = (int)Flow.Modificacion,
                                                isCompleted = false,
                                                isNotified = false,
                                                typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                                SolicitudAplicacionId = IDSol,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoUserIT);
                                            ctx.SaveChanges();

                                            var flujoDataUserIT = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = entidad.managed.ToString(),
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.GestionadoPor,
                                                FlowAppId = flujoUserIT.FlowAppId,
                                                newValue = objeto.managed.ToString()
                                            };
                                            ctx.ApplicationFlowData.Add(flujoDataUserIT);
                                            ctx.SaveChanges();

                                            fin = true;

                                            EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , equipoOrigen.ResponsableCorreo
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , false);
                                        }
                                    }
                                }
                            }

                            if (!fin)
                            {
                                if (!flagUserITFinal && !flagJefeEquipoFinal && !flagSubsidiariaFinal && !flagTribuFinal)
                                {
                                    var equipoOrigen = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);

                                    //Se crea una nueva solicitud y se asignan los flujos
                                    Solicitud solicitudSubsidiaria = new Solicitud();

                                    solicitudSubsidiaria.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                    solicitudSubsidiaria.UsuarioCreacion = objeto.registerBy;
                                    solicitudSubsidiaria.FechaCreacion = DateTime.Now;
                                    solicitudSubsidiaria.AplicacionId = objeto.AppId;
                                    solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                    solicitudSubsidiaria.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                    solicitudSubsidiaria.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                    solicitudSubsidiaria.VisiblePortafolio = false;

                                    ctx.Solicitud.Add(solicitudSubsidiaria);
                                    ctx.SaveChanges();
                                    IDSol = solicitudSubsidiaria.SolicitudAplicacionId;

                                    SolicitudCampos camposGestionado = new SolicitudCampos();
                                    camposGestionado.ApplicationId = entidad.applicationId;
                                    camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                    camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                    camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                    camposGestionado.EstadoPendiente = true;
                                    camposGestionado.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposGestionado);

                                    SolicitudCampos camposEquipo = new SolicitudCampos();
                                    camposEquipo.ApplicationId = entidad.applicationId;
                                    camposEquipo.ColumnaId = (int)Campos.NombreEquipo;
                                    camposEquipo.ValorAnterior = Convert.ToString(entidad.teamId);
                                    camposEquipo.NuevoValor = objeto.teamId.HasValue ? (objeto.teamId.Value == -1 ? string.Empty : objeto.teamId.Value.ToString()) : string.Empty;
                                    camposEquipo.EstadoPendiente = true;
                                    camposEquipo.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposEquipo);

                                    ctx.SaveChanges();

                                    if (flagTribuInicial)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        var flujoTTLOrigen = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoOrigen.ResponsableCorreo,
                                            ownerId = equipoOrigen.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.TTL,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoTTLOrigen);
                                        ctx.SaveChanges();
                                        var flujoDataTTLOrigen = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoTTLOrigen.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataTTLOrigen);
                                        var flujoDataEquipoDestino = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoTTLOrigen.FlowAppId,
                                            newValue = objeto.teamId.HasValue ? (objeto.teamId.Value == -1 ? string.Empty : objeto.teamId.Value.ToString()) : string.Empty
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataEquipoDestino);
                                        ctx.SaveChanges();

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , equipoOrigen.ResponsableCorreo
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , false);
                                    }

                                    if (flagJefeEquipoInicial)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        var flujoJefeEquipoOrigen = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoOrigen.ResponsableCorreo,
                                            ownerId = equipoOrigen.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoJefeEquipoOrigen);
                                        ctx.SaveChanges();
                                        var flujoDataJefeEquipoOrigen = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoJefeEquipoOrigen.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJefeEquipoOrigen);
                                        var flujoDataEquipoDestino = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoJefeEquipoOrigen.FlowAppId,
                                            newValue = objeto.teamId.HasValue ? (objeto.teamId.Value == -1 ? string.Empty : objeto.teamId.Value.ToString()) : string.Empty
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataEquipoDestino);
                                        ctx.SaveChanges();

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , equipoOrigen.ResponsableCorreo
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , false);
                                    }

                                    if (flagUserITInicial)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        var flujoUserITOrigen = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = string.Empty,
                                            ownerId = string.Empty,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoUserITOrigen);
                                        ctx.SaveChanges();
                                        var flujoDataUserITOrigen = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoUserITOrigen.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataUserITOrigen);
                                        ctx.SaveChanges();

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , true
                                               , false);
                                    }

                                    if (flagSubsidiariaInicial)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                        solicitudSubsidiaria.VisiblePortafolio = true;
                                        ctx.SaveChanges();

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , true);
                                    }
                                    fin = true;
                                }
                            }

                            if (!fin)
                            {
                                if (!flagUserITInicial && !flagJefeEquipoInicial && !flagSubsidiariaInicial && !flagTribuInicial)
                                {
                                    var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                    //Crear solicitudes a los TTL
                                    //Se crea una nueva solicitud y se asignan los flujos
                                    Solicitud solicitudSubsidiaria = new Solicitud();

                                    solicitudSubsidiaria.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                    solicitudSubsidiaria.UsuarioCreacion = objeto.registerBy;
                                    solicitudSubsidiaria.FechaCreacion = DateTime.Now;
                                    solicitudSubsidiaria.AplicacionId = objeto.AppId;
                                    solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                    solicitudSubsidiaria.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                    solicitudSubsidiaria.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                    solicitudSubsidiaria.VisiblePortafolio = false;

                                    ctx.Solicitud.Add(solicitudSubsidiaria);
                                    ctx.SaveChanges();
                                    IDSol = solicitudSubsidiaria.SolicitudAplicacionId;

                                    SolicitudCampos camposGestionado = new SolicitudCampos();
                                    camposGestionado.ApplicationId = entidad.applicationId;
                                    camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                    camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                    camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                    camposGestionado.EstadoPendiente = true;
                                    camposGestionado.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposGestionado);

                                    SolicitudCampos camposEquipo = new SolicitudCampos();
                                    camposEquipo.ApplicationId = entidad.applicationId;
                                    camposEquipo.ColumnaId = (int)Campos.NombreEquipo;
                                    camposEquipo.ValorAnterior = entidad.teamId.HasValue ? (entidad.teamId.Value == -1 ? string.Empty : entidad.teamId.Value.ToString()) : string.Empty;
                                    camposEquipo.NuevoValor = Convert.ToString(objeto.teamId);
                                    camposEquipo.EstadoPendiente = true;
                                    camposEquipo.SolicitudId = IDSol;
                                    ctx.SolicitudCampos.Add(camposEquipo);

                                    ctx.SaveChanges();

                                    if (flagTribuFinal)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        var flujoTTLDestino = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoDestino.ResponsableCorreo,
                                            ownerId = equipoDestino.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.TTL,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoTTLDestino);
                                        ctx.SaveChanges();
                                        var flujoDataTTLDestino = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoTTLDestino.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataTTLDestino);
                                        var flujoDataEquipoOrigen = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.HasValue ? (entidad.teamId.Value == -1 ? string.Empty : entidad.teamId.Value.ToString()) : string.Empty,
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoTTLDestino.FlowAppId,
                                            newValue = objeto.teamId.ToString(),
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataEquipoOrigen);
                                        ctx.SaveChanges();
                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , equipoDestino.ResponsableCorreo
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , false);
                                    }

                                    if (flagJefeEquipoFinal)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        var flujoJefeEquipoDestino = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoDestino.ResponsableCorreo,
                                            ownerId = equipoDestino.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoJefeEquipoDestino);
                                        ctx.SaveChanges();
                                        var flujoDataJefeEquipoFinal = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoJefeEquipoDestino.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJefeEquipoFinal);
                                        var flujoDataEquipoOrigen = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.HasValue ? (entidad.teamId.Value == -1 ? string.Empty : entidad.teamId.Value.ToString()) : string.Empty,
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoJefeEquipoDestino.FlowAppId,
                                            newValue = objeto.teamId.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataEquipoOrigen);
                                        ctx.SaveChanges();
                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , equipoDestino.ResponsableCorreo
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , false);
                                    }

                                    if (flagUserITFinal)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        var flujoUserITDestino = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = string.Empty,
                                            ownerId = string.Empty,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoUserITDestino);
                                        ctx.SaveChanges();
                                        var flujoDataUserITDestino = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoUserITDestino.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataUserITDestino);
                                        ctx.SaveChanges();
                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , true
                                               , false);
                                    }

                                    if (flagSubsidiariaFinal)
                                    {
                                        solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                        solicitudSubsidiaria.VisiblePortafolio = true;
                                        ctx.SaveChanges();

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , true);
                                    }
                                }
                            }

                            if (!fin)
                            {
                                //Los dos no tienen responsables
                                //Se crea una nueva solicitud y se asignan los flujos
                                Solicitud solicitudSubsidiaria = new Solicitud();

                                solicitudSubsidiaria.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                solicitudSubsidiaria.UsuarioCreacion = objeto.registerBy;
                                solicitudSubsidiaria.FechaCreacion = DateTime.Now;
                                solicitudSubsidiaria.AplicacionId = objeto.AppId;
                                solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                solicitudSubsidiaria.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                solicitudSubsidiaria.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                solicitudSubsidiaria.VisiblePortafolio = false;

                                ctx.Solicitud.Add(solicitudSubsidiaria);
                                ctx.SaveChanges();
                                IDSol = solicitudSubsidiaria.SolicitudAplicacionId;

                                SolicitudCampos camposGestionado = new SolicitudCampos();
                                camposGestionado.ApplicationId = entidad.applicationId;
                                camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                camposGestionado.EstadoPendiente = true;
                                camposGestionado.SolicitudId = IDSol;
                                ctx.SolicitudCampos.Add(camposGestionado);

                                ctx.SaveChanges();

                                fin = true;

                                EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , false
                                               , true);
                            }
                        }

                        if (!flagUserIT || tipoActivoUserIT.TipoActivoInformacionId != entidad.assetType)
                        {
                            entidad.summaryStandard = null;
                            entidad.complianceLevel = null;
                            ctx.SaveChanges();
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = IDSol;
                        transaction.Commit();


                        try
                        {
                            if (objeto.applicationName.Trim().ToUpper() != entidad.applicationName.Trim().ToUpper() || objeto.description.Trim().ToUpper() != entidad.description.Trim().ToUpper() ||
                                objeto.parentAPTCode != entidad.parentAPTCode || objeto.implementationType != entidad.implementationType || objeto.status != entidad.status ||
                              objeto.managed != entidad.managed || objeto.unit != entidad.unit || objeto.deploymentType != entidad.deploymentType || objeto.teamId != entidad.teamId ||
                                (objeto.interfaceId != entidad.interfaceId)
                                || (objeto.summaryStandard != entidad.summaryStandard && flagUserIT) || (objeto.complianceLevel != entidad.complianceLevel && flagUserIT)
                                )
                            //if (flagUserIT)
                            {

                                //Agregar registro en bitácora
                                var registroBitacora = false;

                                var BitacoraMensaje = "";
                                var dateAndTime = DateTime.Now;
                                string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                var hour = dateAndTime.ToString("HH:mm:ss");
                                BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " +
                                    "generó una solicitud de modificación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con los siguientes cambios:";
                                if (objeto.applicationName.Trim().ToUpper() != entidad.applicationName.Trim().ToUpper())
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Nombre de Aplicación - tenía el valor: " + (entidad.applicationName == "" ? "Ningún valor" : entidad.applicationName) +
                                        " Nuevo Valor: " + (objeto.applicationName == "" ? "Ningún valor" : objeto.applicationName) + "  ";
                                    registroBitacora = true;
                                }

                                if (objeto.implementationType != entidad.implementationType)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Tipo de implementación - tenía el valor: " + getImplementationTypeName(entidad.implementationType) +
                                      " y fue reemplazado por el valor: " + getImplementationTypeName(objeto.implementationType) + "  ";
                                    registroBitacora = true;
                                }

                                if (objeto.description.Trim().ToUpper() != entidad.description.Trim().ToUpper())
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Descripción - tenía el valor: " + (entidad.description == "" ? "Ningún valor" : entidad.description) +
                                    " y fue reemplazado por el valor: " + (objeto.description == "" ? "Ningún valor" : objeto.description) + "  ";
                                    registroBitacora = true;
                                }

                                if (objeto.deploymentType != entidad.deploymentType)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Modelo de entrega - tenía el valor: " + getDeploymentTypeName(entidad.deploymentType) +
                                    " y fue reemplazado por el valor: " + getDeploymentTypeName(objeto.deploymentType) + "  ";
                                    registroBitacora = true;
                                }

                                if (objeto.managed != entidad.managed)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Gestionado Por - tenía el valor: " + getManagedName(entidad.managed) +
                                    " y fue reemplazado por el valor: " + getManagedName(objeto.managed) + "  ";
                                    registroBitacora = true;
                                }
                                if (objeto.unit != entidad.unit)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Unidad dueña de la aplicación - tenía el valor: " + getUnitName(entidad.unit) +
                                    " y fue reemplazado por el valor: " + getUnitName(objeto.unit) + "  ";
                                    registroBitacora = true;
                                }
                                if (objeto.teamId != entidad.teamId)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Equipo/Squad - tenía el valor: " + getTeamName(entidad.teamId) +
                                    " y fue reemplazado por el valor: " + getTeamName(objeto.teamId) + "  ";
                                    registroBitacora = true;
                                }
                                if (!string.IsNullOrWhiteSpace(objeto.parentAPTCode) || !string.IsNullOrWhiteSpace(entidad.parentAPTCode))
                                {
                                    if (objeto.parentAPTCode != entidad.parentAPTCode)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Código APT Padre - tenía el valor: " + (entidad.parentAPTCode == "" ? "Ningún valor" : entidad.parentAPTCode) +
                                        " y fue reemplazado por el valor: " + (objeto.parentAPTCode == "" ? "Ningún valor" : objeto.parentAPTCode) + "  ";
                                        registroBitacora = true;
                                    }
                                }
                                                               

                                if (objeto.hasInterfaceId.HasValue)
                                {
                                    if (objeto.hasInterfaceId.Value)
                                    {
                                        if (!string.IsNullOrWhiteSpace(objeto.interfaceId) || !string.IsNullOrWhiteSpace(entidad.interfaceId))
                                        {
                                            if (objeto.interfaceId != entidad.interfaceId)
                                            {
                                                BitacoraMensaje = BitacoraMensaje + " - Código de Interfaz - tenía el valor: " + (entidad.interfaceId == "" ? "Ningún valor" : entidad.interfaceId) + " y fue reemplazado por el valor: " + (objeto.interfaceId == "" ? "Ningún valor" : objeto.interfaceId) + "  ";
                                                registroBitacora = true;
                                            }                                                
                                        }
                                    }
                                }

                                if (objeto.status != entidad.status)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Estado de la aplicación - tenía el valor: " + getStatusName(entidad.status) + " y fue reemplazado por el valor: " + getStatusName(objeto.status) + "  ";
                                    registroBitacora = true;
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.summaryStandard) || !string.IsNullOrWhiteSpace(entidad.summaryStandard) && (flagUserIT || tipoActivoUserIT.TipoActivoInformacionId == entidad.assetType))
                                {
                                    if (objeto.summaryStandard != entidad.summaryStandard)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Resumen de lineamientos de seguridad - tenía el valor: " + (entidad.summaryStandard == "" ? "Ningún valor" : entidad.summaryStandard) +
                                    " y fue reemplazado por el valor: " + (objeto.summaryStandard == "" ? "Ningún valor" : objeto.summaryStandard) + "  ";
                                        registroBitacora = true;
                                    }
                                        
                                }                               

                                if (objeto.complianceLevel != entidad.complianceLevel && (flagUserIT || tipoActivoUserIT.TipoActivoInformacionId == entidad.assetType))
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Nivel de cumplimiento de seguridad - tenía el valor: " + (Convert.ToString(entidad.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(entidad.complianceLevel)) +
                                    " y fue reemplazado por el valor: " + (Convert.ToString(objeto.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(objeto.complianceLevel)) + "  ";
                                    registroBitacora = true;
                                }

                                BitacoraMensaje = BitacoraMensaje + ", el día " + "" + date + "" + " a las " + "" + hour + "";

                                if (registroBitacora)
                                {
                                    var registro = new BitacoraAcciones()
                                    {
                                        CodigoAPT = entidad.applicationId,
                                        DetalleBitacora = BitacoraMensaje,
                                        CreadoPor = objeto.Matricula,
                                        FechaCreacion = dateAndTime,
                                        NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                                    };

                                    ctx.BitacoraAcciones.Add(registro);
                                    ctx.SaveChanges();
                                }
                                
                            }
                        }


                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationStepTwo3(ApplicationDto objeto, List<ApplicationManagerCatalogDto> usuarios)
        {
            DbContextTransaction transaction = null;

            var tablaDetalle = "<table border='1'><tr><td><strong>Campo</strong></td><td><strong>Valor anterior</strong></td><td><strong>Valor nuevo</strong></td></tr>{0}</table>";
            var formato = "<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>";
            var filas = string.Empty;
            var cuerpoCorreo = string.Empty;
            var expertos = string.Empty;

            bool nuevosPCI = false;
            string pciIniciales = "";

            try
            {
                long ID = 0;

                DateTime FECHA_ACTUAL = DateTime.Now;
                var modificacionCamposPortafolio = false;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);

                        ApplicationDtoTemporal entidad2 = new ApplicationDtoTemporal();

                        //Objeto con datos uniciales para comparación en bitacora
                        entidad2.userEntity = entidad.userEntity;
                        entidad2.infrastructure = entidad.infrastructure;
                        entidad2.replacementApplication = entidad.replacementApplication;
                        entidad2.authorizationMethod = entidad.authorizationMethod;
                        entidad2.authenticationMethod = entidad.authenticationMethod;
                        entidad2.groupTicketRemedy = entidad.groupTicketRemedy;
                        entidad2.webDomain = entidad.webDomain;

                        entidad2.developmentProvider = entidad.developmentProvider;
                        entidad2.developmentType = entidad.developmentType;

                        var sql = string.Empty;

                        entidad.userEntity = objeto.userEntity;
                        entidad.infrastructure = objeto.infrastructure;
                        entidad.replacementApplication = objeto.replacementApplication;
                        entidad.authorizationMethod = objeto.authorizationMethod;
                        entidad.authenticationMethod = objeto.authenticationMethod;
                        entidad.groupTicketRemedy = objeto.groupTicketRemedy;
                        entidad.webDomain = objeto.webDomain;

                        entidad.developmentProvider = objeto.developmentProvider;
                        entidad.developmentType = objeto.developmentType;


                        //PCI
                        var PCIActuales = ctx.ApplicationPCI.Where(x => x.ApplicationId == entidad.AppId && x.FlagActivo == true && x.FlagEliminado == false).ToList();

                        var IdPCIS = ctx.ApplicationPCI.Where(x => x.ApplicationId == entidad.AppId && x.FlagActivo == true && x.FlagEliminado == false).Select(x => x.TipoPCIId).ToList();

                        foreach (int a in IdPCIS)
                        {
                            pciIniciales = pciIniciales + "" + getPCIName(a) + ",  ";



                        }
                        if (pciIniciales == "") { pciIniciales = "Ninguno"; }

                        var set = new HashSet<int?>(IdPCIS);


                        //Desactiva los PCI actuales

                        List<int?> ListaVacia = new List<int?>();
                   

                        foreach (ApplicationPCI a in PCIActuales)
                        {
                            a.FlagActivo = false;
                            a.FlagEliminado = true;
                        }
                        if (objeto.TipoPCI == null) {
                            nuevosPCI = !(set.SetEquals(ListaVacia));
                        }

                        if (objeto.TipoPCI != null)
                        {
                            nuevosPCI = !(set.SetEquals(objeto.TipoPCI));


                            //Crea los nuevos PCI asociados
                            foreach (int PCI in objeto.TipoPCI)
                            {
                                ApplicationPCI registro = new ApplicationPCI();
                                registro.ApplicationId = entidad.AppId;
                                registro.TipoPCIId = PCI;
                                registro.FlagActivo = true;
                                registro.FlagEliminado = false;
                                ctx.ApplicationPCI.Add(registro);
                            }
                        }

                        ctx.SaveChanges();

                        var expertosActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto && x.isActive).ToList();

                        //Validar si hay un experto nuevo
                        var listaMatriculas = new List<string>();
                        bool flagNuevaMatricula = false;
                        bool flagDistintoNumero = false;
                        foreach (ApplicationManagerCatalog a in expertosActuales)
                        {
                            listaMatriculas.Add(a.username);
                        }
                        foreach (ExpertoDto experto in objeto.Expertos)
                        {
                            if (!listaMatriculas.Contains(experto.username))
                            {
                                flagNuevaMatricula = true;
                            }
                        }


                        for (int i = 0; i < objeto.Expertos.Count; i++)
                        {
                            int count = objeto.Expertos.Take(i + 1)
                                            .Count(r => r.username == objeto.Expertos[i].username);
                            objeto.Expertos[i].Count = count;
                        }

                        if (expertosActuales.Count() != objeto.Expertos.Count())
                        {
                            flagDistintoNumero = true;
                        }

                        objeto.Expertos.RemoveAll(x => x.Count >= 2);


                        foreach (ApplicationManagerCatalog a in expertosActuales)
                        {
                            ctx.ApplicationManagerCatalog.Remove(a);
                        }

                        foreach (ExpertoDto experto in objeto.Expertos)
                        {
                            //Validar experto
                            if (!string.IsNullOrEmpty(experto.email)
                            && !string.IsNullOrEmpty(experto.username)
                            && !string.IsNullOrEmpty(experto.managerName))
                            {
                                //Registrando rol
                                var nuevoRol = new ApplicationManagerCatalog()
                                {
                                    applicationId = entidad.applicationId,
                                    applicationManagerCatalogId = 0,
                                    applicationManagerId = (int)ApplicationManagerRole.Experto,
                                    createdBy = objeto.registerBy,
                                    dateCreation = DateTime.Now,
                                    email = experto.email,
                                    isActive = true,
                                    managerName = experto.managerName,
                                    username = experto.username
                                };
                                ctx.ApplicationManagerCatalog.Add(nuevoRol);

                                ctx.SaveChanges();
                            }
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        //Agregar registro en bitácora
                        try
                        {
                            if (objeto.userEntity != entidad2.userEntity || objeto.infrastructure != entidad2.infrastructure || objeto.replacementApplication.Trim().ToUpper() != entidad2.replacementApplication.Trim().ToUpper() ||
                               objeto.authorizationMethod != entidad2.authorizationMethod || objeto.authenticationMethod != entidad2.authenticationMethod ||
                               objeto.groupTicketRemedy != entidad2.groupTicketRemedy || objeto.webDomain.Trim().ToUpper() != entidad2.webDomain.Trim().ToUpper() ||
                               objeto.developmentProvider.Trim().ToUpper() != entidad2.developmentProvider.Trim().ToUpper() || objeto.developmentType != entidad2.developmentType || flagNuevaMatricula || flagDistintoNumero || nuevosPCI)
                            {
                                var BitacoraMensaje = "";
                                var dateAndTime = DateTime.Now;
                                string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                var hour = dateAndTime.ToString("HH:mm:ss");
                                BitacoraMensaje = "El solicitante " + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " +
                                    " modificó en la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " los campos:";

                                if (objeto.userEntity != entidad2.userEntity)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Entidad Usuaria - tenía el valor: " + getUserEntityName(entidad2.userEntity) +
                                        " Nuevo Valor: " + getUserEntityName(objeto.userEntity) + "  ";

                                    filas = filas + string.Format(formato, "Entidad Usuaria", getUserEntityName(entidad2.userEntity), getUserEntityName(objeto.userEntity));

                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.infrastructure != entidad2.infrastructure)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Infraestructura - tenía el valor: " + getInfraestructureName(entidad2.infrastructure) +
                                      " y fue reemplazado por el valor: " + getInfraestructureName(objeto.infrastructure) + "  ";

                                    filas = filas + string.Format(formato, "Infraestructura", getInfraestructureName(entidad2.infrastructure), getInfraestructureName(objeto.infrastructure));

                                    modificacionCamposPortafolio = true;
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.replacementApplication) || !string.IsNullOrWhiteSpace(entidad2.replacementApplication))
                                {
                                    if (objeto.replacementApplication != entidad2.replacementApplication)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Aplicación reemplazada - tenía el valor: " + (entidad2.replacementApplication == "" ? "Ningún valor" : entidad2.replacementApplication) +
                                        " y fue reemplazado por el valor: " + (objeto.replacementApplication == "" ? "Ningún valor" : objeto.replacementApplication) + "  ";

                                        filas = filas + string.Format(formato, "Aplicación reemplazada"
                                            , (entidad2.replacementApplication == "" ? "Ningún valor" : entidad2.replacementApplication)
                                            , (objeto.replacementApplication == "" ? "Ningún valor" : objeto.replacementApplication));

                                        modificacionCamposPortafolio = true;
                                    }
                                }


                                if (objeto.authorizationMethod != entidad2.authorizationMethod)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Método de autorización - tenía el valor: " + getParametricaDetalleName(entidad2.authorizationMethod) +
                                    " y fue reemplazado por el valor: " + getParametricaDetalleName(objeto.authorizationMethod) + "  ";

                                    filas = filas + string.Format(formato, "Método de autorización", getParametricaDetalleName(entidad2.authorizationMethod), getParametricaDetalleName(objeto.authorizationMethod));

                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.authenticationMethod != entidad2.authenticationMethod)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Método de Autenticación - tenía el valor: " + getParametricaDetalleName(entidad2.authenticationMethod) +
                                        " y fue reemplazado por el valor: " + getParametricaDetalleName(objeto.authenticationMethod) + "  ";

                                    filas = filas + string.Format(formato, "Método de Autenticación", getParametricaDetalleName(entidad2.authenticationMethod), getParametricaDetalleName(objeto.authenticationMethod));

                                    modificacionCamposPortafolio = true;
                                }

                                if (objeto.groupTicketRemedy != entidad2.groupTicketRemedy)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Grupo Ticket Remedy - tenía el valor: " + getGroupRemedyName(entidad2.groupTicketRemedy) +
                                        " y fue reemplazado por el valor: " + getGroupRemedyName(objeto.groupTicketRemedy) + "  ";

                                    filas = filas + string.Format(formato, "Grupo Ticket Remedy", getGroupRemedyName(entidad2.groupTicketRemedy), getGroupRemedyName(objeto.groupTicketRemedy));

                                    modificacionCamposPortafolio = true;
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.webDomain) || !string.IsNullOrWhiteSpace(entidad2.webDomain))
                                {
                                    if (objeto.webDomain != entidad2.webDomain)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - URL Dominio Web - tenía el valor: " + (entidad2.webDomain == "" ? "Ningún valor" : entidad2.webDomain) +
                                            " y fue reemplazado por el valor: " + (objeto.webDomain == "" ? "Ningún valor" : objeto.webDomain) + "  ";

                                        filas = filas + string.Format(formato, "URL Dominio Web", (entidad2.webDomain == "" ? "Ningún valor" : entidad2.webDomain), (objeto.webDomain == "" ? "Ningún valor" : objeto.webDomain));

                                        modificacionCamposPortafolio = true;
                                    }
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.webDomain) || !string.IsNullOrWhiteSpace(entidad2.webDomain))
                                {
                                    if (objeto.developmentProvider != entidad2.developmentProvider)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Proveedor de desarrollo - tenía el valor: " + (entidad2.developmentProvider == "" ? "Ningún valor" : entidad2.developmentProvider) +
                                            " y fue reemplazado por el valor: " + (objeto.developmentProvider == "" ? "Ningún valor" : objeto.developmentProvider) + "  ";

                                        filas = filas + string.Format(formato, "Proveedor de desarrollo", (entidad2.developmentProvider == "" ? "Ningún valor" : entidad2.developmentProvider), (objeto.developmentProvider == "" ? "Ningún valor" : objeto.developmentProvider));

                                        modificacionCamposPortafolio = true;
                                    }
                                }

                                if (objeto.developmentType != entidad2.developmentType)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Tipo de desarrollo - tenía el valor: " + getDevelopmentTypeName(entidad2.developmentType) +
                                        " y fue reemplazado por el valor: " + getDevelopmentTypeName(objeto.developmentType) + "  ";

                                    filas = filas + string.Format(formato, "Tipo de desarrollo", getDevelopmentTypeName(entidad2.developmentType), getDevelopmentTypeName(objeto.developmentType));

                                    modificacionCamposPortafolio = true;
                                }

                                if (flagNuevaMatricula || flagDistintoNumero)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Expertos: ";
                                    foreach (ExpertoDto a in objeto.Expertos)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + a.managerName + " (" + a.username + "),";
                                        filas = filas + string.Format(formato, "Experto", string.Empty, a.managerName + " (" + a.username + ")");
                                    }
                                    modificacionCamposPortafolio = true;
                                }

                                if (nuevosPCI)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - PCI DSS de: " + pciIniciales + "a:  ";

                                    if (objeto.TipoPCI != null)
                                    {
                                        foreach (int a in objeto.TipoPCI)
                                        {

                                            BitacoraMensaje = BitacoraMensaje + "" + getPCIName(a) + ",  ";
                                            filas = filas + string.Format(formato, "PCI DSS", string.Empty, getPCIName(a));

                                        }
                                    }
                                    else
                                    {
                                        BitacoraMensaje = BitacoraMensaje + "" + "Ninguno" + ",  ";
                                        filas = filas + string.Format(formato, "PCI DSS", string.Empty, "Ninguno");
                                    }


                                    modificacionCamposPortafolio = true;
                                }


                                BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                                var registroBitacora = new BitacoraAcciones()
                                {
                                    CodigoAPT = entidad.applicationId,
                                    DetalleBitacora = BitacoraMensaje,
                                    CreadoPor = objeto.Matricula,
                                    FechaCreacion = dateAndTime,
                                    NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                                };

                                ctx.BitacoraAcciones.Add(registroBitacora);
                                ctx.SaveChanges();
                            }
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        if (modificacionCamposPortafolio)
                        {
                            try
                            {
                                cuerpoCorreo = string.Format(tablaDetalle, filas);

                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[Campos]", cuerpoCorreo);

                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionActualizacionDatosNoRequeridosAprobacion, entidad.applicationId, diccionario, null, true);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        //LLAMAR A API JENKINS EN CASO LAS INFRAESTRUCTURAS SEAN LAS ADECUADAS
                        var objURL = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("INFRAESTRUCTURAS_JENKINS");
                        var ActivarJenkins = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("ACTIVAR_INTEGRACION_JENKINS");

                        var listInfraestructuras = getInfrastructureId(objURL.Valor);


                        if (listInfraestructuras.Contains(Convert.ToString(objeto.infrastructure)) && ActivarJenkins.Valor.ToUpper()=="TRUE".ToUpper())
                        {
                            CallPipelineJenkins(entidad.applicationId);
                        }



                        return dataResult;
                    }
                }
            }

            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override bool ExistsApplicationById(string id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    bool? estado = (from u in ctx.Application
                                    where u.applicationId.ToUpper().Equals(id.ToUpper())
                                    orderby u.applicationId
                                    select true).FirstOrDefault();

                    bool? estado2 = (from u in ctx.CodigoReservado
                                    where u.Codigo.ToUpper().Equals(id.ToUpper())
                                    orderby u.Codigo
                                     select true).FirstOrDefault();

                    if (estado == true || estado2 == true)
                        return true;
                    else return false;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationById(string id)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationById(string id)"
                    , new object[] { null });
            }
        }

        public override bool ExistsApplicationInterfaceById(string id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    bool? estado = (from u in ctx.Application
                                    where u.interfaceId.ToUpper().Equals(id.ToUpper())
                                    orderby u.applicationId
                                    select true).FirstOrDefault();

                    return estado == true;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationById(string id)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationById(string id)"
                    , new object[] { null });
            }
        }


        public override bool ExistsApplicationByName(string name)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    bool? estado = (from u in ctx.Application
                                    where u.applicationName.ToUpper().Equals(name.ToUpper())
                                    orderby u.applicationId
                                    select true).FirstOrDefault();

                    return estado == true;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationByName(string id)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationByName(string id)"
                    , new object[] { null });
            }
        }

        public override bool ExisteCodigoAPT(string codigo)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                  


                    bool? estado = (from u in ctx.Application
                                    where u.applicationId.ToUpper().Equals(codigo.ToUpper())
                                    orderby u.applicationId
                                    select true).FirstOrDefault();

                    bool? estado2 = (from u in ctx.CodigoReservado
                                     where u.Codigo.ToUpper().Equals(codigo.ToUpper())
                                     orderby u.Codigo
                                     select true).FirstOrDefault();

                    if (estado == true || estado2 == true)
                        return true;
                    else return false;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExisteCodigoAPT(string codigo)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExisteCodigoAPT(string codigo)"
                    , new object[] { null });
            }
        }

        public override bool ExisteCodigoInterfaz(string codigo)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    bool? estado = (from u in ctx.Application
                                    where u.interfaceId.ToUpper().Equals(codigo.ToUpper())
                                    orderby u.applicationId
                                    select true).FirstOrDefault();

                    bool? estado2 = (from u in ctx.CodigoReservado
                                     where u.Codigo.ToUpper().Equals(codigo.ToUpper())
                                     orderby u.Codigo
                                     select true).FirstOrDefault();

                    if (estado == true && estado2 == true)
                        return true;
                    else return false;

              
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExisteCodigoInterfaz(string codigo)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExisteCodigoInterfaz(string codigo)"
                    , new object[] { null });
            }
        }

        public override ApplicationDetail GetApplicationById(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.AppId == id
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        deploymentType = u.deploymentType,
                                        deploymentTypeOriginal = u.deploymentTypeOriginal,
                                        managed = u.managed,
                                        applicationName = u.applicationName,
                                        description = u.description,
                                        developmentProvider = u.developmentProvider,
                                        developmentType = u.developmentType,
                                        hasInterfaceId = u.hasInterfaceId,
                                        implementationType = u.implementationType,
                                        infrastructure = u.infrastructure,
                                        interfaceId = u.interfaceId,
                                        mainOffice = u.mainOffice,
                                        parentAPTCode = u.parentAPTCode,
                                        registerDate = u.registerDate,
                                        replacementApplication = u.replacementApplication,
                                        teamName = u.teamName,
                                        unit = u.unit,
                                        userEntity = u.userEntity,
                                        status = u.status,
                                        authenticationMethod = u.authenticationMethod,
                                        authorizationMethod = u.authorizationMethod,
                                        BIANdomain = u.BIANdomain,
                                        assetType = u.assetType,
                                        tobe = u.tobe,
                                        tierProduction = u.tierProduction,
                                        tierPreProduction = u.tierPreProduction,
                                        technicalClassification = u.technicalClassification,
                                        technicalSubclassification = u.technicalSubclassification,
                                        technologyCategory = u.technologyCategory,
                                        architecId = u.architectId,
                                        teamId = u.teamId,
                                        isFormalApplication = u.isFormalApplication,
                                        regularizationDate = u.regularizationDate,
                                        groupTicketRemedy = u.groupTicketRemedy,
                                        webDomain = u.webDomain,
                                        applicationCriticalityBIA = u.applicationCriticalityBIA,
                                        classification = u.classification,
                                        finalCriticality = u.finalCriticality,
                                        ProductoServicioRepresentativoName = u.starProduct,
                                        MenorRTOName = u.shorterApplicationResponseTime,
                                        MayorGradoInterrupcionName = u.highestDegreeInterruption,
                                        dateFirstRelease = u.dateFirstRelease,
                                        technicalSubClassification = u.technicalSubclassification,
                                        TIERProduccionName = u.tierProduction,
                                        TIERPreProduccionName = u.tierPreProduction,
                                        isApproved = u.isApproved,
                                        summaryStandard = u.summaryStandard,
                                        complianceLevel = u.complianceLevel,
                                        commentsObserved = u.commentsObserved,
                                    }).FirstOrDefault();

                    //Area y Dominio BIAN
                    if (registro != null)
                    {
                        var PCI = ctx.ApplicationPCI.Where(x => x.ApplicationId == registro.id && x.FlagActivo == true && x.FlagEliminado == false).ToList();
                        List<int?> Lista = new List<int?>();
                        if (PCI != null) {
                            foreach (ApplicationPCI a in PCI)
                            {
                                Lista.Add(a.TipoPCIId);
                            }
                            registro.TipoPCI = Lista;
                        }

                        var item = ctx.Unidad.FirstOrDefault(x => x.UnidadId == registro.unit);
                        if (item != null) { registro.AreaId = item.AreaId; }

                        var item2 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item2 != null) { registro.areaName = item2.Nombre; }

                        var item3 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item3 != null) { registro.DivisionId = item3.DivisionId; }

                        var item4 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item4 != null) { registro.divisionName = item4.Nombre; }

                        var item5 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item5 != null) { registro.GerenciaId = item5.GerenciaId; }

                        var item6 = ctx.Gerencia.FirstOrDefault(x => x.GerenciaId == registro.GerenciaId);
                        if (item6 != null) { registro.gerenciaName = item6.Nombre; }

                        var item7 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == registro.BIANdomain);
                        if (item7 != null) { registro.dominioBIANName = item7.Nombre; }

                        var item8 = ctx.TipoActivoInformacion.FirstOrDefault(x => x.TipoActivoInformacionId == registro.assetType);
                        if (item8 != null) { registro.tipoActivoName = item8.Nombre; }

                        var item9 = ctx.GrupoRemedy.FirstOrDefault(x => x.GrupoRemedyId == registro.groupTicketRemedy);
                        if (item9 != null) { registro.grupoTicketRemedyName = item9.Nombre; }

                        var item10 = ctx.Criticidad.FirstOrDefault(x => x.CriticidadId == registro.applicationCriticalityBIA);
                        if (item10 != null) { registro.criticidadBIANName = item10.DetalleCriticidad; }

                        var item14 = ctx.ClasificacionTecnica.FirstOrDefault(x => x.ClasificacionTecnicaId == registro.technicalClassification);
                        if (item14 != null) { registro.clasificacionTecnicaName = item14.Nombre; }

                        var item15 = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.SubClasificacionTecnicaId == registro.technicalSubClassification);
                        if (item15 != null) { registro.subClasificacionTecnicaName = item15.Nombre; }

                        var item16 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == registro.BIANdomain);
                        if (item16 != null) { registro.AreaBianId = item16.AreaBianId; }

                        var item17 = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == registro.AreaBianId);
                        if (item17 != null) { registro.areaBIANName = item17.Nombre; }

                        var item18 = ctx.JefaturaAti.FirstOrDefault(x => x.JefaturaAtiId == registro.mainOffice);
                        if (item18 != null) { registro.jefaturaATIName = item18.Nombre; }

                        var item19 = ctx.PlataformaBcp.FirstOrDefault(x => x.PlataformaBcpId == registro.tobe);
                        if (item19 != null) { registro.TOBEName = item19.Nombre; }

                        var item20 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == registro.technologyCategory);
                        if (item20 != null) { registro.categoriaTecnologicaName = item20.Valor; }

                        var item21 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 5);
                        if (item21 != null) { registro.liderUsuarioName = item21.managerName; }

                        var item22 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 3);
                        if (item22 != null) { registro.brokerName = item22.managerName; }

                        var item23 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 7);
                        if (item23 != null) { registro.tribeLeadName = item23.managerName; }

                        var item24 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 1);
                        if (item24 != null) { registro.technicalTribeLeadName = item24.managerName; }

                        var item25 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 2);
                        if (item25 != null) { registro.jefeEquipoName = item25.managerName; }

                        var item26 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 4);
                        if (item26 != null) { registro.liderUsuarioName = item26.managerName; }

                        var item27 = ctx.ApplicationFile.FirstOrDefault(x => x.ApplicationId == registro.id && x.FileType == (int)FileType.ArchivoDesestimacion);
                        if (item27 != null) { registro.NombreArchivoDesestimacion = item27.Nombre; }

                        var item28 = ctx.ApplicationFile.FirstOrDefault(x => x.ApplicationId == registro.id && x.FileType == (int)FileType.ArchivoSeguridad);
                        if (item28 != null) { registro.NombreArchivoSeguridad = item28.Nombre; }


                        if (registro.BIANdomain.HasValue)
                        {
                            var dominio = ServiceManager<ActivosDAO>.Provider.GetDominioBianById(registro.BIANdomain.Value);
                            registro.BIANarea = dominio.AreaBIANId;
                        }
                        else
                        {
                            registro.BIANarea = -1;
                            registro.BIANdomain = -1;
                        }

                        if (registro.unit.HasValue)
                        {
                            var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(registro.unit.Value);
                            registro.unitDetail = unidad != null ? unidad.Nombre : string.Empty;
                        }

                        var experto = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.isActive == true && x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto);
                        if (experto != null)
                        {
                            registro.expertEmail = experto.email;
                            registro.expertId = experto.username;
                            registro.expertName = experto.managerName;
                        }

                        var usuarioAutorizador = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.isActive == true && x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador);
                        if (usuarioAutorizador != null)
                        {
                            registro.authorizedEmail = usuarioAutorizador.email;
                            registro.authorizedId = usuarioAutorizador.username;
                            registro.authorizedName = usuarioAutorizador.managerName;
                        }

                        if (!string.IsNullOrWhiteSpace(registro.parentAPTCode))
                        {
                            var appPadre = ctx.Application.FirstOrDefault(x => x.applicationId == registro.parentAPTCode);
                            if (appPadre != null)
                            {
                                registro.parentAPTCodeName = appPadre.applicationName;
                            }
                        }

                        if (!string.IsNullOrWhiteSpace(registro.replacementApplication))
                        {
                            var appReemplazo = ctx.Application.FirstOrDefault(x => x.applicationId == registro.replacementApplication);
                            if (appReemplazo != null)
                                registro.replacementApplicationName = appReemplazo.applicationName;
                        }

                        //Validar si el arquitecto evaluador aprobó la solicitud
                        var aprobacionEvaluador = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador && x.AppId == registro.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                        registro.hasArchitectEvalApproved = (aprobacionEvaluador != null);

                        //Validar si el usuario devsecops aprobó la solicitud
                        var aprobacionDevSecOps = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.DevSecOps && x.AppId == registro.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                        registro.hasDevSecOpsApproved = (aprobacionDevSecOps != null);

                        //Validar si GobiernoUserIT aprobó la solicitud
                        var aprobacionGobiernoUserIT = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT && x.AppId == registro.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                        registro.hasGobUserITApproved = (aprobacionGobiernoUserIT != null);

                        //Validar si el Owner aprobó la solicitud
                        var aprobacionOwner = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.Owner && x.AppId == registro.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                        registro.hasOwnerApproved = (aprobacionOwner != null);

                        //Validacion para ver si la URL se puede modificar en base a la categoría tecnológica
                        var parametroCategoriaWeb = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "VALOR_TIPO_WEB");
                        if (parametroCategoriaWeb != null)
                        {
                            var parametricaWeb = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaId == 2 && x.Descripcion == "Categoria tecnologica" && x.Valor == parametroCategoriaWeb.Valor);
                            if (parametroCategoriaWeb != null)
                            {
                                registro.hasWeb = (parametricaWeb.ParametricaDetalleId == registro.technologyCategory);
                            }
                        }

                        var parametroAplicacionProduccion = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "VALOR_APLICACION_PRODUCCION");
                        if (parametroAplicacionProduccion != null)
                        {
                            var parametricaProduccion = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaId == 2 && x.Descripcion == "Tipo de implementacion" && x.Valor == parametroAplicacionProduccion.Valor);
                            if (parametricaProduccion != null)
                            {
                                registro.IdAplicacionProduccion = parametricaProduccion.ParametricaDetalleId;
                            }
                        }

                        var parametroTipoActivoIDTTactico = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "TIPO_ACTIVO_IDT_TACTICO");
                        if (parametroTipoActivoIDTTactico != null)
                        {
                            var parametricaIDTTactico = ctx.TipoActivoInformacion.FirstOrDefault(x => x.Nombre == parametroTipoActivoIDTTactico.Valor && x.FlagActivo);
                            if (parametricaIDTTactico != null)
                            {
                                registro.IdTIpoActivoIDTTactico = parametricaIDTTactico.TipoActivoInformacionId;
                            }
                        }

                    }

                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override SolicitudDto GetSolicitudById(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.ApplicationFlow
                                    join u2 in ctx.Solicitud on u.SolicitudAplicacionId equals u2.SolicitudAplicacionId
                                    where u.FlowAppId == id
                                    select new SolicitudDto()
                                    {
                                        TicketEliminacion = u2.TicketEliminacion,
                                        ExpertoNombre = u2.ExpertoNombre,
                                        FlagRequiereConformidad = u2.FlagRequiereConformidad,
                                        Observaciones = u2.Observaciones,
                                        TipoSolicitud = u2.TipoSolicitud,
                                        EstadoSolicitud = u2.EstadoSolicitud,
                                        Id = u2.SolicitudAplicacionId,
                                        FechaAprobacion = u2.FechaAprobacion,
                                        NombreUsuarioAprobacion = u2.NombreUsuarioAprobacion,
                                        ObservacionesRechazo = u2.ObservacionesRechazo,
                                        FechaModificacion = u2.FechaModificacion,
                                        NombreUsuarioModificacion = u2.NombreUsuarioModificacion,
                                        TipoEliminacion = u2.TipoEliminacion

                                    }).FirstOrDefault();

                    var item = ctx.SolicitudArchivos.FirstOrDefault(x => x.IdSolicitud == registro.Id);
                    if (item != null)
                    {
                        registro.NombreConformidadGST = item.NombreConformidadGST;
                        registro.NombreTicketEliminacion = item.NombreTicketEliminacion;
                        registro.NombreRatificacion = item.NombreRatificacion;
                    }

                    return registro;
                }
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override SolicitudDto GetSolicitudById2(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (
                                    from u2 in ctx.Solicitud
                                    where u2.SolicitudAplicacionId == id
                                    select new SolicitudDto()
                                    {
                                        TipoEliminacion = u2.TipoEliminacion,
                                        TicketEliminacion = u2.TicketEliminacion,
                                        ExpertoNombre = u2.ExpertoNombre,
                                        FlagRequiereConformidad = u2.FlagRequiereConformidad,
                                        Observaciones = u2.Observaciones,
                                        TipoSolicitud = u2.TipoSolicitud,
                                        EstadoSolicitud = u2.EstadoSolicitud,
                                        Id = u2.SolicitudAplicacionId,
                                        FechaAprobacion = u2.FechaAprobacion,
                                        NombreUsuarioAprobacion = u2.NombreUsuarioAprobacion,
                                        ObservacionesRechazo = string.IsNullOrEmpty(u2.ObservacionesRechazo) ? u2.ObservacionesAprobacion : u2.ObservacionesRechazo,
                                        FechaModificacion = u2.FechaModificacion,
                                        NombreUsuarioModificacion = u2.NombreUsuarioModificacion,
                                        AplicacionId = u2.AplicacionId
                                    }).FirstOrDefault();

                    if (registro != null)
                    {
                        var item = ctx.SolicitudArchivos.FirstOrDefault(x => x.IdSolicitud == registro.Id);
                        if (item != null)
                        {
                            registro.NombreConformidadGST = item.NombreConformidadGST;
                            registro.NombreTicketEliminacion = item.NombreTicketEliminacion;
                            registro.NombreRatificacion = item.NombreRatificacion;
                        }

                        var app = ctx.Application.FirstOrDefault(x => x.AppId == registro.AplicacionId);
                        if (app != null)
                        {
                            var unidad = ctx.Unidad.FirstOrDefault(x => x.UnidadId == app.unit);
                            if (unidad != null)
                            {
                                registro.LiderUsuario_PO = unidad.Responsable;
                            }
                        }
                    }


                    return registro;
                }

            }


            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override ApplicationDetail GetApplicationById2(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.InitialApplication
                                    where u.AppId == id
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        deploymentType = u.deploymentType,
                                        deploymentTypeOriginal = u.deploymentTypeOriginal,
                                        managed = u.managed,
                                        applicationName = u.applicationName,
                                        description = u.description,
                                        developmentProvider = u.developmentProvider,
                                        developmentType = u.developmentType,
                                        hasInterfaceId = u.hasInterfaceId,
                                        implementationType = u.implementationType,
                                        infrastructure = u.infrastructure,
                                        interfaceId = u.interfaceId,
                                        mainOffice = u.mainOffice,
                                        parentAPTCode = u.parentAPTCode,
                                        registerDate = u.registerDate,
                                        replacementApplication = u.replacementApplication,
                                        teamName = u.teamName,
                                        unit = u.unit,
                                        userEntity = u.userEntity,
                                        status = u.status,
                                        authenticationMethod = u.authenticationMethod,
                                        authorizationMethod = u.authorizationMethod,
                                        BIANdomain = u.BIANdomain,
                                        assetType = u.assetType,
                                        tobe = u.tobe,
                                        tierProduction = u.tierProduction,
                                        tierPreProduction = u.tierPreProduction,
                                        technicalClassification = u.technicalClassification,
                                        technicalSubclassification = u.technicalSubclassification,
                                        technologyCategory = u.technologyCategory,
                                        architecId = u.architectId,
                                        teamId = u.teamId,
                                        isFormalApplication = u.isFormalApplication,
                                        regularizationDate = u.regularizationDate,
                                        groupTicketRemedy = u.groupTicketRemedy,
                                        webDomain = u.webDomain,
                                        applicationCriticalityBIA = u.applicationCriticalityBIA,
                                        classification = u.classification,
                                        finalCriticality = u.finalCriticality,
                                        ProductoServicioRepresentativoName = u.starProduct,
                                        MenorRTOName = u.shorterApplicationResponseTime,
                                        MayorGradoInterrupcionName = u.highestDegreeInterruption,
                                        dateFirstRelease = u.dateFirstRelease,
                                        technicalSubClassification = u.technicalSubclassification,
                                        TIERProduccionName = u.tierProduction,
                                        TIERPreProduccionName = u.tierPreProduction,
                                        isApproved = u.isApproved,
                                        summaryStandard = u.summaryStandard,
                                        complianceLevel = u.complianceLevel,
                                        commentsObserved = u.commentsObserved,
                                        registerBy = u.registerBy
                                    }).FirstOrDefault();

                    //Area y Dominio BIAN
                    if (registro != null)
                    {
                        var item = ctx.Unidad.FirstOrDefault(x => x.UnidadId == registro.unit);
                        if (item != null) { registro.AreaId = item.AreaId; }

                        var item2 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item2 != null) { registro.areaName = item2.Nombre; }

                        var item3 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item3 != null) { registro.DivisionId = item3.DivisionId; }

                        var item4 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item4 != null) { registro.divisionName = item4.Nombre; }

                        var item5 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item5 != null) { registro.GerenciaId = item5.GerenciaId; }

                        var item6 = ctx.Gerencia.FirstOrDefault(x => x.GerenciaId == registro.GerenciaId);
                        if (item6 != null) { registro.gerenciaName = item6.Nombre; }

                        var item7 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == registro.BIANdomain);
                        if (item7 != null) { registro.dominioBIANName = item7.Nombre; }

                        var item8 = ctx.TipoActivoInformacion.FirstOrDefault(x => x.TipoActivoInformacionId == registro.assetType);
                        if (item8 != null) { registro.tipoActivoName = item8.Nombre; }

                        var item9 = ctx.GrupoRemedy.FirstOrDefault(x => x.GrupoRemedyId == registro.groupTicketRemedy);
                        if (item9 != null) { registro.grupoTicketRemedyName = item9.Nombre; }

                        var item10 = ctx.Criticidad.FirstOrDefault(x => x.CriticidadId == registro.applicationCriticalityBIA);
                        if (item10 != null) { registro.criticidadBIANName = item10.DetalleCriticidad; }

                        var item14 = ctx.ClasificacionTecnica.FirstOrDefault(x => x.ClasificacionTecnicaId == registro.technicalClassification);
                        if (item14 != null) { registro.clasificacionTecnicaName = item14.Nombre; }

                        var item15 = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.SubClasificacionTecnicaId == registro.technicalSubClassification);
                        if (item15 != null) { registro.subClasificacionTecnicaName = item15.Nombre; }

                        var item16 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == registro.BIANdomain);
                        if (item16 != null) { registro.AreaBianId = item16.AreaBianId; }

                        var item17 = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == registro.AreaBianId);
                        if (item17 != null) { registro.areaBIANName = item17.Nombre; }

                        var item18 = ctx.JefaturaAti.FirstOrDefault(x => x.JefaturaAtiId == registro.mainOffice);
                        if (item18 != null) { registro.jefaturaATIName = item18.Nombre; }

                        var item19 = ctx.PlataformaBcp.FirstOrDefault(x => x.PlataformaBcpId == registro.tobe);
                        if (item19 != null) { registro.TOBEName = item19.Nombre; }

                        var item20 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == registro.technologyCategory);
                        if (item20 != null) { registro.categoriaTecnologicaName = item20.Valor; }

                        var item21 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 5);
                        if (item21 != null) { registro.liderUsuarioName = item21.managerName; }

                        var item22 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 3);
                        if (item22 != null) { registro.brokerName = item22.managerName; }

                        var item23 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 7);
                        if (item23 != null) { registro.tribeLeadName = item23.managerName; }

                        var item24 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 1);
                        if (item24 != null) { registro.technicalTribeLeadName = item24.managerName; }

                        var item25 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 2);
                        if (item25 != null) { registro.jefeEquipoName = item25.managerName; }

                        var item26 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == registro.applicationId && x.applicationManagerId == 4);
                        if (item26 != null) { registro.liderUsuarioName = item26.managerName; }

                        var item27 = ctx.ApplicationFile.FirstOrDefault(x => x.ApplicationId == registro.id && x.FileType == (int)FileType.ArchivoDesestimacion);
                        if (item27 != null) { registro.NombreArchivoDesestimacion = item27.Nombre; }

                        var item28 = ctx.ApplicationFile.FirstOrDefault(x => x.ApplicationId == registro.id && x.FileType == (int)FileType.ArchivoSeguridad);
                        if (item28 != null) { registro.NombreArchivoSeguridad = item28.Nombre; }


                        if (registro.BIANdomain.HasValue)
                        {
                            var dominio = ServiceManager<ActivosDAO>.Provider.GetDominioBianById(registro.BIANdomain.Value);
                            registro.BIANarea = dominio.AreaBIANId;
                        }
                        else
                        {
                            registro.BIANarea = -1;
                            registro.BIANdomain = -1;
                        }

                        if (registro.unit.HasValue)
                        {
                            var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(registro.unit.Value);
                            registro.unitDetail = unidad != null ? unidad.Nombre : string.Empty;
                        }

                        //var experto = ctx.InitialApplicationManagerCatalog.FirstOrDefault(x => x.isActive && x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto);
                        var experto = (from u in ctx.InitialApplicationManagerCatalog
                                       where u.isActive == true
                                       && u.applicationId == registro.applicationId
                                       && u.applicationManagerId == (int)ApplicationManagerRole.Experto
                                       select new
                                       {
                                           u.email,
                                           u.username,
                                           u.managerName
                                       }).FirstOrDefault();
                        if (experto != null)
                        {
                            registro.expertEmail = experto.email;
                            registro.expertId = experto.username;
                            registro.expertName = experto.managerName;
                        }

                        //var usuarioAutorizador = ctx.InitialApplicationManagerCatalog.FirstOrDefault(x => x.isActive && x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador);
                        var usuarioAutorizador = (from u in ctx.InitialApplicationManagerCatalog
                                                  where u.isActive == true
                                                  && u.applicationId == registro.applicationId
                                                  && u.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador
                                                  select new
                                                  {
                                                      u.email,
                                                      u.username,
                                                      u.managerName
                                                  }).FirstOrDefault();
                        if (usuarioAutorizador != null)
                        {
                            registro.authorizedEmail = usuarioAutorizador.email;
                            registro.authorizedId = usuarioAutorizador.username;
                            registro.authorizedName = usuarioAutorizador.managerName;
                        }

                        //var solicitante = ctx.InitialApplicationManagerCatalog.FirstOrDefault(x => x.isActive && x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Solicitante);
                        var solicitante = (from u in ctx.InitialApplicationManagerCatalog
                                           where u.isActive == true
                                           && u.applicationId == registro.applicationId
                                           && u.applicationManagerId == (int)ApplicationManagerRole.Solicitante
                                           select new
                                           {
                                               u.email,
                                               u.username,
                                               u.managerName
                                           }).FirstOrDefault();
                        if (solicitante != null)
                        {
                            registro.SolicitanteDetail = solicitante.managerName;
                        }

                        if (!string.IsNullOrWhiteSpace(registro.parentAPTCode))
                        {
                            var appPadre = ctx.Application.FirstOrDefault(x => x.applicationId == registro.parentAPTCode);
                            if (appPadre != null)
                            {
                                registro.parentAPTCodeName = appPadre.applicationName;
                            }
                        }

                        if (!string.IsNullOrWhiteSpace(registro.replacementApplication))
                        {
                            var appReemplazo = ctx.Application.FirstOrDefault(x => x.applicationId == registro.replacementApplication);
                            if (appReemplazo != null)
                                registro.replacementApplicationName = appReemplazo.applicationName;
                        }

                        //Validar si el arquitecto evaluador aprobó la solicitud
                        var aprobacionEvaluador = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador && x.AppId == registro.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                        registro.hasArchitectEvalApproved = (aprobacionEvaluador != null);

                        //Validar si el usuario devsecops aprobó la solicitud
                        var aprobacionDevSecOps = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.DevSecOps && x.AppId == registro.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                        registro.hasDevSecOpsApproved = (aprobacionDevSecOps != null);
                    }

                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationDetail> GetApplicationList(PaginacionAplicacion pag, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.isActive == true && u.isApproved == true
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        deploymentType = u.deploymentType,
                                        managed = u.managed,
                                        applicationName = u.applicationName,
                                        description = u.description,
                                        developmentProvider = u.developmentProvider,
                                        developmentType = u.developmentType,
                                        hasInterfaceId = u.hasInterfaceId,
                                        implementationType = u.implementationType,
                                        infrastructure = u.infrastructure,
                                        interfaceId = u.interfaceId,
                                        mainOffice = u.mainOffice,
                                        parentAPTCode = u.parentAPTCode,
                                        registerDate = u.registerDate,
                                        replacementApplication = u.replacementApplication,
                                        teamName = u.teamName,
                                        unit = u.unit,
                                        userEntity = u.userEntity,
                                        status = u.status,
                                        authenticationMethod = u.authenticationMethod,
                                        authorizationMethod = u.authorizationMethod,
                                        BIANdomain = u.BIANdomain,
                                        assetType = u.assetType,
                                        tobe = u.tobe,
                                        tierProduction = u.tierProduction,
                                        tierPreProduction = u.tierPreProduction,
                                        technicalClassification = u.technicalClassification,
                                        technicalSubclassification = u.technicalSubclassification,
                                        technologyCategory = u.technologyCategory,
                                        architecId = u.architectId,
                                        teamId = u.teamId,
                                        isFormalApplication = u.isFormalApplication,
                                        regularizationDate = u.regularizationDate,
                                        groupTicketRemedy = u.groupTicketRemedy,
                                        webDomain = u.webDomain,
                                        applicationCriticalityBIA = u.applicationCriticalityBIA,
                                        classification = u.classification,
                                        ProductoServicioRepresentativoName = u.starProduct,
                                        MenorRTOName = u.shorterApplicationResponseTime,
                                        MayorGradoInterrupcionName = u.highestDegreeInterruption,
                                        dateFirstRelease = u.dateFirstRelease,
                                        technicalSubClassification = u.technicalSubclassification,
                                        TIERProduccionName = u.tierProduction,
                                        TIERPreProduccionName = u.tierPreProduction,
                                        isApproved = u.isApproved
                                    }).OrderBy(pag.sortName + " " + pag.sortOrder).ToList();

                    //Area y Dominio BIAN
                    if (registro != null)
                    {
                        foreach (ApplicationDetail app in registro)
                        {
                            var item = ctx.Unidad.FirstOrDefault(x => x.UnidadId == app.unit);
                            if (item != null) { app.AreaId = item.AreaId; }

                            var item2 = ctx.Area.FirstOrDefault(x => x.AreaId == app.AreaId);
                            if (item2 != null) { app.areaName = item2.Nombre; }

                            var item3 = ctx.Area.FirstOrDefault(x => x.AreaId == app.AreaId);
                            if (item3 != null) { app.DivisionId = item3.DivisionId; }

                            var item4 = ctx.Division.FirstOrDefault(x => x.DivisionId == app.DivisionId);
                            if (item4 != null) { app.divisionName = item4.Nombre; }

                            var item5 = ctx.Division.FirstOrDefault(x => x.DivisionId == app.DivisionId);
                            if (item5 != null) { app.GerenciaId = item5.GerenciaId; }

                            var item6 = ctx.Gerencia.FirstOrDefault(x => x.GerenciaId == app.GerenciaId);
                            if (item6 != null) { app.gerenciaName = item6.Nombre; }

                            var item7 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == app.BIANdomain);
                            if (item7 != null) { app.dominioBIANName = item7.Nombre; }

                            var item8 = ctx.TipoActivoInformacion.FirstOrDefault(x => x.TipoActivoInformacionId == app.assetType);
                            if (item8 != null) { app.tipoActivoName = item8.Nombre; }

                            var item9 = ctx.GrupoRemedy.FirstOrDefault(x => x.GrupoRemedyId == app.groupTicketRemedy);
                            if (item9 != null) { app.grupoTicketRemedyName = item9.Nombre; }

                            var item10 = ctx.Criticidad.FirstOrDefault(x => x.CriticidadId == app.applicationCriticalityBIA);
                            if (item10 != null) { app.criticidadBIANName = item10.DetalleCriticidad; }

                            var item14 = ctx.ClasificacionTecnica.FirstOrDefault(x => x.ClasificacionTecnicaId == app.technicalClassification);
                            if (item14 != null) { app.clasificacionTecnicaName = item14.Nombre; }

                            var item15 = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.SubClasificacionTecnicaId == app.technicalSubClassification);
                            if (item15 != null) { app.subClasificacionTecnicaName = item15.Nombre; }

                            var item16 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == app.BIANdomain);
                            if (item16 != null) { app.AreaBianId = item16.AreaBianId; }

                            var item17 = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == app.AreaBianId);
                            if (item17 != null) { app.areaBIANName = item16.Nombre; }

                            var item18 = ctx.JefaturaAti.FirstOrDefault(x => x.JefaturaAtiId == app.mainOffice);
                            if (item18 != null) { app.jefaturaATIName = item18.Nombre; }

                            var item19 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.tobe);
                            if (item19 != null) { app.TOBEName = item19.Valor; }

                            var item20 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.technologyCategory);
                            if (item20 != null) { app.categoriaTecnologicaName = item20.Valor; }

                            var item21 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == app.applicationId && x.applicationManagerId == 5);
                            if (item21 != null) { app.liderUsuarioName = item21.managerName; }

                            var item22 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == app.applicationId && x.applicationManagerId == 3);
                            if (item22 != null) { app.brokerName = item22.managerName; }

                            var item23 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == app.applicationId && x.applicationManagerId == 7);
                            if (item23 != null) { app.tribeLeadName = item23.managerName; }

                            var item24 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == app.applicationId && x.applicationManagerId == 1);
                            if (item24 != null) { app.technicalTribeLeadName = item24.managerName; }

                            var item25 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == app.applicationId && x.applicationManagerId == 2);
                            if (item25 != null) { app.jefeEquipoName = item25.managerName; }

                            var item26 = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == app.applicationId && x.applicationManagerId == 4);
                            if (item26 != null) { app.liderUsuarioName = item26.managerName; }

                            var item27 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.authorizationMethod);
                            if (item27 != null) { app.authorizationMethodName = item27.Valor; }

                            var item28 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.authenticationMethod);
                            if (item28 != null) { app.authenticationMethodName = item28.Valor; }

                            var item29 = ctx.ArquitectoTI.FirstOrDefault(x => x.ArquitectoTIId == app.architecId);
                            if (item29 != null) { app.architectName = item29.Nombre; }

                            var item30 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.deploymentType);
                            if (item30 != null) { app.deploymentTypeName = item30.Valor; }

                            var item31 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == app.userEntity);
                            if (item31 != null) { app.userEntityName = item31.Valor; }

                            if (app.status.HasValue)
                            {
                                string item32 = Utilitarios.GetEnumDescription2((ApplicationState)app.status.Value);
                                if (item32 != null) { app.statusName = item32; }
                            }
                            else
                            {
                                app.statusName = Utilitarios.GetEnumDescription2(ApplicationState.EnDesarrollo);
                            }


                            var item33 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.implementationType);
                            if (item33 != null) { app.implementationTypeName = item33.Valor; }


                            var item34 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == app.developmentType);
                            if (item34 != null) { app.developmentTypeName = item34.Valor; }


                            var item35 = ctx.Unidad.FirstOrDefault(x => x.UnidadId == app.unit);
                            if (item35 != null) { app.unitName = item35.Nombre; }

                            var item36 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.infrastructure);
                            if (item36 != null) { app.infrastructureName = item36.Valor; }

                            var item37 = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == app.managed);
                            if (item37 != null) { app.managedName = item37.Nombre; }

                            if (app.BIANdomain.HasValue)
                            {
                                var dominio = ServiceManager<ActivosDAO>.Provider.GetDominioBianById(app.BIANdomain.Value);
                                app.BIANarea = dominio.AreaBIANId;
                            }
                            else
                            {
                                app.BIANarea = -1;
                                app.BIANdomain = -1;
                            }

                            if (app.unit.HasValue)
                            {
                                var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(app.unit.Value);
                                app.unitDetail = unidad != null ? unidad.Nombre : string.Empty;
                            }

                            var experto = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.isActive && x.applicationId == app.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto);
                            if (experto != null)
                            {
                                app.expertEmail = experto.email;
                                app.expertId = experto.username;
                                app.expertName = experto.managerName;
                            }

                            var usuarioAutorizador = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.isActive && x.applicationId == app.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador);
                            if (usuarioAutorizador != null)
                            {
                                app.authorizedEmail = usuarioAutorizador.email;
                                app.authorizedId = usuarioAutorizador.username;
                                app.authorizedName = usuarioAutorizador.managerName;
                            }

                            if (!string.IsNullOrWhiteSpace(app.parentAPTCode))
                            {
                                var appPadre = ctx.Application.FirstOrDefault(x => x.applicationId == app.parentAPTCode);
                                if (appPadre != null)
                                {
                                    app.parentAPTCodeName = appPadre.applicationName;
                                }
                            }

                            if (!string.IsNullOrWhiteSpace(app.replacementApplication))
                            {
                                var appReemplazo = ctx.Application.FirstOrDefault(x => x.applicationId == app.replacementApplication);
                                if (appReemplazo != null)
                                    app.replacementApplicationName = appReemplazo.applicationName;
                            }

                            //Validar si el arquitecto evaluador aprobó la solicitud
                            var aprobacionEvaluador = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador && x.AppId == app.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                            app.hasArchitectEvalApproved = (aprobacionEvaluador != null);

                            //Validar si el usuario devsecops aprobó la solicitud
                            var aprobacionDevSecOps = ctx.ApplicationFlow.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.DevSecOps && x.AppId == app.id && x.isActive.Value && x.isCompleted.Value && x.isApproved.Value);
                            app.hasDevSecOpsApproved = (aprobacionDevSecOps != null);
                        }
                    }
                    totalRows = registro.Count();
                    var resultado = registro.Skip((pag.pageNumber - 1) * pag.pageSize).Take(pag.pageSize).ToList();
                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override ApplicationDetail GetApplicationUnidadById(int id, int UnidadiD)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.AppId == id
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        unit = u.unit,


                                    }).FirstOrDefault();


                    if (registro != null)
                    {

                        var item = ctx.Unidad.FirstOrDefault(x => x.UnidadId == UnidadiD);
                        if (item != null)
                        {
                            registro.AreaId = item.AreaId;
                            registro.ResponsableUnidad = item.Responsable;
                            registro.ResponsableUnidadMatricula = item.ResponsableMatricula;
                            registro.ResponsableUnidadEmail = item.ResponsableCorreo;
                            registro.unidadName = item.Nombre;
                        }

                        var item2 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item2 != null) { registro.areaName = item2.Nombre; }

                        var item3 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item3 != null) { registro.DivisionId = item3.DivisionId; }

                        var item4 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item4 != null) { registro.divisionName = item4.Nombre; }

                        var item5 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item5 != null) { registro.GerenciaId = item5.GerenciaId; }

                        var item6 = ctx.Gerencia.FirstOrDefault(x => x.GerenciaId == registro.GerenciaId);
                        if (item6 != null) { registro.gerenciaName = item6.Nombre; }




                    }

                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override ApplicationDetail GetApplicationOwnerById(int id, string responsable)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.AppId == id
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        unit = u.unit,


                                    }).FirstOrDefault();


                    if (registro != null)
                    {

                        //var item = ctx.Unidad.FirstOrDefault(x => x.UnidadId == UnidadiD);
                        var item = ctx.Unidad.FirstOrDefault(x => x.Responsable == responsable);
                        if (item != null) { registro.unidadName = item.Nombre;
                            registro.unit = item.UnidadId;
                        }
                        if (item != null)
                        {
                            registro.AreaId = item.AreaId;
                            registro.ResponsableUnidad = item.Responsable;
                            registro.ResponsableUnidadMatricula = item.ResponsableMatricula;
                            registro.ResponsableUnidadEmail = item.ResponsableCorreo;
                        }

                        var item2 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item2 != null) { registro.areaName = item2.Nombre; }

                        var item3 = ctx.Area.FirstOrDefault(x => x.AreaId == registro.AreaId);
                        if (item3 != null) { registro.DivisionId = item3.DivisionId; }

                        var item4 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item4 != null) { registro.divisionName = item4.Nombre; }

                        var item5 = ctx.Division.FirstOrDefault(x => x.DivisionId == registro.DivisionId);
                        if (item5 != null) { registro.GerenciaId = item5.GerenciaId; }

                        var item6 = ctx.Gerencia.FirstOrDefault(x => x.GerenciaId == registro.GerenciaId);
                        if (item6 != null) { registro.gerenciaName = item6.Nombre; }




                    }

                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<CustomAutocompleteApplication> GetUnidadesOwnerById( string responsable)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Unidad
                                    where u.Responsable.ToUpper() == responsable.ToUpper()
                                    select new CustomAutocompleteApplication()
                                    {
                                        Id = u.UnidadId.ToString(),
                                        Descripcion = u.Nombre,
                                        Value = u.UnidadId.ToString()


                                    }).ToList();



                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }



        public override ApplicationDetail GetApplicationJefaturaATIById(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.ArquitectoTI
                                    where u.ArquitectoTIId == id
                                    select new ApplicationDetail()
                                    {
                                        id = u.JefaturaAtiId


                                    }).FirstOrDefault();


                    if (registro != null)
                    {

                        var item = ctx.JefaturaAti.FirstOrDefault(x => x.JefaturaAtiId == registro.id);
                        if (item != null)
                        {
                            registro.jefaturaATIName = item.Nombre;
                            registro.mainOffice = item.JefaturaAtiId;

                        }


                    }

                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override ApplicationDetail GetFullApplicationById(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application

                                        //Nombre Arquitecto
                                    join a in ctx.ArquitectoTI
                                    on u.architectId equals a.ArquitectoTIId

                                    join d in ctx.GestionadoPor
                                    on u.managed equals d.GestionadoPorId

                                    where u.AppId == id
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        deploymentType = u.deploymentType,
                                        managed = u.managed,
                                        applicationName = u.applicationName,
                                        description = u.description,
                                        developmentProvider = u.developmentProvider,
                                        developmentType = u.developmentType,
                                        hasInterfaceId = u.hasInterfaceId,
                                        implementationType = u.implementationType,
                                        infrastructure = u.infrastructure,
                                        interfaceId = u.interfaceId,
                                        mainOffice = u.mainOffice,
                                        parentAPTCode = u.parentAPTCode,
                                        registerDate = u.registerDate,
                                        replacementApplication = u.replacementApplication,
                                        teamName = u.teamName,
                                        unit = u.unit,
                                        userEntity = u.userEntity,
                                        status = u.status,
                                        authenticationMethod = u.authenticationMethod,
                                        authorizationMethod = u.authorizationMethod,
                                        BIANdomain = u.BIANdomain,
                                        assetType = u.assetType,
                                        tobe = u.tobe,
                                        tierProduction = u.tierProduction,
                                        tierPreProduction = u.tierPreProduction,
                                        technicalClassification = u.technicalClassification,
                                        technicalSubclassification = u.technicalSubclassification,
                                        technologyCategory = u.technologyCategory,
                                        architecId = u.architectId,
                                        teamId = u.teamId,
                                        architectName = a.Nombre,
                                        managedName = d.Nombre

                                    }).FirstOrDefault();



                    //Area y Dominio BIAN
                    if (registro != null)
                    {
                        var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == registro.deploymentType);
                        if (item != null) { registro.deploymentTypeName = item.Valor; }

                        var item2 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == registro.userEntity);
                        if (item2 != null) { registro.userEntityName = item2.Valor; }

                        string item3 = Utilitarios.GetEnumDescription2((ApplicationState)registro.status);
                        if (item3 != null) { registro.statusName = item3; }

                        var item4 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == registro.implementationType);
                        if (item4 != null) { registro.implementationTypeName = item4.Valor; }


                        var item5 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == registro.developmentType);
                        if (item5 != null) { registro.developmentTypeName = item5.Valor; }


                        var item6 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == registro.infrastructure);
                        if (item6 != null) { registro.infrastructureName = item6.Valor; }

                        var item7 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == registro.authenticationMethod);
                        if (item7 != null) { registro.authenticationMethodName = item7.Valor; }

                        var item8 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == registro.authorizationMethod);
                        if (item8 != null) { registro.authorizationMethodName = item8.Valor; }

                        var item9 = ctx.Unidad.FirstOrDefault(x => x.UnidadId == registro.unit);
                        if (item9 != null) { registro.unitName = item9.Nombre; }

                        if (registro.BIANdomain.HasValue)
                        {
                            var dominio = ServiceManager<ActivosDAO>.Provider.GetDominioBianById(registro.BIANdomain.Value);
                            registro.BIANarea = dominio.AreaBIANId;
                        }
                        else
                        {
                            registro.BIANarea = -1;
                            registro.BIANdomain = -1;
                        }

                        if (registro.unit.HasValue)
                        {
                            var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(registro.unit.Value);
                            registro.unitDetail = unidad != null ? unidad.Nombre : string.Empty;
                        }

                        var experto = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.isActive && x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto);
                        if (experto != null)
                        {
                            registro.expertEmail = experto.email;
                            registro.expertId = experto.username;
                            registro.expertName = experto.managerName;
                        }

                        var usuarioAutorizador = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.isActive && x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador);
                        if (usuarioAutorizador != null)
                        {
                            registro.authorizedEmail = usuarioAutorizador.email;
                            registro.authorizedId = usuarioAutorizador.username;
                            registro.authorizedName = usuarioAutorizador.managerName;
                        }
                    }

                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetApplicationByUser(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     join u2 in ctx.GestionadoPor on u.managed equals u2.GestionadoPorId
                                     join u3 in ctx.ApplicationManagerCatalog on u.applicationId equals u3.applicationId
                                     where (
                                     u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     ||
                                     u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || string.IsNullOrEmpty(filter.applicationId))
                                     && u.registerBy == filter.Username
                                     && u.status == (filter.Status == -1 ? u.status : filter.Status)
                                     && u.status != (int)ApplicationState.Eliminada
                                     && u.isActive == true
                                     && u3.isActive == true
                                     && u3.applicationManagerId == (int)ApplicationManagerRole.Solicitante
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         managedBy = u2.Nombre,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         isApproved = u.isApproved,
                                         isObserved = u.isObserved,
                                         approvedDate = u.dateApproved,
                                         aplicacionRevertida = u.aplicacionRevertida,
                                         solicitante = u3.managerName,
                                       
                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetApplicationUserIT(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     join u2 in ctx.GestionadoPor on u.managed equals u2.GestionadoPorId
                                     join u3 in ctx.TipoActivoInformacion on u.assetType equals u3.TipoActivoInformacionId
                                     where (
                                     u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     ||
                                     u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || string.IsNullOrEmpty(filter.applicationId))
                                     && u.status == (filter.Status == -1 ? u.status : filter.Status)
                                     && u.isActive == true && u.status != (int)ApplicationState.Eliminada
                                     && u2.FlagUserIT == true && u2.FlagActivo == true && u2.FlagEliminado == false
                                     && u.isApproved == true
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         managedBy = u2.Nombre,
                                         description = u.description.Substring(0, 100),
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         isApproved = u.isApproved,
                                         isObserved = u.isObserved,
                                         assetTypeName = u3.Nombre

                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowDto> GetApplicationFlow(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.ApplicationFlow
                                     join u2 in ctx.Application on u.AppId equals u2.AppId
                                     join u3 in ctx.Solicitud on u.SolicitudAplicacionId equals u3.SolicitudAplicacionId
                                     where (
                                     //u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     //||
                                     //u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     //|| string.IsNullOrEmpty(filter.applicationId))
                                     //&& u.registerBy == filter.Username
                                     //&& u.status == (filter.Status == -1 ? u.status : filter.Status)
                                  u.isActive == true
                                     && u.typeFlow == 2 && u.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT
                                     )
                                     select new ApplicationFlowDto()
                                     {
                                         FlowAppId = u.FlowAppId,
                                         AppId = u.AppId,
                                         typeRegister = u.typeRegister,
                                         typeFlow = u.typeFlow,
                                         ownerId = u.ownerId,
                                         ownerEmail = u.ownerEmail,
                                         isApproved = u.isApproved,
                                         comments = u.comments,
                                         dateCreation = u.dateCreation,
                                         createdBy = u.createdBy,
                                         dateApproved = u.dateApproved,
                                         approvedBy = u.approvedBy,
                                         dateRejected = u.dateRejected,
                                         rejectedBy = u.rejectedBy,
                                         dateTransfer = u.dateTransfer,
                                         transferedBy = u.transferedBy,
                                         isCompleted = u.isCompleted,
                                         isNotified = u.isNotified,
                                         applicationId = u2.applicationId,
                                         UsuarioCreacion = u3.UsuarioCreacion

                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowList> GetApplicationFlowByUser(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (filter.role.Contains("PAPP_Administrador"))
                    {
                        var registros = (from u in ctx.ApplicationFlow
                                         join u2 in ctx.Application on u.AppId equals u2.AppId
                                         join u3 in ctx.ApplicationManagerCatalog on u2.applicationId equals u3.applicationId
                                         join u4 in ctx.GestionadoPor on u2.managed equals u4.GestionadoPorId
                                         where (u2.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || u2.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || string.IsNullOrEmpty(filter.applicationId))
                                         && u.isActive == true
                                         && u2.isActive == true
                                         && u.isCompleted == (filter.statusRequest == -1 ? u.isCompleted : (filter.statusRequest == 1 ? true : false))
                                         && u2.managed == (filter.managedBy == -1 ? u2.managed : filter.managedBy)
                                         && u2.status == (filter.Status == -1 ? u2.status : filter.Status)
                                         && u3.applicationManagerId == (int)ApplicationManagerRole.Solicitante
                                         && u.typeFlow == (filter.flow == -1 ? u.typeFlow : filter.flow)
                                         && u.ownerId != ""
                                         select new ApplicationFlowList()
                                         {
                                             AppId = u2.AppId,
                                             FlowAppId = u.FlowAppId,
                                             applicationId = u2.applicationId,
                                             applicationName = u2.applicationName,
                                             comments = u.comments,
                                             dateCreation = u.dateCreation,
                                             isApproved = u.isApproved,
                                             isCompleted = u.isCompleted,
                                             status = u2.status,
                                             typeFlow = u.typeFlow,
                                             typeRegister = u.typeRegister,
                                             //registeredBy = u3.managerName,
                                             registeredBy = u.RegistradoPor,
                                             managedBy = u4.Nombre,
                                             isActive = u2.isActive,
                                             assignedTo = u.ownerEmail,
                                             isApprovedApplication = u2.isApproved,
                                             IdSolicitud = u.SolicitudAplicacionId,
                                             dateApproved=u.dateApproved,
                                             dateTransfer = u.dateTransfer,
                                             dateRejected=u.dateRejected
                                         }).Distinct();

                        totalRows = registros.Count();
                        registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                        var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();



                        return resultado;
                    }
                    else
                    {
                        var registros = (from u in ctx.ApplicationFlow
                                         join u2 in ctx.Application on u.AppId equals u2.AppId
                                         join u3 in ctx.ApplicationManagerCatalog on u2.applicationId equals u3.applicationId
                                         join u4 in ctx.GestionadoPor on u2.managed equals u4.GestionadoPorId
                                         where (u2.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || u2.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || string.IsNullOrEmpty(filter.applicationId))
                                         && u.ownerId == filter.Username
                                         && u.isActive == true
                                         && u2.isActive == true
                                         && u.isCompleted == (filter.statusRequest == -1 ? u.isCompleted : (filter.statusRequest == 1 ? true : false))
                                         && u2.managed == (filter.managedBy == -1 ? u2.managed : filter.managedBy)
                                         && u2.status == (filter.Status == -1 ? u2.status : filter.Status)
                                         && u3.applicationManagerId == (int)ApplicationManagerRole.Solicitante
                                         && u.typeFlow == (filter.flow == -1 ? u.typeFlow : filter.flow)
                                         && u.ownerId != ""
                                         select new ApplicationFlowList()
                                         {
                                             AppId = u2.AppId,
                                             FlowAppId = u.FlowAppId,
                                             applicationId = u2.applicationId,
                                             applicationName = u2.applicationName,
                                             comments = u.comments,
                                             dateCreation = u.dateCreation,
                                             isApproved = u.isApproved,
                                             isCompleted = u.isCompleted,
                                             status = u2.status,
                                             typeFlow = u.typeFlow,
                                             typeRegister = u.typeRegister,
                                             registeredBy = u3.managerName,
                                             managedBy = u4.Nombre,
                                             isActive = u2.isActive,
                                             assignedTo = u.ownerEmail,
                                             isApprovedApplication = u2.isApproved
                                         }).Distinct();

                        totalRows = registros.Count();
                        registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                        var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                        return resultado;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowList> GetApplicationFlowByUserIT(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.ApplicationFlow
                                     join u2 in ctx.Application on u.AppId equals u2.AppId
                                     join u3 in ctx.ApplicationManagerCatalog on u2.applicationId equals u3.applicationId
                                     join u4 in ctx.GestionadoPor on u2.managed equals u4.GestionadoPorId
                                     where (u2.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || u2.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || string.IsNullOrEmpty(filter.applicationId))
                                     && u.isActive == true
                                     && u2.isActive == true
                                     && u2.status == (filter.Status == -1 ? u2.status : filter.Status) && u2.status != (int)ApplicationState.Eliminada
                                     && u3.applicationManagerId == (int)ApplicationManagerRole.Solicitante
                                     && u.typeFlow == (int)Flow.Modificacion
                                     && string.IsNullOrEmpty(u.ownerId)
                                     && u.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT
                                     select new ApplicationFlowList()
                                     {
                                         AppId = u2.AppId,
                                         FlowAppId = u.FlowAppId,
                                         applicationId = u2.applicationId,
                                         applicationName = u2.applicationName,
                                         comments = u.comments,
                                         dateCreation = u.dateCreation,
                                         isApproved = u.isApproved,
                                         isCompleted = u.isCompleted,
                                         status = u2.status,
                                         typeFlow = u.typeFlow,
                                         typeRegister = u.typeRegister,
                                         registeredBy = u3.managerName,
                                         managedBy = u4.Nombre,
                                         isActive = u2.isActive,
                                         assignedTo = u.ownerEmail,
                                         isApprovedApplication = u2.isApproved
                                     }).Distinct();

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override int GetMainOfficeId(int architectId)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var estado = (from u in ctx.JefaturaAti
                                  join u2 in ctx.ArquitectoTI
          on u.JefaturaAtiId equals u2.JefaturaAtiId
                                  where u2.ArquitectoTIId == architectId
                                  select u).FirstOrDefault();

                    return estado is null ? 0 : estado.JefaturaAtiId;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationById(string id)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: bool ExistsApplicationById(string id)"
                    , new object[] { null });
            }
        }

        public override ApplicationDetail GetApplicationByCodigo(string codigo)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.applicationId == codigo
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        deploymentType = u.deploymentType,
                                        managed = u.managed,
                                        applicationName = u.applicationName,
                                        description = u.description,
                                        developmentProvider = u.developmentProvider,
                                        developmentType = u.developmentType,
                                        hasInterfaceId = u.hasInterfaceId,
                                        implementationType = u.implementationType,
                                        infrastructure = u.infrastructure,
                                        interfaceId = u.interfaceId,
                                        mainOffice = u.mainOffice,
                                        parentAPTCode = u.parentAPTCode,
                                        registerDate = u.registerDate,
                                        replacementApplication = u.replacementApplication,
                                        teamName = u.teamName,
                                        unit = u.unit,
                                        userEntity = u.userEntity,
                                        status = u.status,
                                        authenticationMethod = u.authenticationMethod,
                                        authorizationMethod = u.authorizationMethod,
                                        isReactivated = u.isReactivated
                                    }).FirstOrDefault();

                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByCodigo(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByCodigo(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationManagerCatalogDto> GetApplicationManagerCatalogByRolesIds(List<int> idsRol, int appId)
        {

            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                    if (app != null)
                    {
                        var listaManagers = (from a in ctx.Set<ApplicationManagerCatalog>()
                                             where idsRol.Contains(a.applicationManagerId)
                                             && a.isActive
                                             && a.email != null && a.applicationId == app.applicationId
                                             select new ApplicationManagerCatalogDto
                                             {
                                                 username = a.username,
                                                 managerName = a.managerName,
                                                 applicationManagerId = a.applicationManagerId,
                                                 email = a.email
                                             }).ToList();

                        var listaFlujo = (from a in ctx.Set<ApplicationFlow>()
                                          where a.AppId == appId
                                          && idsRol.Contains(a.typeRegister.Value)
                                          && a.isActive.Value
                                          && a.ownerEmail != null
                                          select new ApplicationManagerCatalogDto
                                          {
                                              username = a.ownerId,
                                              managerName = string.Empty,
                                              applicationManagerId = a.typeRegister.Value,
                                              email = a.ownerEmail
                                          }).ToList();
                        listaManagers.AddRange(listaFlujo);

                        return listaManagers.Distinct().ToList();
                    }
                    else
                        return null;
                }
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationEvalArchitect(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            var arquitectoActual = string.Empty;
            var arquitectoFinal = string.Empty;
            var camposModificados = false;
            var camposNotificacion = string.Empty;

            try
            {
                long ID = 0;
                int mainOfficeId = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);

                        ApplicationDtoTemporal entidadInicial = new ApplicationDtoTemporal();
                        entidadInicial.assetType = entidad.assetType;
                        entidadInicial.BIANdomain = entidad.BIANdomain;
                        entidadInicial.tobe = entidad.tobe;
                        entidadInicial.parentAPTCode = entidad.parentAPTCode;


                        if (entidad.isApproved == false)
                        {
                            if (objeto.architectId != 0)
                            {
                                mainOfficeId = this.GetMainOfficeId(objeto.architectId);
                            }

                            if (entidad == null) dataResult.EstadoTransaccion = false;

                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    entidad.BIANdomain = objeto.BIANdomain;
                                    entidad.tobe = objeto.tobe;
                                    entidad.assetType = objeto.assetType;
                                    entidad.parentAPTCode = objeto.parentAPTCode;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                        if (objeto.BIANdomain.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.DominioBIAN,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.BIANdomain.ToString(),
                                                typeFlow = (int)Flow.Registro
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);

                                            var BIANArea = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == objeto.BIANdomain);
                                            if (BIANArea != null)
                                            {
                                                var flujoData2 = new ApplicationFlowData()
                                                {
                                                    createdBy = objeto.registerBy,
                                                    currentValue = string.Empty,
                                                    DataId = 0,
                                                    dateCreation = DateTime.Now,
                                                    fieldId = (int)Campos.AreaBIAN,
                                                    FlowAppId = flujo.FlowAppId,
                                                    newValue = BIANArea.AreaBianId.ToString(),
                                                    typeFlow = (int)Flow.Registro
                                                };
                                                ctx.ApplicationFlowData.Add(flujoData2);
                                            }
                                        }

                                        if (objeto.tobe.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.TOBE,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.tobe.ToString(),
                                                typeFlow = (int)Flow.Registro
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);
                                        }

                                        if (objeto.assetType.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.TipoActivoInformacion,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.assetType.ToString(),
                                                typeFlow = (int)Flow.Registro
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Transferir)
                                {
                                    entidad.mainOffice = mainOfficeId == 0 ? entidad.mainOffice : mainOfficeId;
                                    entidad.architectId = objeto.architectId;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.transferedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateTransfer = DateTime.Now;
                                        flujo.isApproved = null;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = false;
                                        flujo.isActive = false;
                                        flujo.transferedByName = objeto.NombreUsuarioModificacion;

                                        var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);

                                        if (arquitectoEvaluador != null)
                                        {
                                            //Registrando el flujo para el arquitecto
                                            var flujoArquitecto = new ApplicationFlow()
                                            {
                                                AppId = objeto.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = arquitectoEvaluador.Matricula,
                                                ownerEmail = arquitectoEvaluador.Correo,
                                                typeFlow = (int)Flow.Registro,
                                                typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                                isActive = true,
                                                comments = objeto.comments,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoArquitecto);
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.observedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateObserved = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isObserved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }

                                ctx.SaveChanges();
                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            //Enviando notificaciones
                            try
                            {
                                entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);

                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[CodigoAPTPadre]", entidad.parentAPTCode);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                                diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2((ApplicationSituationRegister)entidad.registrationSituation.Value));
                                diccionario.Add("[TipoActivo]", this.getAssetTypeName(entidad.assetType));
                                diccionario.Add("[FechaRegistro]", entidad.registerDate.Value.ToString("dd/MM/yyyy"));

                                if (entidad.BIANdomain.HasValue)
                                {
                                    var dominioBIAN = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == entidad.BIANdomain.Value);
                                    var areaBIAN = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == dominioBIAN.AreaBianId);
                                    diccionario.Add("[AreaBian]", areaBIAN != null ? areaBIAN.Nombre : string.Empty);
                                }
                                diccionario.Add("[DominioBian]", this.getBIANDomainName(entidad.BIANdomain));
                                diccionario.Add("[Jefatura]", this.getMainOfficeName(entidad.mainOffice));

                                var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(entidad.architectId.Value);
                                if (arquitectoEvaluador != null)
                                {
                                    diccionario.Add("[ArquitectoEvaluador]", arquitectoEvaluador.NombreResponsable);
                                }

                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            diccionario.Add("[ArquitectoActual]", objeto.NombreUsuarioModificacion);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AprobacionArquitectoEvaluador, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Transferir:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            diccionario.Add("[ArquitectoActual]", objeto.NombreUsuarioModificacion);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2TransferenciaArquitectoEvaluador, entidad.applicationId, diccionario);
                                            //mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionNuevoArquitectoEvaluador, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[ArquitectoActual]", objeto.NombreUsuarioModificacion);
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2RechazoArquitectoEvaluador, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[ArquitectoActual]", objeto.NombreUsuarioModificacion);
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionArquitectoEvaluador, entidad.applicationId, diccionario);
                                        }; break;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }
                        else if (entidad.isApproved == true)
                        {
                            if (objeto.architectId != 0)
                            {
                                mainOfficeId = this.GetMainOfficeId(objeto.architectId);
                            }
                            else
                            {
                                var jefaturaATI = ctx.ArquitectoTI.FirstOrDefault(x => x.Matricula == objeto.registerBy);
                                if (jefaturaATI != null)
                                {
                                    mainOfficeId = jefaturaATI.JefaturaAtiId;
                                    objeto.architectId = jefaturaATI.ArquitectoTIId;
                                }
                            }

                            if (entidad == null) dataResult.EstadoTransaccion = false;

                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.assetType != entidadInicial.assetType)
                                {
                                    camposNotificacion = camposNotificacion + string.Format("- Tipo de activo: Actualizado de {0} a {1} <br/>", getAssetTypeName(entidadInicial.assetType), getAssetTypeName(objeto.assetType));
                                    camposModificados = true;
                                }

                                if (objeto.parentAPTCode != entidadInicial.parentAPTCode)
                                {
                                    camposNotificacion = camposNotificacion + string.Format("- Código APT Padre: Actualizado de {0} a {1} <br/>", entidadInicial.parentAPTCode, objeto.parentAPTCode);
                                    camposModificados = true;
                                }
                                if (objeto.tobe != entidadInicial.tobe)
                                {
                                    camposNotificacion = camposNotificacion + string.Format("- TOBE: Actualizado de {0} a {1} <br/>", getTOBEName(entidadInicial.tobe), getTOBEName(objeto.tobe));
                                    camposModificados = true;
                                }
                                if (objeto.BIANdomain != entidadInicial.BIANdomain)
                                {
                                    camposNotificacion = camposNotificacion + string.Format("- Dominio BIAN: Actualizado de {0} a {1} <br/>", getBIANDomainName(entidadInicial.BIANdomain), getBIANDomainName(objeto.BIANdomain));
                                    var dominioOriginal = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == entidadInicial.BIANdomain);
                                    var dominioFinal = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == objeto.BIANdomain);
                                    if (dominioOriginal.AreaBianId != dominioFinal.AreaBianId)
                                    {
                                        var areaOriginal = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == dominioOriginal.AreaBianId);
                                        var areaFinal = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == dominioFinal.AreaBianId);

                                        camposNotificacion = camposNotificacion + string.Format("- Area BIAN: Actualizado de {0} a {1} <br/>", areaOriginal.Nombre, areaFinal.Nombre);
                                    }

                                    camposModificados = true;
                                }

                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    entidad.BIANdomain = objeto.BIANdomain;
                                    entidad.tobe = objeto.tobe;
                                    entidad.assetType = objeto.assetType;
                                    entidad.mainOffice = mainOfficeId;
                                    entidad.architectId = objeto.architectId;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                        if (objeto.BIANdomain.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.DominioBIAN,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.BIANdomain.ToString(),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);

                                            var BIANArea = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == objeto.BIANdomain);
                                            if (BIANArea != null)
                                            {
                                                var flujoData2 = new ApplicationFlowData()
                                                {
                                                    createdBy = objeto.registerBy,
                                                    currentValue = string.Empty,
                                                    DataId = 0,
                                                    dateCreation = DateTime.Now,
                                                    fieldId = (int)Campos.AreaBIAN,
                                                    FlowAppId = flujo.FlowAppId,
                                                    newValue = BIANArea.AreaBianId.ToString(),
                                                    typeFlow = (int)Flow.Modificacion
                                                };
                                                ctx.ApplicationFlowData.Add(flujoData2);
                                            }
                                        }

                                        if (objeto.tobe.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.TOBE,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.tobe.ToString(),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);
                                        }

                                        if (objeto.assetType.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.TipoActivoInformacion,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.assetType.ToString(),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Transferir)
                                {
                                    arquitectoActual = getArchitectName(entidad.architectId);
                                    arquitectoFinal = getArchitectName(objeto.architectId);

                                    //entidad.mainOffice = mainOfficeId == 0 ? entidad.mainOffice : mainOfficeId;                                    

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.transferedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateTransfer = DateTime.Now;
                                        flujo.isApproved = null;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = false;
                                        flujo.isActive = false;
                                        flujo.transferedByName = objeto.NombreUsuarioModificacion;

                                        var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);

                                        if (arquitectoEvaluador != null)
                                        {
                                            //Registrando el flujo para el arquitecto
                                            var flujoArquitecto = new ApplicationFlow()
                                            {
                                                AppId = objeto.AppId,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                isCompleted = false,
                                                isNotified = false,
                                                ownerId = arquitectoEvaluador.Matricula,
                                                ownerEmail = arquitectoEvaluador.Correo,
                                                typeFlow = (int)Flow.Modificacion,
                                                typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                                isActive = true,
                                                comments = objeto.comments,
                                                lastFlowAppId = flujo.FlowAppId,
                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                            };
                                            ctx.ApplicationFlow.Add(flujoArquitecto);
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.isActive = false;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.lastFlowAppId.HasValue)
                                        {
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo.lastFlowAppId.Value);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.approvedBy = objeto.registerBy;
                                                flujoAnterior.comments = "Comentarios del arquitecto que rechazó la solicitud: " + objeto.comments;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.isCompleted = true;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.isActive = true;

                                            }
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.isActive = false;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.lastFlowAppId.HasValue)
                                        {
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo.lastFlowAppId.Value);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.approvedBy = objeto.registerBy;
                                                flujoAnterior.comments = "Comentarios del arquitecto que observó la solicitud: " + objeto.comments;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.isCompleted = true;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.isActive = true;

                                            }
                                        }
                                    }
                                }

                                ctx.SaveChanges();
                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            //Enviando notificaciones
                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[Arquitecto]", objeto.NombreUsuarioModificacion);
                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            if (camposModificados)
                                            {
                                                diccionario.Add("[Campos]", camposNotificacion);
                                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionArquitectoEvaluador, entidad.applicationId, diccionario, null, true);
                                            }
                                        }; break;
                                    case (int)ActionManager.Transferir:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            diccionario.Add("[ArquitectoInicial]", arquitectoActual);
                                            diccionario.Add("[ArquitectoFinal]", arquitectoFinal);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionTransferenciaArquitectoEvaluador, entidad.applicationId, diccionario);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionAsignacionNuevoArquitectoEvaluador, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionRechazoArquitectoEvaluador, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionObservaciónArquitectoEvaluador, entidad.applicationId, diccionario);
                                        }; break;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        try
                        {
                            var tipo = "";
                            if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro)
                            {
                                tipo = " registro ";
                            }
                            else
                                tipo = " modificación ";

                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");

                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " ";

                            if (objeto.actionManager == (int)ActionManager.Rechazar)
                            {
                                BitacoraMensaje = BitacoraMensaje + "rechazó la solicitud de " + tipo + " de arquitecto evaluador de la aplicación" + entidad.applicationId +
                                    " " + " - " + "" + entidad.applicationName + " por el siguiente motivo: "
                                      + objeto.comments;
                                camposModificados = true;
                            }
                            else if (objeto.actionManager == (int)ActionManager.Aprobar)
                            {
                                if (entidad.isApproved == false)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "aprobó la solicitud de " + tipo + " de arquitecto evaluador de la aplicación" + entidad.applicationId +
                                    " " + " - " + "" + entidad.applicationName + " con los siguientes campos: ";

                                    BitacoraMensaje = BitacoraMensaje + " Tipo Activo, tenía el valor: " + getAssetTypeName(entidadInicial.assetType)
                                        + " ,reemplazado por el valor: " + getAssetTypeName(entidad.assetType);

                                    BitacoraMensaje = BitacoraMensaje + " Código APT Padre, tenía el valor: " + entidadInicial.parentAPTCode
                                       + " ,reemplazado por el valor: " + entidad.parentAPTCode;

                                    BitacoraMensaje = BitacoraMensaje + " ,TOBE, tenía el valor: " + getTOBEName(entidadInicial.tobe)
                                        + " ,reemplazado por el valor: " + getTOBEName(entidad.tobe);

                                    BitacoraMensaje = BitacoraMensaje + " ,Dominio BIAN, tenía el valor: " + getBIANDomainName(entidadInicial.BIANdomain)
                                        + " ,reemplazado por el valor: " + getBIANDomainName(entidad.BIANdomain);

                                    BitacoraMensaje = BitacoraMensaje + " y el Área BIAN al valor: " + getBIANAreaName(objeto.BIANarea);

                                    camposModificados = true;
                                }
                                else if (entidad.isApproved == true)
                                {
                                    if (camposModificados)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + "como arquitecto evaluador, actualizó la aplicación" + entidad.applicationId + " " + " - " + "" + entidad.applicationName + " con los siguientes campos: ";

                                        if (entidad.assetType != entidadInicial.assetType)
                                        {
                                            BitacoraMensaje = BitacoraMensaje + " Tipo Activo, tenía el valor: " + getAssetTypeName(entidadInicial.assetType)
                                                + " ,reemplazado por el valor: " + getAssetTypeName(entidad.assetType);
                                        }

                                        if (entidad.parentAPTCode != entidadInicial.parentAPTCode)
                                        {
                                            BitacoraMensaje = BitacoraMensaje + " Código APT Padre, tenía el valor: " + entidadInicial.parentAPTCode
                                                 + " ,reemplazado por el valor: " + entidad.parentAPTCode;
                                        }

                                        if (entidad.tobe != entidadInicial.tobe)
                                        {
                                            BitacoraMensaje = BitacoraMensaje + " ,TOBE, tenía el valor: " + getTOBEName(entidadInicial.tobe)
                                                + " ,reemplazado por el valor: " + getTOBEName(entidad.tobe);
                                        }

                                        if (entidad.BIANdomain != entidadInicial.BIANdomain)
                                        {
                                            BitacoraMensaje = BitacoraMensaje + " ,Dominio BIAN, tenía el valor: " + getBIANDomainName(entidadInicial.BIANdomain)
                                                + " ,reemplazado por el valor: " + getBIANDomainName(entidad.BIANdomain);
                                        }

                                        var dominioOriginal = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == entidadInicial.BIANdomain);
                                        var dominioFinal = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == objeto.BIANdomain);
                                        if (dominioOriginal.AreaBianId != dominioFinal.AreaBianId)
                                        {
                                            var areaOriginal = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == dominioOriginal.AreaBianId);
                                            var areaFinal = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == dominioFinal.AreaBianId);

                                            camposNotificacion = camposNotificacion + string.Format("- Area BIAN: Actualizado de {0} a {1} <br/>", areaOriginal.Nombre, areaFinal.Nombre);

                                            BitacoraMensaje = BitacoraMensaje + " , Área BIAN, tenía el valor: " + areaOriginal.Nombre + " ,reemplazado por el valor: " + areaFinal.Nombre;
                                        }
                                    }
                                }

                            }
                            else if (objeto.actionManager == (int)ActionManager.Transferir)
                            {
                                BitacoraMensaje = BitacoraMensaje + "transfirió la solicitud de " + tipo + " de arquitecto evaluador de la aplicación" + entidad.applicationId +
                                    " " + " - " + "" + entidad.applicationName + " a: " +
                                    getEvalArchitectName(objeto.architectId)
                                    + " por el siguiente motivo: "
                                      + objeto.comments;

                                camposModificados = true;
                            }

                            BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                            if (camposModificados)
                            {
                                var registroBitacora = new BitacoraAcciones()
                                {
                                    CodigoAPT = entidad.applicationId,
                                    DetalleBitacora = BitacoraMensaje,
                                    CreadoPor = objeto.Matricula,
                                    FechaCreacion = dateAndTime,
                                    NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                                };

                                ctx.BitacoraAcciones.Add(registroBitacora);
                                ctx.SaveChanges();
                            }
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override ApplicationFlowDto GetApplicationFlowById(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.ApplicationFlow
                                    join u2 in ctx.Application on u.AppId equals u2.AppId
                                    where u.FlowAppId == id
                                    select new ApplicationFlowDto()
                                    {
                                        AppId = u.AppId,
                                        approvedBy = u.approvedBy,
                                        comments = u.comments,
                                        createdBy = u.createdBy,
                                        dateApproved = u.dateApproved,
                                        dateCreation = u.dateCreation,
                                        dateRejected = u.dateRejected,
                                        dateTransfer = u.dateTransfer,
                                        FlowAppId = u.FlowAppId,
                                        isApproved = u.isApproved,
                                        isCompleted = u.isCompleted,
                                        isNotified = u.isNotified,
                                        ownerEmail = u.ownerEmail,
                                        ownerId = u.ownerId,
                                        rejectedBy = u.rejectedBy,
                                        transferedBy = u.transferedBy,
                                        typeFlow = u.typeFlow,
                                        typeRegister = u.typeRegister,
                                        rejectedByName = u.rejectedByName,
                                        approvedByName = u.approvedByName,
                                        transferedByName = u.transferedByName,
                                        registrationSituation = u2.registrationSituation,
                                        isActiveOwner = u.isActiveOwner,
                                        SolicitudAplicacionId = u.SolicitudAplicacionId,
                                        isObserved = u.isObserved
                                    }).FirstOrDefault();
                    if (registro != null)
                    {
                        var data = (from u in ctx.ApplicationFlowData
                                    where u.FlowAppId == registro.FlowAppId
                                    select new ApplicationFlowDataDto()
                                    {
                                        currentValue = u.currentValue,
                                        fieldId = u.fieldId.Value,
                                        newValue = u.newValue
                                    }).OrderBy(x => x.fieldId).ToList();

                        foreach (var item in data)
                        {
                            switch (item.fieldId)
                            {
                                case (int)Campos.UnidadUsuaria:
                                    {
                                        int unidad = int.Parse(item.currentValue);
                                        var unidadActual = ctx.Unidad.FirstOrDefault(x => x.UnidadId == unidad);
                                        if (unidadActual != null)
                                        {
                                            item.currentValueDetail = unidadActual.Nombre;
                                        }

                                        unidad = int.Parse(item.newValue);
                                        var unidadSolicitada = ctx.Unidad.FirstOrDefault(x => x.UnidadId == unidad);
                                        if (unidadSolicitada != null)
                                        {
                                            item.newValueDetail = unidadSolicitada.Nombre;
                                        }
                                    }
                                    break;
                            }
                        }

                        if (registro.SolicitudAplicacionId.HasValue)
                        {
                            var totalFlujos = ctx.ApplicationFlow.Where(x => x.SolicitudAplicacionId == registro.SolicitudAplicacionId).Count();
                            registro.TotalFlujosSolicitudes = totalFlujos;
                        }

                        registro.data = data;

                    }
                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: ApplicationFlowDto GetApplicationFlowById()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: ApplicationFlowDto GetApplicationFlowById()"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationEvalAIO(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            var enviarCorreoActualizacion = false;
            var modificacionTIER = false;
            var modificacionTIERPre = false;
            var completarFlujo = false;

            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        ApplicationDtoTemporal entidadInicial = new ApplicationDtoTemporal();

                        entidadInicial.tierProduction = entidad.tierProduction;
                        entidadInicial.tierPreProduction = entidad.tierPreProduction;

                        if (entidad == null) dataResult.EstadoTransaccion = false;

                        if (dataResult.EstadoTransaccion)
                        {
                            if (entidad.isApproved == false)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    if (!string.IsNullOrWhiteSpace(objeto.tierPreProduction) && !string.IsNullOrWhiteSpace(objeto.tierProduction))
                                        completarFlujo = true;

                                    entidad.tierPreProduction = objeto.tierPreProduction;
                                    entidad.tierProduction = objeto.tierProduction;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);

                                    if (flujo != null && completarFlujo)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;
                                        //Aprobar los flujos de los otros aprobadores
                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                            , entidad.AppId, (int)ApplicationManagerRole.AIO, flujo.ownerId));

                                        var flujoData = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = string.Empty,
                                            DataId = 0,
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.TIERProduccion,
                                            FlowAppId = flujo.FlowAppId,
                                            newValue = objeto.tierProduction,
                                            typeFlow = (int)Flow.Registro
                                        };
                                        ctx.ApplicationFlowData.Add(flujoData);

                                        var flujoData2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = string.Empty,
                                            DataId = 0,
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.TIERPreProduccion,
                                            FlowAppId = flujo.FlowAppId,
                                            newValue = objeto.tierPreProduction,
                                            typeFlow = (int)Flow.Registro
                                        };
                                        ctx.ApplicationFlowData.Add(flujoData2);
                                    }
                                }
                            }
                            else if (entidad.isApproved == true)
                            {
                                if (entidad.tierPreProduction != objeto.tierPreProduction)
                                {
                                    enviarCorreoActualizacion = true;
                                    modificacionTIERPre = true;
                                }

                                if (entidad.tierProduction != objeto.tierProduction)
                                {
                                    enviarCorreoActualizacion = true;
                                    modificacionTIER = true;
                                }


                                entidad.tierPreProduction = objeto.tierPreProduction;
                                entidad.tierProduction = objeto.tierProduction;

                                var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                if (flujo != null)
                                {
                                    flujo.approvedBy = objeto.registerBy;
                                    flujo.dateApproved = DateTime.Now;
                                    flujo.isApproved = true;
                                    flujo.isCompleted = true;
                                    flujo.isNotified = true;
                                    flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                    var flujoData = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = string.Empty,
                                        DataId = 0,
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.TIERProduccion,
                                        FlowAppId = flujo.FlowAppId,
                                        newValue = objeto.tierProduction,
                                        typeFlow = (int)Flow.Modificacion
                                    };
                                    ctx.ApplicationFlowData.Add(flujoData);

                                    var flujoData2 = new ApplicationFlowData()
                                    {
                                        createdBy = objeto.registerBy,
                                        currentValue = string.Empty,
                                        DataId = 0,
                                        dateCreation = DateTime.Now,
                                        fieldId = (int)Campos.TIERPreProduccion,
                                        FlowAppId = flujo.FlowAppId,
                                        newValue = objeto.tierPreProduction,
                                        typeFlow = (int)Flow.Modificacion
                                    };
                                    ctx.ApplicationFlowData.Add(flujoData2);
                                }
                            }

                            ctx.SaveChanges();
                            ID = entidad.AppId;
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        string textoTipo = "";
                        if (objeto.tipoAIO == 1) { textoTipo = " perteneciente al equipo AIO Producción "; }
                        else if (objeto.tipoAIO == 2) { textoTipo = " perteneciente al equipo AIO Pre Producción "; }

                        try
                        {
                            if (entidad.isApproved == false)
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                //diccionario.Add("[TierProduccion]", entidad.tierProduction);
                                //diccionario.Add("[TierPreProduccion]", entidad.tierPreProduction);
                                diccionario.Add("[TipoEncargado]", textoTipo);
                                diccionario.Add("[Atributo]", (objeto.tipoAIO == 1 ? "TIER Producción" : "TIER Preproducción"));
                                diccionario.Add("[DetalleRegistro]", (objeto.tipoAIO == 1 ? "TIER Producción: " + entidad.tierProduction : "TIER Preproducción: " + entidad.tierPreProduction));
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2ConfirmacionRegistroAIO, entidad.applicationId, diccionario);
                            }
                            else
                            {
                                if (enviarCorreoActualizacion)
                                {
                                    var mailManager = new MailingManager();
                                    var diccionario = new Dictionary<string, string>();
                                    diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                    diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                    diccionario.Add("[TIERProduccion]", entidad.tierProduction);
                                    diccionario.Add("[TIERPreProduccion]", entidad.tierPreProduction);
                                    diccionario.Add("[TIERProduccionAnterior]", entidadInicial.tierProduction);
                                    diccionario.Add("[TIERPreProduccionAnterior]", entidadInicial.tierPreProduction);
                                    diccionario.Add("[TipoEncargado]", textoTipo);
                                    diccionario.Add("[Atributo]", (objeto.tipoAIO == 1 ? "TIER Producción" : "TIER Preproducción"));
                                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionAIO, entidad.applicationId, diccionario, null, true);
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }


                        try
                        {
                            //Agregar registro en bitácora
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            var accion = "";
                            var tipo = "";

                            if (entidad.isApproved == false)
                            {
                                if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro)
                                {
                                    tipo = " registro ";
                                }
                                else if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion)
                                {
                                    tipo = " modificación ";
                                }

                                if (objeto.actionManager == (int)ActionManager.Rechazar)
                                    accion = " rechazó ";
                                else
                                    accion = " aprobó ";

                                string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                var hour = dateAndTime.ToString("HH:mm:ss");
                                BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " + textoTipo +
                                    accion + "la solicitud de" + tipo + "de AIO de la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " ";

                                if (objeto.tipoAIO == 1)
                                {
                                    BitacoraMensaje = BitacoraMensaje +
                                    " con TIER Producción de " + (string.IsNullOrWhiteSpace(entidadInicial.tierProduction) ? "Ningún valor" : entidadInicial.tierProduction) + " a: " + (string.IsNullOrWhiteSpace(objeto.tierProduction) ? "Ningún valor" : objeto.tierProduction) + ", ";
                                }
                                else if (objeto.tipoAIO == 2)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " con TIER PreProducción de " + (string.IsNullOrWhiteSpace(entidadInicial.tierPreProduction) ? "Ningún valor" : entidadInicial.tierPreProduction) + " a: " + (string.IsNullOrWhiteSpace(objeto.tierPreProduction) ? "Ningún valor" : objeto.tierPreProduction) + ", ";
                                }
                                if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + objeto.comments + " ";
                                }

                                BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                                var registroBitacora = new BitacoraAcciones()
                                {
                                    CodigoAPT = entidad.applicationId,
                                    DetalleBitacora = BitacoraMensaje,
                                    CreadoPor = objeto.Matricula,
                                    FechaCreacion = dateAndTime,
                                    NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                                };

                                ctx.BitacoraAcciones.Add(registroBitacora);
                                ctx.SaveChanges();
                            }
                            else if (entidad.isApproved == true)
                            {
                                if (modificacionTIER || modificacionTIERPre)
                                {
                                    if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro)
                                    {
                                        tipo = " registro ";
                                    }
                                    else if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion)
                                    {
                                        tipo = " modificación ";
                                    }

                                    if (objeto.actionManager == (int)ActionManager.Rechazar)
                                        accion = " rechazó ";
                                    else
                                        accion = " aprobó ";

                                    string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                    var hour = dateAndTime.ToString("HH:mm:ss");
                                    BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " + textoTipo +
                                        accion + "la solicitud de" + tipo + "de AIO de la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con ";
                                    if (modificacionTIER)
                                        BitacoraMensaje = BitacoraMensaje + " TIER Producción de " + (string.IsNullOrWhiteSpace(entidadInicial.tierProduction) ? "Ningún valor" : entidadInicial.tierProduction) + " a: " + (string.IsNullOrWhiteSpace(objeto.tierProduction) ? "Ningún valor" : objeto.tierProduction) + " | ";
                                    if (modificacionTIERPre)
                                        BitacoraMensaje = BitacoraMensaje + " TIER PreProducción de " + (string.IsNullOrWhiteSpace(entidadInicial.tierPreProduction) ? "Ningún valor" : entidadInicial.tierPreProduction) + " a: " + (string.IsNullOrWhiteSpace(objeto.tierPreProduction) ? "Ningún valor" : objeto.tierPreProduction) + " ";

                                    if (objeto.actionManager == (int)ActionManager.Rechazar)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + objeto.comments + " ";
                                    }

                                    BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                                    var registroBitacora = new BitacoraAcciones()
                                    {
                                        CodigoAPT = entidad.applicationId,
                                        DetalleBitacora = BitacoraMensaje,
                                        CreadoPor = objeto.Matricula,
                                        FechaCreacion = dateAndTime,
                                        NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                                    };

                                    ctx.BitacoraAcciones.Add(registroBitacora);
                                    ctx.SaveChanges();
                                }
                            }
                        }

                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }
                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationDevSecOps(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            var correoDevSecOps = false;

            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        ApplicationDtoTemporal entidadInicial = new ApplicationDtoTemporal();
                        entidadInicial.deploymentType = entidad.deploymentType;

                        if (entidad == null) dataResult.EstadoTransaccion = false;

                        if (dataResult.EstadoTransaccion)
                        {
                            if (entidad.isApproved == false)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    correoDevSecOps = !(entidad.deploymentType == objeto.deploymentType);
                                    entidad.deploymentType = objeto.deploymentType;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;
                                        //Desactivar los flujos de los otros aprobadores
                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false', isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                            , entidad.AppId, (int)ApplicationManagerRole.DevSecOps, flujo.ownerId));

                                        var flujoData = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = string.Empty,
                                            DataId = 0,
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.TipoImplementacion,
                                            FlowAppId = flujo.FlowAppId,
                                            newValue = objeto.deploymentType.ToString(),
                                            typeFlow = (int)Flow.Registro
                                        };
                                        ctx.ApplicationFlowData.Add(flujoData);
                                    }


                                    try
                                    {
                                        var mailManager = new MailingManager();
                                        var diccionario = new Dictionary<string, string>();
                                        diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                        diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                        diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                                        diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2((ApplicationSituationRegister)entidad.registrationSituation.Value));
                                        diccionario.Add("[TipoActivo]", this.getAssetTypeName(entidad.assetType));
                                        diccionario.Add("[ModeloRegistrado]", this.getDeploymentTypeName(entidadInicial.deploymentType));
                                        diccionario.Add("[ModeloAprobado]", this.getDeploymentTypeName(objeto.deploymentType));

                                        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2ConfirmacionRegistroDevsecops, entidad.applicationId, diccionario);
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message, ex);
                                    }
                                }

                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.observedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateObserved = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isObserved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;
                                    }
                                    try
                                    {
                                        var mailManager = new MailingManager();
                                        var diccionario = new Dictionary<string, string>();
                                        diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                        diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                        diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                                        diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2((ApplicationSituationRegister)entidad.registrationSituation.Value));
                                        diccionario.Add("[TipoActivo]", this.getAssetTypeName(entidad.assetType));
                                        diccionario.Add("[ModeloRegistrado]", this.getDeploymentTypeName(entidadInicial.deploymentType));
                                        diccionario.Add("[ModeloAprobado]", this.getDeploymentTypeName(objeto.deploymentType));
                                        diccionario.Add("[Comentarios]", objeto.comments);


                                        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionDevSecOps, entidad.applicationId, diccionario);
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message, ex);
                                    }
                                }
                            }



                            else if (entidad.isApproved == true)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    entidad.deploymentType = objeto.deploymentType;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);

                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;
                                        //Desactivar los flujos de los otros aprobadores
                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false', isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                            , entidad.AppId, (int)ApplicationManagerRole.DevSecOps, flujo.ownerId));

                                        if (solicitud != null)
                                        {
                                            solicitud.UsuarioModificacion = objeto.registerBy;
                                            solicitud.NombreUsuarioAprobacion = objeto.NombreUsuarioModificacion;
                                            solicitud.NombreUsuarioAprobacion = objeto.NombreUsuarioModificacion;

                                            solicitud.FlagAprobacion = true;
                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                                            solicitud.FechaModificacion = DateTime.Now;
                                        }

                                        try
                                        {
                                            var mailManager = new MailingManager();
                                            var diccionario = new Dictionary<string, string>();
                                            diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                            diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                            diccionario.Add("[ModeloEntrega]", getDeploymentTypeName(objeto.deploymentType));
                                            diccionario.Add("[ModeloEntregaActual]", getDeploymentTypeName(entidadInicial.deploymentType));
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionAprobacionSolicitudModificacionDevSecOps, entidad.applicationId, diccionario);
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message, ex);
                                        }

                                        EnviarCorreoConfirmacion(solicitud.AplicacionId, solicitud.SolicitudAplicacionId);
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);

                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.comments = objeto.comments;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;
                                        //Desactivar los flujos de los otros aprobadores
                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false', isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                            , entidad.AppId, (int)ApplicationManagerRole.DevSecOps, flujo.ownerId));

                                        if (solicitud != null)
                                        {
                                            solicitud.UsuarioModificacion = objeto.registerBy;
                                            solicitud.NombreUsuarioAprobacion = objeto.NombreUsuarioModificacion;
                                            solicitud.NombreUsuarioAprobacion = objeto.NombreUsuarioModificacion;
                                            solicitud.FlagAprobacion = false;
                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                                            solicitud.FechaModificacion = DateTime.Now;
                                            solicitud.Observaciones = objeto.comments;
                                        }

                                        try
                                        {
                                            var mailManager = new MailingManager();
                                            var diccionario = new Dictionary<string, string>();
                                            diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                            diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionRechazoSolicitudModificacionDevSecOps, entidad.applicationId, diccionario);
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message, ex);
                                        }
                                    }
                                }

                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.isActive = false;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.lastFlowAppId.HasValue)
                                        {
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo.lastFlowAppId.Value);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.approvedBy = objeto.registerBy;
                                                flujoAnterior.comments = "Comentarios del arquitecto que observó la solicitud: " + objeto.comments;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.isCompleted = true;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.isActive = true;

                                            }
                                        }
                                    }
                                    try
                                    {
                                        var mailManager = new MailingManager();
                                        var diccionario = new Dictionary<string, string>();
                                        diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                        diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                        diccionario.Add("[Comentarios]", objeto.comments);
                                        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionObervacionDevSecOps, entidad.applicationId, diccionario);
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message, ex);
                                    }
                                }
                            }

                        }

                        ctx.SaveChanges();
                        ID = entidad.AppId;


                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();


                        //Agregar registro en bitácora
                        try
                        {
                            var BitacoraMensaje = "";
                            var accion = "";
                            var tipo = "";
                            if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro) { tipo = " registro "; }
                            else if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion) { tipo = " modificación "; }

                            if (objeto.actionManager == (int)ActionManager.Rechazar)
                                accion = " rechazó ";
                            else if (objeto.actionManager == (int)ActionManager.Observar)
                                accion = " observó ";
                            else
                                accion = " aprobó ";

                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + " " + "(" + objeto.Matricula + ")" + " " +
                                accion + " las solicitud de" + tipo + "de DevSecOps de la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName;

                            //if(objeto.actionManager != (int)ActionManager.Rechazar)
                            //{
                            BitacoraMensaje = BitacoraMensaje + " en los campos: Modelo de entrega, tenía el valor: " + getDeploymentTypeName(entidadInicial.deploymentType)
                                + " ,reemplazado por el valor: " + getDeploymentTypeName(objeto.deploymentType);
                            //}                            

                            if (objeto.actionManager == (int)ActionManager.Rechazar || objeto.actionManager == (int)ActionManager.Observar)
                            {
                                BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + objeto.comments + " ";
                            }

                            BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }
                    }


                    return dataResult;
                }
            }

            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }
    


        public override DataResultAplicacion EditApplicationArchitectIT(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            var notificar = false;
            var campos = string.Empty;
            //Validacion para ver si la URL se puede modificar en base a la categoría tecnológica            
            var parametricaCategoriaWeb = 0;
            var camposModificados = false;
            var camposNotificacion = string.Empty;

            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var parametroCategoriaWeb = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "VALOR_TIPO_WEB");
                        if (parametroCategoriaWeb != null)
                        {
                            var parametricaWeb = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaId == 2 && x.Descripcion == "Categoria tecnologica" && x.Valor == parametroCategoriaWeb.Valor);
                            if (parametroCategoriaWeb != null)
                            {
                                parametricaCategoriaWeb = parametricaWeb.ParametricaDetalleId;
                            }
                        }

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        ApplicationDtoTemporal entidadInicial = new ApplicationDtoTemporal();
                        entidadInicial.technologyCategory = entidad.technologyCategory;
                        entidadInicial.technicalClassification = entidad.technicalClassification;
                        entidadInicial.technicalSubclassification = entidad.technicalSubclassification;

                        if (entidad.isApproved == false)
                        {
                            if (entidad == null) dataResult.EstadoTransaccion = false;

                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    entidad.technologyCategory = objeto.technologyCategory;
                                    entidad.technicalClassification = objeto.technicalClassification;
                                    entidad.technicalSubclassification = objeto.technicalSubclassification;

                                    if (entidad.technologyCategory == parametricaCategoriaWeb)
                                        entidad.webDomain = (string.IsNullOrWhiteSpace(entidad.webDomain) || entidad.webDomain == "NO APLICA") ? string.Empty : entidad.webDomain;
                                    else
                                        entidad.webDomain = "NO APLICA";

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;
                                        if (flujo.isNotified == false)
                                        {
                                            flujo.isNotified = true;
                                            notificar = true;
                                        }
                                        else
                                            notificar = false;

                                        //Desactivar los flujos de los otros aprobadores
                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false', isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                            , entidad.AppId, (int)ApplicationManagerRole.ArquitectoTI, flujo.ownerId));

                                        if (objeto.technologyCategory.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.CategoriaTecnologica,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.technologyCategory.ToString(),
                                                typeFlow = (int)Flow.Registro
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);
                                        }

                                        if (objeto.technicalSubclassification.HasValue)
                                        {
                                            var flujoData2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.SubClasificacionTecnica,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.technicalSubclassification.ToString(),
                                                typeFlow = (int)Flow.Registro
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData2);
                                        }

                                        if (objeto.technicalClassification.HasValue)
                                        {
                                            var flujoData3 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.ClasificacionTecnica,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.technicalClassification.ToString(),
                                                typeFlow = (int)Flow.Registro
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData3);
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;

                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false', isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                           , entidad.AppId, (int)ApplicationManagerRole.ArquitectoTI, flujo.ownerId));
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.observedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateObserved = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isObserved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                ctx.SaveChanges();

                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                                diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2((ApplicationSituationRegister)entidad.registrationSituation.Value));
                                diccionario.Add("[TipoActivo]", this.getAssetTypeName(entidad.assetType));
                                diccionario.Add("[CategoriaTecnologica]", this.getTechnologyCategoryName(entidad.technologyCategory));
                                diccionario.Add("[ClasificacionTecnica]", this.getTechnicalClassificationName(entidad.technicalClassification));
                                diccionario.Add("[SubclasificacionTecnica]", this.getSubTechnicalClassificationName(entidad.technicalSubclassification));

                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            if (notificar)
                                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AprobacionArquitectoTecnologia, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2RechazoArquitectoTecnologia, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[ArquitectoActual]", objeto.NombreUsuarioModificacion);
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionArquitectoTecnologia, entidad.applicationId, diccionario);
                                        }; break;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }
                        else if (entidad.isApproved == true)
                        {
                            if (entidad == null) dataResult.EstadoTransaccion = false;

                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    entidad.technologyCategory = objeto.technologyCategory;
                                    entidad.technicalClassification = objeto.technicalClassification;
                                    entidad.technicalSubclassification = objeto.technicalSubclassification;

                                    if (objeto.technologyCategory != entidadInicial.technologyCategory)
                                    {
                                        camposNotificacion = camposNotificacion + string.Format("- Categoría tecnológica: Actualizado de {0} a {1} <br/>", getTechnologyCategoryName(entidadInicial.technologyCategory), getTechnologyCategoryName(objeto.technologyCategory));
                                        camposModificados = true;
                                    }
                                    if (objeto.technicalClassification != entidadInicial.technicalClassification)
                                    {
                                        camposNotificacion = camposNotificacion + string.Format("- Clasificación técnica: Actualizado de {0} a {1} <br/>", getTechnicalClassificationName(entidadInicial.technicalClassification), getTechnicalClassificationName(objeto.technicalClassification));
                                        camposModificados = true;
                                    }
                                    if (objeto.technicalSubclassification != entidadInicial.technicalSubclassification)
                                    {
                                        camposNotificacion = camposNotificacion + string.Format("- Subclasificación técnica: Actualizado de {0} a {1} <br/>", getSubTechnicalClassificationName(entidadInicial.technicalSubclassification), getSubTechnicalClassificationName(objeto.technicalSubclassification));
                                        camposModificados = true;
                                    }

                                    if (entidad.technologyCategory == parametricaCategoriaWeb)
                                        entidad.webDomain = (string.IsNullOrWhiteSpace(entidad.webDomain) || entidad.webDomain == "NO APLICA") ? string.Empty : entidad.webDomain;
                                    else
                                        entidad.webDomain = "NO APLICA";

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                        if (objeto.technologyCategory.HasValue)
                                        {
                                            var flujoData = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.CategoriaTecnologica,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.technologyCategory.ToString(),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData);
                                        }

                                        if (objeto.technicalSubclassification.HasValue)
                                        {
                                            var flujoData2 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.SubClasificacionTecnica,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.technicalSubclassification.ToString(),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData2);
                                        }

                                        if (objeto.technicalClassification.HasValue)
                                        {
                                            var flujoData3 = new ApplicationFlowData()
                                            {
                                                createdBy = objeto.registerBy,
                                                currentValue = string.Empty,
                                                DataId = 0,
                                                dateCreation = DateTime.Now,
                                                fieldId = (int)Campos.ClasificacionTecnica,
                                                FlowAppId = flujo.FlowAppId,
                                                newValue = objeto.technicalClassification.ToString(),
                                                typeFlow = (int)Flow.Modificacion
                                            };
                                            ctx.ApplicationFlowData.Add(flujoData3);
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.isActive = false;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.lastFlowAppId.HasValue)
                                        {
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo.lastFlowAppId.Value);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.approvedBy = objeto.registerBy;
                                                flujoAnterior.comments = "Comentarios del arquitecto que observó la solicitud: " + objeto.comments;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.isCompleted = true;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.isActive = true;

                                            }
                                        }
                                    }
                                }


                                ctx.SaveChanges();

                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            if (camposModificados)
                            {
                                try
                                {
                                    var mailManager = new MailingManager();
                                    var diccionario = new Dictionary<string, string>();
                                    diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                    diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                    diccionario.Add("[TipoActivo]", this.getAssetTypeName(entidad.assetType));
                                    diccionario.Add("[Campos]", camposNotificacion);

                                    switch (objeto.actionManager)
                                    {
                                        case (int)ActionManager.Aprobar:
                                            {
                                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionArquitectoTecnologia, entidad.applicationId, diccionario, null, true);
                                            }; break;
                                        case (int)ActionManager.Observar:
                                            {
                                                diccionario.Add("[Comentarios]", objeto.comments);
                                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionObervacionArquitectoTecnologia, entidad.applicationId, diccionario);
                                            };break;

                                    }
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message, ex);
                                }
                            }
                        }

                        //Agregar registro en bitácora
                        try
                        {
                            var accion = "";
                            var tipo = "";
                            if (objeto.actionManager == (int)ActionManager.Aprobar) accion = " aprobó ";
                            else if (objeto.actionManager == (int)ActionManager.Rechazar) accion = " rechazó ";
                            else if (objeto.actionManager == (int)ActionManager.Observar) accion = " observó ";
                            if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro) tipo = " registro ";
                            else tipo = " modificación ";
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " + accion +
                                "la solicitud de " + tipo + " de arquitecto de tecnología de la aplicación " + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con los campos: ";

                            if (entidad.technologyCategory != entidadInicial.technologyCategory)
                            {
                                BitacoraMensaje = BitacoraMensaje + " ,Categoria Tecnológica, tenía el valor: " + getTechnologyCategoryName(entidadInicial.technologyCategory)
                                    + " ,reemplazado por el valor: " + getTechnologyCategoryName(entidad.technologyCategory);
                            }

                            if (entidad.technicalClassification != entidadInicial.technicalClassification)
                            {
                                BitacoraMensaje = BitacoraMensaje + " ,Clasificación Técnica, tenía el valor: " + getTechnicalClassificationName(entidadInicial.technicalClassification)
                                    + " ,reemplazado por el valor: " + getTechnicalClassificationName(entidad.technicalClassification);
                            }

                            if (entidad.technicalSubclassification != entidadInicial.technicalSubclassification)
                            {
                                BitacoraMensaje = BitacoraMensaje + " ,Subclasificación Técnica: " + getSubTechnicalClassificationName(entidadInicial.technicalSubclassification)
                                    + " ,reemplazado por el valor: " + getSubTechnicalClassificationName(entidad.technicalSubclassification);
                            }

                            if (objeto.actionManager == (int)ActionManager.Rechazar || objeto.actionManager == (int)ActionManager.Observar)
                            {
                                BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + objeto.comments + " ";
                            }

                            BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationOwner(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            var flujosCorreos = new List<string>();
            var usuariosAutorizadores = string.Empty;
            var emailSolicitante = string.Empty;
            var emailOwner = objeto.EmailSolicitante; ;
            var solicitudAprobada = false;

            var nuevaUnidad = string.Empty;

            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        if (entidad.isApproved == false)
                        {
                            if (entidad == null) dataResult.EstadoTransaccion = false;

                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    var ownersActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador && x.isActive).ToList();

                                    for (int i = 0; i < objeto.Owners.Count; i++)
                                    {
                                        int count = objeto.Owners.Take(i + 1)
                                                        .Count(r => r.username == objeto.Owners[i].username);
                                        objeto.Owners[i].Count = count;
                                    }

                                    objeto.Owners.RemoveAll(x => x.Count >= 2);

                                    foreach (ApplicationManagerCatalog a in ownersActuales)
                                    {
                                        ctx.ApplicationManagerCatalog.Remove(a);
                                    }

                                    foreach (OwnerDto owner in objeto.Owners)
                                    {
                                        //Validar experto
                                        if (!string.IsNullOrEmpty(owner.email)
                                        && !string.IsNullOrEmpty(owner.username)
                                        && !string.IsNullOrEmpty(owner.managerName))
                                        {
                                            //Registrando rol
                                            var nuevoRol = new ApplicationManagerCatalog()
                                            {
                                                applicationId = entidad.applicationId,
                                                applicationManagerCatalogId = 0,
                                                applicationManagerId = (int)ApplicationManagerRole.UsuarioAutorizador,
                                                createdBy = objeto.registerBy,
                                                dateCreation = DateTime.Now,
                                                email = owner.email,
                                                isActive = true,
                                                managerName = owner.managerName,
                                                username = owner.username
                                            };
                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                            usuariosAutorizadores = usuariosAutorizadores + owner.managerName + ";";
                                        }
                                    }

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;

                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                        foreach (OwnerDto owner in objeto.Owners)
                                        {
                                            if (!string.IsNullOrEmpty(owner.email)
                                            && !string.IsNullOrEmpty(owner.username)
                                            && !string.IsNullOrEmpty(owner.managerName))
                                            {
                                                var flujoData = new ApplicationFlowData()
                                                {
                                                    createdBy = objeto.registerBy,
                                                    currentValue = string.Empty,
                                                    DataId = 0,
                                                    dateCreation = DateTime.Now,
                                                    fieldId = (int)Campos.Gestor,
                                                    FlowAppId = flujo.FlowAppId,
                                                    newValue = owner.managerName,
                                                    typeFlow = (int)Flow.Registro
                                                };
                                                ctx.ApplicationFlowData.Add(flujoData);
                                            }
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }

                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.observedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateObserved = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isObserved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                ctx.SaveChanges();

                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[LiderUsuario]", objeto.NombreUsuarioModificacion);
                                diccionario.Add("[UnidadOrganizativa]", this.getUnitName(entidad.unit));
                                diccionario.Add("[UsuariosAutorizadores]", usuariosAutorizadores);

                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AprobacionLiderUsuario, entidad.applicationId, diccionario);
                                            //mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionUsuarioAutorizador, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2RechazoLiderUsuario, entidad.applicationId, diccionario);
                                        }; break;

                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[ArquitectoActual]", objeto.NombreUsuarioModificacion);
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionLiderUsuario, entidad.applicationId, diccionario);
                                        }; break;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }
                        else if (entidad.isApproved == true)
                        {
                            if (entidad == null) dataResult.EstadoTransaccion = false;

                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        if (flujo.isActiveOwner == true && flujo.isActive == true && flujo.isApproved == true)
                                        {
                                            var ownersActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador && x.isActive).ToList();

                                            for (int i = 0; i < objeto.Owners.Count; i++)
                                            {
                                                int count = objeto.Owners.Take(i + 1)
                                                                .Count(r => r.username == objeto.Owners[i].username);
                                                objeto.Owners[i].Count = count;
                                            }

                                            objeto.Owners.RemoveAll(x => x.Count >= 2);

                                            foreach (ApplicationManagerCatalog a in ownersActuales)
                                            {
                                                ctx.ApplicationManagerCatalog.Remove(a);
                                            }

                                            foreach (OwnerDto owner in objeto.Owners)
                                            {
                                                //Validar experto
                                                if (!string.IsNullOrEmpty(owner.email)
                                                && !string.IsNullOrEmpty(owner.username)
                                                && !string.IsNullOrEmpty(owner.managerName))
                                                {
                                                    //Registrando rol
                                                    var nuevoRol = new ApplicationManagerCatalog()
                                                    {
                                                        applicationId = entidad.applicationId,
                                                        applicationManagerCatalogId = 0,
                                                        applicationManagerId = (int)ApplicationManagerRole.UsuarioAutorizador,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        email = owner.email,
                                                        isActive = true,
                                                        managerName = owner.managerName,
                                                        username = owner.username
                                                    };
                                                    ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    usuariosAutorizadores = usuariosAutorizadores + owner.managerName + ";";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            flujo.approvedBy = objeto.registerBy;
                                            flujo.dateApproved = DateTime.Now;
                                            flujo.isApproved = true;
                                            flujo.isCompleted = true;
                                            flujo.isNotified = true;
                                            flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                            //Validar si el flujo del otro aprobador ya se aprobo antes de aprobar la solicitud
                                            var flujosSolicitud = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId && x.FlowAppId != flujo.FlowAppId);
                                            if (flujosSolicitud != null)
                                            {
                                                var aprobado = flujosSolicitud.isApproved.HasValue ? flujosSolicitud.isApproved.Value : false;
                                                if (aprobado)
                                                {
                                                    //Se aprueba la solicitud
                                                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                    if (solicitud != null)
                                                    {
                                                        solicitudAprobada = true;
                                                        solicitud.UsuarioModificacion = objeto.registerBy;
                                                        solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                                        solicitud.NombreUsuarioAprobacion = objeto.NombreUsuarioModificacion;
                                                        solicitud.FlagAprobacion = true;
                                                        solicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                                                        solicitud.FechaModificacion = DateTime.Now;

                                                        flujo.isActiveOwner = true;

                                                        ////Desactivar el rol anterior
                                                        var rolJefeAnterior = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId
                                                                                    && x.isActive == true
                                                                                    && x.applicationManagerId == (int)ApplicationManagerRole.Owner);
                                                        if (rolJefeAnterior != null)
                                                        {
                                                            rolJefeAnterior.isActive = false;
                                                            rolJefeAnterior.dateModification = DateTime.Now;
                                                        }

                                                        ////Agregar al nuevo y actualizar el equipo
                                                        var data = ctx.SolicitudCampos.FirstOrDefault(x => x.SolicitudId == solicitud.SolicitudAplicacionId);
                                                        if (data != null)
                                                        {
                                                            entidad.unit = int.Parse(data.NuevoValor);
                                                            nuevaUnidad = getUnitName(entidad.unit);

                                                            var equipo = ctx.Unidad.FirstOrDefault(x => x.UnidadId == entidad.unit);
                                                            if (equipo != null)
                                                            {
                                                                var rolNuevo = new ApplicationManagerCatalog()
                                                                {
                                                                    applicationId = entidad.applicationId,
                                                                    applicationManagerId = (int)ApplicationManagerRole.Owner,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    email = equipo.ResponsableCorreo,
                                                                    isActive = true,
                                                                    managerName = equipo.Responsable,
                                                                    username = equipo.ResponsableMatricula
                                                                };
                                                                ctx.ApplicationManagerCatalog.Add(rolNuevo);
                                                            }
                                                        }

                                                        //Desactivar todos los gestores anteriores
                                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationManagerCatalog set isActive=0 where applicationId='{0}' and applicationManagerId=5"
                                                            , entidad.applicationId));

                                                        var ownersActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador && x.isActive).ToList();

                                                        for (int i = 0; i < objeto.Owners.Count; i++)
                                                        {
                                                            int count = objeto.Owners.Take(i + 1)
                                                                            .Count(r => r.username == objeto.Owners[i].username);
                                                            objeto.Owners[i].Count = count;
                                                        }

                                                        objeto.Owners.RemoveAll(x => x.Count >= 2);

                                                        foreach (ApplicationManagerCatalog a in ownersActuales)
                                                        {
                                                            ctx.ApplicationManagerCatalog.Remove(a);
                                                        }

                                                        foreach (OwnerDto owner in objeto.Owners)
                                                        {
                                                            //Validar experto
                                                            if (!string.IsNullOrEmpty(owner.email)
                                                            && !string.IsNullOrEmpty(owner.username)
                                                            && !string.IsNullOrEmpty(owner.managerName))
                                                            {
                                                                //Registrando rol
                                                                var nuevoRol = new ApplicationManagerCatalog()
                                                                {
                                                                    applicationId = entidad.applicationId,
                                                                    applicationManagerCatalogId = 0,
                                                                    applicationManagerId = (int)ApplicationManagerRole.UsuarioAutorizador,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    email = owner.email,
                                                                    isActive = true,
                                                                    managerName = owner.managerName,
                                                                    username = owner.username
                                                                };
                                                                ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                                usuariosAutorizadores = usuariosAutorizadores + owner.managerName + ";";
                                                            }
                                                        }

                                                        EnviarCorreoConfirmacion(solicitud.AplicacionId, solicitud.SolicitudAplicacionId);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                var campo = ctx.SolicitudCampos.FirstOrDefault(x => x.SolicitudId == flujo.SolicitudAplicacionId);

                                                var idUnidadActual = int.Parse(campo.ValorAnterior);
                                                var unidadActual = ctx.Unidad.FirstOrDefault(x => x.UnidadId == idUnidadActual);
                                                var idUnidadNuevo = int.Parse(campo.NuevoValor);
                                                var unidadNuevo = ctx.Unidad.FirstOrDefault(x => x.UnidadId == idUnidadNuevo);

                                                //Es necesario crear la solicitud para el otro Owner
                                                var flujoOwnerNuevo = new ApplicationFlow()
                                                {
                                                    AppId = entidad.AppId,
                                                    createdBy = objeto.registerBy,
                                                    dateCreation = DateTime.Now,
                                                    FlowAppId = 0,
                                                    isActive = true,
                                                    ownerEmail = unidadNuevo.ResponsableCorreo,
                                                    ownerId = unidadNuevo.ResponsableMatricula,
                                                    typeFlow = (int)Flow.Modificacion,
                                                    isCompleted = false,
                                                    isNotified = false,
                                                    typeRegister = (int)ApplicationManagerRole.Owner,
                                                    SolicitudAplicacionId = flujo.SolicitudAplicacionId,
                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                };
                                                ctx.ApplicationFlow.Add(flujoOwnerNuevo);
                                                ctx.SaveChanges();

                                                var flujoOwnerNuevoData = new ApplicationFlowData()
                                                {
                                                    createdBy = objeto.registerBy,
                                                    currentValue = Convert.ToString(idUnidadActual),
                                                    DataId = 0,
                                                    dateCreation = DateTime.Now,
                                                    dateModification = DateTime.Now,
                                                    fieldId = (int)Campos.UnidadUsuaria,
                                                    FlowAppId = flujoOwnerNuevo.FlowAppId,
                                                    newValue = Convert.ToString(idUnidadNuevo),
                                                    typeFlow = (int)Flow.Modificacion
                                                };
                                                ctx.ApplicationFlowData.Add(flujoOwnerNuevoData);
                                                ctx.SaveChanges();

                                                try
                                                {
                                                    var mailManager = new MailingManager();
                                                    var diccionario = new Dictionary<string, string>();
                                                    diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                                    diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                                    diccionario.Add("[Descripcion]", entidad.description);
                                                    diccionario.Add("[UnidadActual]", getUnitName(unidadActual.UnidadId));
                                                    diccionario.Add("[UnidadNueva]", getUnitName(unidadNuevo.UnidadId));

                                                    mailManager.ProcesarEnvioNotificacionesEspecifico((int)NotificationFlow.ActualizacionAsignacionSolicitudModificacionOwner
                                                        , entidad.applicationId
                                                        , diccionario
                                                        , new List<string>() { unidadNuevo.ResponsableCorreo }
                                                        , new List<string>() { solicitud.EmailSolicitante });
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message, ex);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        //Se rechaza la solicitud
                                        var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                        var campo = ctx.SolicitudCampos.FirstOrDefault(x => x.SolicitudId == flujo.SolicitudAplicacionId);

                                        var idUnidadActual = int.Parse(campo.ValorAnterior);
                                        var unidadActual = ctx.Unidad.FirstOrDefault(x => x.UnidadId == idUnidadActual);

                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.ownerId == unidadActual.ResponsableMatricula)
                                        {
                                            flujo.isActiveOwner = true;
                                            flujo.isApproved = true;
                                            flujo.dateApproved = DateTime.Now;
                                            flujo.isNotified = true;
                                            flujo.comments = string.Empty;
                                            flujo.dateRejected = (DateTime?)null;
                                            flujo.rejectedBy = string.Empty;
                                            flujo.rejectedByName = string.Empty;
                                        }
                                        else
                                        {
                                            flujo.isApproved = false;
                                            flujo.isActiveOwner = false;

                                            //Reactivar el flujo anterior
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId && x.FlowAppId != flujo.FlowAppId);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.isActiveOwner = true;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.comments = string.Empty;
                                                flujoAnterior.dateRejected = (DateTime?)null;
                                                flujoAnterior.rejectedBy = string.Empty;
                                                flujoAnterior.rejectedByName = string.Empty;
                                            }
                                        }

                                        if (solicitud != null)
                                        {
                                            solicitud.UsuarioModificacion = objeto.registerBy;
                                            solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitud.NombreUsuarioAprobacion = objeto.NombreUsuarioModificacion;
                                            solicitud.FlagAprobacion = false;
                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                                            solicitud.FechaModificacion = DateTime.Now;
                                            solicitud.Observaciones = objeto.comments;
                                            emailSolicitante = solicitud.EmailSolicitante;
                                        }

                                        flujosCorreos = ctx.ApplicationFlow.Where(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId).Select(x => x.ownerEmail).ToList();
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.isActive = false;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.lastFlowAppId.HasValue)
                                        {
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo.lastFlowAppId.Value);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.approvedBy = objeto.registerBy;
                                                flujoAnterior.comments = "Comentarios del líder usuario que observó la solicitud: " + objeto.comments;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.isCompleted = true;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.isActive = true;

                                            }
                                        }
                                    }
                                }

                                ctx.SaveChanges();
                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            if (solicitudAprobada)
                                            {
                                                diccionario.Add("[UnidadNuevaAplicacion]", nuevaUnidad);
                                                diccionario.Add("[Usuario]", objeto.NombreUsuarioModificacion);
                                                mailManager.ProcesarEnvioNotificacionesEspecifico((int)NotificationFlow.ActualizacionUsuariosAutorizadores
                                                    , entidad.applicationId
                                                    , diccionario
                                                    , new List<string>() { emailOwner }
                                                    , new List<string>() { emailSolicitante });
                                            }
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            diccionario.Add("[LiderUsuario]", objeto.NombreUsuarioModificacion);
                                            mailManager.ProcesarEnvioNotificacionesEspecifico((int)NotificationFlow.ActualizacionRechazoSolicitudModificacionOwner
                                                , entidad.applicationId
                                                , diccionario
                                                , new List<string>() { emailSolicitante }
                                                , flujosCorreos);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            diccionario.Add("[LiderUsuario]", objeto.NombreUsuarioModificacion);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionObervacionLiderUsuario, entidad.applicationId, diccionario);
                                        }; break;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        //Agregar registro en bitácora
                        try
                        {
                            var BitacoraMensaje = "";
                            var accion = "";
                            if (objeto.actionManager == (int)ActionManager.Aprobar) accion = " aprobó ";
                            else if (objeto.actionManager == (int)ActionManager.Observar) accion = " observó ";
                            else accion = " rechazó ";
                            var tipo = "";
                            if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro) { tipo = " registro "; }
                            else if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion) { tipo = " modificación "; }
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");

                            if (objeto.unit != null)
                            {
                                BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " +
                                accion + "la solicitud de " + tipo + "de Owner/Líder Usuario ";


                                if (entidad.unit != objeto.unit && objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " para el cambio de unidad de " + objeto.prevUnitName + "" + " con líder usuario " +
                                      getLiderUnidad(objeto.prevUnitName) + " a " + "" + objeto.unitName + " con líder usuario " + getLiderUnidad(objeto.unitName);

                                }
                            }
                            else
                            {
                                BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " como Owner/Líder Usuario actualizó la aplicación";
                            }



                            if (objeto.Owners != null)
                            {

                                BitacoraMensaje = BitacoraMensaje + ", añadiendo los siguientes Usuarios Autorizadores: ";
                                foreach (OwnerDto owner in objeto.Owners)
                                {
                                    //Validar experto
                                    if (!string.IsNullOrEmpty(owner.email)
                                    && !string.IsNullOrEmpty(owner.username)
                                    && !string.IsNullOrEmpty(owner.managerName))
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " " + owner.managerName + " con matrícula " + owner.username + ",";
                                    }
                                }
                            }

                            if (objeto.actionManager == (int)ActionManager.Rechazar || objeto.actionManager == (int)ActionManager.Observar)
                            {
                                BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + objeto.comments + " ";
                            }

                            BitacoraMensaje = BitacoraMensaje + " para la aplicación " + entidad.applicationId + "" + " - " + "" + entidad.applicationName
                          + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationTeamLeader(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            var requiereCambioPerfil = false;
            var jefeActual = string.Empty;
            var jefeNuevo = string.Empty;

            var equipoActual = string.Empty;
            var equipoNuevo = string.Empty;
            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);

                        equipoActual = getTeamName(entidad.teamId);
                        equipoNuevo = getTeamName(objeto.teamId);

                        if (entidad == null) dataResult.EstadoTransaccion = false;

                        if (dataResult.EstadoTransaccion)
                        {
                            if (entidad.isApproved == false)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    entidad.teamId = objeto.teamId;
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Transferir)
                                {
                                    var teamActual = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                    if (teamActual != null)
                                    {
                                        jefeActual = teamActual.Responsable;
                                        equipoActual = teamActual.Nombre;
                                    }

                                    var teamNuevo = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);
                                    if (teamNuevo != null)
                                    {
                                        jefeNuevo = teamNuevo.Responsable;
                                        equipoNuevo = teamNuevo.Nombre;
                                    }


                                    entidad.teamId = objeto.teamId;
                                    //entidad.registrationSituation = (int)ApplicationSituationRegister.RegistroCompleto;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.transferedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateTransfer = DateTime.Now;
                                        flujo.isApproved = null;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = false;
                                        flujo.isActive = false;
                                        flujo.transferedByName = objeto.NombreUsuarioModificacion;

                                        //Validar Jefe de Equipo
                                        if (objeto.teamId.HasValue)
                                        {
                                            if (objeto.teamId.Value > 0)
                                            {
                                                var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                if (equipo != null)
                                                {
                                                    //Registrando rol
                                                    var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo && x.isActive);
                                                    if (rol != null)
                                                    {
                                                        if (rol.username != equipo.ResponsableMatricula)
                                                        {
                                                            rol.isActive = false;
                                                            rol.dateModification = DateTime.Now;
                                                            rol.modifiedBy = objeto.registerBy;

                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = equipo.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = equipo.Responsable,
                                                            username = equipo.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }

                                                    //Registrando flujo
                                                    var nuevoFlujo = new ApplicationFlow()
                                                    {
                                                        AppId = entidad.AppId,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        FlowAppId = 0,
                                                        isCompleted = false,
                                                        isNotified = false,
                                                        ownerEmail = equipo.ResponsableCorreo,
                                                        ownerId = equipo.ResponsableMatricula,
                                                        typeFlow = (int)Flow.Registro,
                                                        typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                        isActive = true,
                                                        comments = objeto.comments,
                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                    };
                                                    ctx.ApplicationFlow.Add(nuevoFlujo);
                                                }
                                            }
                                        }
                                    }
                                }


                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.observedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateObserved = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isObserved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }

                                ctx.SaveChanges();
                            }
                            else if (entidad.isApproved == true)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                        //Validar si el flujo del otro aprobador ya se aprobo antes de aprobar la solicitud
                                        var totalFlujos = ctx.ApplicationFlow.Where(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId).ToList();
                                        if (totalFlujos != null)
                                        {
                                            if (totalFlujos.Count == 2)
                                            {
                                                var flujosSolicitud = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId && x.FlowAppId != flujo.FlowAppId);
                                                if (flujosSolicitud != null)
                                                {
                                                    var aprobado = flujosSolicitud.isApproved.HasValue ? flujosSolicitud.isApproved.Value : false;
                                                    if (aprobado)
                                                    {
                                                        //Se aprueba la solicitud
                                                        var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                        if (solicitud != null)
                                                        {
                                                            solicitud.UsuarioModificacion = objeto.registerBy;
                                                            solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                                            solicitud.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                                            solicitud.FlagAprobacion = false;
                                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                                                            solicitud.FechaModificacion = DateTime.Now;

                                                            ////Agregar al nuevo y actualizar el equipo
                                                            var data = ctx.SolicitudCampos.Where(x => x.SolicitudId == solicitud.SolicitudAplicacionId).ToList();

                                                            if (data != null)
                                                            {
                                                                if (data.Count == 2)
                                                                {
                                                                    switch (data[0].ColumnaId.Value)
                                                                    {
                                                                        case (int)Campos.GestionadoPor:
                                                                            entidad.managed = int.Parse(data[0].NuevoValor);
                                                                            break;
                                                                        case (int)Campos.NombreEquipo:
                                                                            entidad.teamId = string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor);
                                                                            break;
                                                                    }

                                                                    switch (data[1].ColumnaId.Value)
                                                                    {
                                                                        case (int)Campos.GestionadoPor:
                                                                            entidad.managed = int.Parse(data[1].NuevoValor);
                                                                            break;
                                                                        case (int)Campos.NombreEquipo:
                                                                            entidad.teamId = string.IsNullOrWhiteSpace(data[1].NuevoValor) ? (int?)null : int.Parse(data[1].NuevoValor);
                                                                            break;
                                                                    }

                                                                    requiereCambioPerfil = true;
                                                                }
                                                                else if (data.Count == 1)
                                                                {
                                                                    switch (data[0].ColumnaId.Value)
                                                                    {
                                                                        case (int)Campos.GestionadoPor:
                                                                            {
                                                                                //Modificar la solicitud para que lo apruebe el admin
                                                                                solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                                                            }
                                                                            break;
                                                                        case (int)Campos.NombreEquipo:
                                                                            {
                                                                                entidad.teamId = string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor);
                                                                            }
                                                                            break;
                                                                    }
                                                                }

                                                                var gestionadoDestino = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(entidad.managed.Value);

                                                                var flagTTL = gestionadoDestino.FlagEquipoAgil.HasValue ? gestionadoDestino.FlagEquipoAgil.Value : false;
                                                                var flagJdE = gestionadoDestino.FlagJefeEquipo.HasValue ? gestionadoDestino.FlagJefeEquipo.Value : false;
                                                                var flagUserIT = gestionadoDestino.FlagUserIT.HasValue ? gestionadoDestino.FlagUserIT.Value : false;

                                                                if (requiereCambioPerfil)
                                                                {
                                                                    var rol = 0;
                                                                    if (flagTTL)
                                                                        rol = (int)ApplicationManagerRole.TTL;
                                                                    if (flagJdE)
                                                                        rol = (int)ApplicationManagerRole.JefeDeEquipo;

                                                                    //Asignar al nuevo  jefe de equipo, desactivar el rol anterior y agregarlo el nuevo
                                                                    ////Desactivar el rol anterior
                                                                    if (rol != 0)
                                                                    {
                                                                        var rolJdEAnterior = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId
                                                                                                && x.isActive == true
                                                                                                && x.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo);
                                                                        if (rolJdEAnterior != null)
                                                                        {
                                                                            rolJdEAnterior.isActive = false;
                                                                            rolJdEAnterior.dateModification = DateTime.Now;
                                                                        }

                                                                        var rolTTLAnterior = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId
                                                                                                && x.isActive == true
                                                                                                && x.applicationManagerId == (int)ApplicationManagerRole.TTL);
                                                                        if (rolTTLAnterior != null)
                                                                        {
                                                                            rolTTLAnterior.isActive = false;
                                                                            rolTTLAnterior.dateModification = DateTime.Now;
                                                                        }


                                                                        var equipo = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                                                        if (equipo != null)
                                                                        {
                                                                            var rolNuevo = new ApplicationManagerCatalog()
                                                                            {
                                                                                applicationId = entidad.applicationId,
                                                                                applicationManagerId = rol,
                                                                                createdBy = objeto.registerBy,
                                                                                dateCreation = DateTime.Now,
                                                                                email = equipo.ResponsableCorreo,
                                                                                isActive = true,
                                                                                managerName = equipo.Responsable,
                                                                                username = equipo.ResponsableMatricula
                                                                            };
                                                                            ctx.ApplicationManagerCatalog.Add(rolNuevo);
                                                                        }

                                                                        if (flagTTL)
                                                                        {
                                                                            //Quitar el TL anterior
                                                                            ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationManagerCatalog set isActive='false' where applicationId='{0}' and applicationManagerId=7;", entidad.applicationId));
                                                                            //Registrando TL
                                                                            var tlTeam = ctx.TribeLeader.FirstOrDefault(x => x.EquipoId == objeto.teamId.Value);
                                                                            if (tlTeam != null)
                                                                            {
                                                                                var rolTL = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TL && x.isActive);
                                                                                if (rolTL != null)
                                                                                {
                                                                                    if (rolTL.username != tlTeam.ResponsableMatricula)
                                                                                    {
                                                                                        rolTL.isActive = false;
                                                                                        rolTL.dateModification = DateTime.Now;
                                                                                        rolTL.modifiedBy = objeto.registerBy;

                                                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                                                        {
                                                                                            applicationId = entidad.applicationId,
                                                                                            applicationManagerCatalogId = 0,
                                                                                            applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                                            createdBy = objeto.registerBy,
                                                                                            dateCreation = DateTime.Now,
                                                                                            email = tlTeam.ResponsableCorreo,
                                                                                            isActive = true,
                                                                                            managerName = tlTeam.Responsable,
                                                                                            username = tlTeam.ResponsableMatricula
                                                                                        };
                                                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    var nuevoRol = new ApplicationManagerCatalog()
                                                                                    {
                                                                                        applicationId = entidad.applicationId,
                                                                                        applicationManagerCatalogId = 0,
                                                                                        applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                                        createdBy = objeto.registerBy,
                                                                                        dateCreation = DateTime.Now,
                                                                                        email = tlTeam.ResponsableCorreo,
                                                                                        isActive = true,
                                                                                        managerName = tlTeam.Responsable,
                                                                                        username = tlTeam.ResponsableMatricula
                                                                                    };
                                                                                    ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                if (flagUserIT)
                                                                {
                                                                    var tipoActivoUserIT = ServiceManager<ActivosDAO>.Provider.GetActivosByUserIT();
                                                                    if (tipoActivoUserIT != null)
                                                                    {
                                                                        entidad.assetType = tipoActivoUserIT.Id;
                                                                        entidad.teamId = null;
                                                                    }
                                                                }

                                                                if (flagJdE)
                                                                {
                                                                    var parametroGestionadoPor = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "GESTIONADO_POR_IDT_TACTICO");
                                                                    if (parametroGestionadoPor != null)
                                                                    {
                                                                        if (gestionadoDestino.Nombre.ToUpper() == parametroGestionadoPor.Valor.ToUpper())
                                                                        {
                                                                            var parametroTipoActivo = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "TIPO_ACTIVO_IDT_TACTICO");
                                                                            if (parametroTipoActivo != null)
                                                                            {
                                                                                var tipoIDTTactico = ctx.TipoActivoInformacion.FirstOrDefault(x => x.Nombre == parametroTipoActivo.Valor & x.FlagActivo);
                                                                                if (tipoIDTTactico != null)
                                                                                {
                                                                                    entidad.assetType = tipoIDTTactico.TipoActivoInformacionId;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                EnviarCorreoConfirmacion(solicitud.AplicacionId, solicitud.SolicitudAplicacionId);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else if (totalFlujos.Count == 1)
                                            {
                                                //Modificar la solicitud para q la apruebe el portafolio
                                                var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                if (solicitud != null)
                                                {
                                                    solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                                    solicitud.FechaModificacion = DateTime.Now;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;

                                        //Se rechaza la solicitud
                                        var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                        if (solicitud != null)
                                        {
                                            solicitud.UsuarioModificacion = objeto.registerBy;
                                            solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitud.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitud.FlagAprobacion = false;
                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                                            solicitud.FechaModificacion = DateTime.Now;
                                            solicitud.Observaciones = objeto.comments;
                                        }

                                        //Se rechaza el resto de flujos
                                        var otroFlujo = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == solicitud.SolicitudAplicacionId && x.isCompleted == false && x.FlowAppId != flujo.FlowAppId);
                                        if (otroFlujo != null)
                                        {
                                            otroFlujo.rejectedBy = objeto.registerBy;
                                            otroFlujo.comments = "Rechazado por el otro aprobador: " + objeto.comments;
                                            otroFlujo.dateRejected = DateTime.Now;
                                            otroFlujo.isApproved = false;
                                            otroFlujo.isCompleted = true;
                                            otroFlujo.isNotified = true;
                                        }
                                    }
                                }

                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.isActive = false;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.lastFlowAppId.HasValue)
                                        {
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo.lastFlowAppId.Value);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.approvedBy = objeto.registerBy;
                                                flujoAnterior.comments = "Comentarios del jefe de equipo que observó la solicitud: " + objeto.comments;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.isCompleted = true;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.isActive = true;

                                            }
                                        }
                                    }
                                }

                                ctx.SaveChanges();
                            }

                            ID = entidad.AppId;
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        if (entidad.isApproved == false)
                        {
                            var detalleAplicacion = this.GetApplicationById(entidad.AppId);
                            try
                            {
                                var experto = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto);
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[GestionadoPor]", this.getManagedName(entidad.managed));
                                diccionario.Add("[NombreEquipo]", this.getTeamName(entidad.teamId));
                                diccionario.Add("[JefeEquipo]", objeto.NombreUsuarioModificacion);
                                diccionario.Add("[FechaRegistro]", entidad.registerDate.Value.ToString("dd/MM/yyyy"));
                                diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2(ApplicationSituationRegister.RegistroParcial));
                                diccionario.Add("[Experto]", string.IsNullOrEmpty(detalleAplicacion.expertName) ? "No configurado" : detalleAplicacion.expertName);
                                diccionario.Add("[EstadoAplicacion]", this.getStatusName(entidad.status));

                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AprobacionJefeEquipo, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Transferir:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            diccionario.Add("[EquipoActual]", equipoActual);
                                            diccionario.Add("[JefeActual]", jefeActual);
                                            diccionario.Add("[EquipoNuevo]", equipoNuevo);
                                            diccionario.Add("[JefeNuevo]", jefeNuevo);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2TransferenciaJefeEquipo, entidad.applicationId, diccionario);
                                            //mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionJefeEquipo, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2RechazoJefeEquipo, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                 
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionJefeEquipo, entidad.applicationId, diccionario);
                                        }; break;

                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }
                        else if (entidad.isApproved == true)
                        {
                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[JefeEquipo]", objeto.NombreUsuarioModificacion);
                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionAprobacionSolicitudModificacionEquipo, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionRechazoSolicitudModificacionEquipo, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionObervacionJefeEquipo, entidad.applicationId, diccionario);
                                        }; break;

                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }



                        }
                        //Agregar registro en bitácora
                        try
                        {
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            var tipo = "";
                            if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro) { tipo = " registro "; }
                            else if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion) { tipo = " modificación "; }
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");

                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " ";

                            if (objeto.actionManager == (int)ActionManager.Rechazar)
                            {
                                BitacoraMensaje = BitacoraMensaje + "rechazó la solicitud de" + tipo + "de jefatura de equipo de la aplicación "
                                      + entidad.applicationId +
                                      " " + " - " + "" + entidad.applicationName +
                                      " con los siguientes cambios: Equipo de: " + equipoActual + " a: " + equipoNuevo +
                                      " por el siguiente motivo: "
                                      + objeto.comments;
                            }
                            else if (objeto.actionManager == (int)ActionManager.Observar)
                            {
                                BitacoraMensaje = BitacoraMensaje + "observó la solicitud de" + tipo + "de jefatura de equipo de la aplicación "
                                      + entidad.applicationId +
                                      " " + " - " + "" + entidad.applicationName +
                                      " con los siguientes cambios: Equipo de: " + equipoActual + " a: " + equipoNuevo +
                                      " por el siguiente motivo: "
                                      + objeto.comments;
                            }
                            else if (objeto.actionManager == (int)ActionManager.Aprobar)
                            {
                                BitacoraMensaje = BitacoraMensaje + "aprobó la solicitud de" + tipo + "de jefatura de equipo de la aplicación " + entidad.applicationId +
                                    " " + " - " + "" + entidad.applicationName + "" +
                                      " con los siguientes cambios: Equipo de: " + equipoActual + " a: " + equipoNuevo;

                            }
                            else if (objeto.actionManager == (int)ActionManager.Transferir)
                            {
                                BitacoraMensaje = BitacoraMensaje + "transfirió la solicitud de" + tipo + "de jefatura de equipo de la aplicación" + entidad.applicationId +
                                    " " + " - " + "" + entidad.applicationName + " a:" +
                                    getTeamName(objeto.teamId) + " por el siguiente motivo: "
                                      + objeto.comments;
                            }

                            BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override void ValidateRegister(int id)
        {
            var complete = true;
            var codigoAPT = string.Empty;

            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == id);

                    if (app != null)
                    {
                        codigoAPT = app.applicationId;

                        var aprobado = app.isApproved.HasValue ? app.isApproved.Value : false;

                        if (!aprobado)
                        {
                            var gestionado = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == app.managed);

                            var esUserITFlag = gestionado.FlagUserIT.HasValue ? gestionado.FlagUserIT.Value : false;
                            var tieneJefeEquipoFlag = gestionado.FlagJefeEquipo.HasValue ? gestionado.FlagJefeEquipo.Value : false;
                            var tieneTtlFlag = gestionado.FlagEquipoAgil.HasValue ? gestionado.FlagEquipoAgil.Value : false;
                            var esSubsidiariasFlag = gestionado.FlagSubsidiarias.HasValue ? gestionado.FlagSubsidiarias.Value : false;

                            if (string.IsNullOrWhiteSpace(app.applicationId))
                                complete = false;
                            else if (string.IsNullOrWhiteSpace(app.applicationName))
                                complete = false;
                            else if (string.IsNullOrWhiteSpace(app.description))
                                complete = false;
                            else if (!app.implementationType.HasValue)
                                complete = false;
                            else if (!app.managed.HasValue)
                                complete = false;
                            else if (!app.deploymentType.HasValue)
                                complete = false;
                            else if (!app.status.HasValue)
                                complete = false;
                            else if (!app.unit.HasValue)
                                complete = false;
                            else if (!app.teamId.HasValue)
                            {
                                if (tieneJefeEquipoFlag)
                                    complete = false;
                            }
                            else if (string.IsNullOrWhiteSpace(app.userEntity))
                                complete = false;
                            else if (string.IsNullOrWhiteSpace(app.developmentType))
                                complete = false;
                            else if (!app.infrastructure.HasValue)
                                complete = false;
                            else if (!app.assetType.HasValue)
                                complete = false;
                            else if (!app.technologyCategory.HasValue)
                                complete = false;
                            else if (!app.technicalClassification.HasValue)
                                complete = false;
                            else if (!app.BIANdomain.HasValue)
                                complete = false;
                            else if (!app.mainOffice.HasValue)
                                complete = false;
                            else if (!app.authenticationMethod.HasValue)
                                complete = false;
                            else if (!app.authorizationMethod.HasValue)
                                complete = false;
                            else if (string.IsNullOrWhiteSpace(app.developmentProvider))
                                complete = false;
                            else if (!app.groupTicketRemedy.HasValue && !esUserITFlag)
                                complete = false;

                            var roles = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == app.applicationId).ToList();
                            if (roles != null)
                            {
                                var gestionadoPor = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == app.managed);
                                if (gestionadoPor != null)
                                {
                                    var flagUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;
                                    var flagAgil = gestionadoPor.FlagEquipoAgil.HasValue ? gestionadoPor.FlagEquipoAgil.Value : false;
                                    var flagJefeEquipo = gestionadoPor.FlagJefeEquipo.HasValue ? gestionadoPor.FlagJefeEquipo.Value : false;

                                    var experto = (from u in roles
                                                   where u.applicationManagerId == (int)ApplicationManagerRole.Experto && u.isActive
                                                   select u);
                                    if (!experto.Any())
                                        complete = false;

                                    var lider = (from u in roles
                                                 where u.applicationManagerId == (int)ApplicationManagerRole.Owner && u.isActive
                                                 select u);
                                    if (!lider.Any())
                                        complete = false;

                                    var usuarioAutorizador = (from u in roles
                                                              where u.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador && u.isActive
                                                              select u);
                                    if (!usuarioAutorizador.Any())
                                        complete = false;

                                    if (flagAgil)
                                    {
                                        var ttl = (from u in roles
                                                   where u.applicationManagerId == (int)ApplicationManagerRole.TTL && u.isActive
                                                   select u);
                                        if (!ttl.Any())
                                            complete = false;
                                    }

                                    if (flagJefeEquipo)
                                    {
                                        var jefeEquipo = (from u in roles
                                                          where u.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo && u.isActive
                                                          select u);
                                        if (!jefeEquipo.Any())
                                            complete = false;
                                    }

                                    //Validar los roles
                                    var flujos = ctx.ApplicationFlow.Where(x => x.AppId == id).ToList();
                                    if (flujos != null)
                                    {
                                        var arquitectoTI = (from u in flujos
                                                            where u.isApproved == true && u.isCompleted == true && u.typeRegister == (int)ApplicationManagerRole.ArquitectoTI
                                                            select u);
                                        if (!arquitectoTI.Any())
                                            complete = false;

                                        var arquitectoEvaluador = (from u in flujos
                                                                   where u.isApproved == true && u.isCompleted == true && u.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador
                                                                   select u);
                                        if (!arquitectoEvaluador.Any())
                                            complete = false;

                                        var devsecops = (from u in flujos
                                                         where u.isApproved == true && u.isCompleted == true && u.typeRegister == (int)ApplicationManagerRole.DevSecOps
                                                         select u);
                                        if (!devsecops.Any())
                                            complete = false;

                                        var owner = (from u in flujos
                                                     where u.isApproved == true && u.isCompleted == true && u.typeRegister == (int)ApplicationManagerRole.Owner
                                                     select u);
                                        if (!owner.Any())
                                            complete = false;

                                        if (flagUserIT)
                                        {
                                            var gobiernoUserIT = (from u in flujos
                                                                  where u.isApproved == true && u.isCompleted == true && u.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT
                                                                  select u);
                                            if (!gobiernoUserIT.Any())
                                                complete = false;
                                        }
                                        else
                                        {
                                            if (flagAgil)
                                            {
                                                var ttl = (from u in flujos
                                                           where u.isApproved == true && u.isCompleted == true && u.typeRegister == (int)ApplicationManagerRole.TTL
                                                           select u);
                                                if (!ttl.Any())
                                                    complete = false;
                                            }
                                            else
                                            {
                                                if (flagJefeEquipo)
                                                {
                                                    var jde = (from u in flujos
                                                               where u.isApproved == true && u.isCompleted == true && u.typeRegister == (int)ApplicationManagerRole.JefeDeEquipo
                                                               select u);
                                                    if (!jde.Any())
                                                        complete = false;
                                                }
                                            }
                                        }
                                    }
                                    else
                                        complete = false;
                                }
                                else
                                    complete = false;
                            }
                            else
                                complete = false;

                            if (complete)
                            {
                                app = ctx.Application.FirstOrDefault(x => x.AppId == id);
                                if (app.registrationSituation != (int)ApplicationSituationRegister.RegistroCompleto)
                                {
                                    app.registrationSituation = (int)ApplicationSituationRegister.RegistroCompleto;
                                    app.isObserved = null;
                                    app.isApproved = false;
                                    app.dateRegistrationSituationComplete = DateTime.Now;

                                    if (app.isReactivated == true)
                                        app.EstadoReactivacion = (int)EstadoReactivacion.AplicaciónReactivada;

                                    if (!tieneTtlFlag)
                                    {
                                        //Buscar broker activo
                                        var broker = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == app.applicationId && x.isActive && x.applicationManagerId == (int)ApplicationManagerRole.Broker);
                                        if (broker == null)
                                        {
                                            //Agregar nuevo broker
                                            if (app.unit.HasValue)
                                            {
                                                var brokerUnidad = ctx.Broker.FirstOrDefault(x => x.isActive && x.UnidadId == app.unit.Value);
                                                if (brokerUnidad != null)
                                                {
                                                    var role = new ApplicationManagerCatalog()
                                                    {
                                                        applicationId = app.applicationId,
                                                        applicationManagerId = (int)ApplicationManagerRole.Broker,
                                                        applicationManagerCatalogId = 0,
                                                        dateCreation = DateTime.Now,
                                                        email = brokerUnidad.ownerEmail,
                                                        isActive = true,
                                                        managerName = brokerUnidad.ownerName,
                                                        username = brokerUnidad.ownerId,
                                                        createdBy = "auto"
                                                    };
                                                    ctx.ApplicationManagerCatalog.Add(role);
                                                }
                                            }
                                        }
                                    }
                                    ctx.SaveChanges();

                                    try
                                    {
                                        var mailManager = new MailingManager();
                                        var diccionario = new Dictionary<string, string>();
                                        diccionario.Add("[CodigoAPT]", app.applicationId);
                                        diccionario.Add("[NombreAplicacion]", app.applicationName);

                                        mailManager.ProcesarEnvioNotificacionesAdministradores((int)NotificationFlow.M2AplicacionSituaciónRegistroCompleto, app.applicationId, diccionario, true, true);
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message, ex);
                                    }
                                }
                            }
                            else
                            {
                                app.registrationSituation = (int)ApplicationSituationRegister.RegistroParcial;
                                ctx.SaveChanges();
                            }
                        }
                    }
                }

                this.SincronizarConCVT(codigoAPT);
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: void ValidateRegister(string id)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: void ValidateRegister(string id)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationEvalUserIT(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            string campos = string.Empty;
            string cambios = string.Empty;
            var requiereCambioPerfil = false;
            var requiereReinicio = false;
            var solicitudId = 0;

            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == flujo.AppId);

                        if (entidad == null) dataResult.EstadoTransaccion = false;

                        if (entidad.isApproved == false)
                        {
                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    entidad.assetType = objeto.assetType;
                                    entidad.status = objeto.status;
                                    entidad.isFormalApplication = objeto.isFormalApplication;
                                    entidad.regularizationDate = objeto.isFormalApplication.HasValue ? (objeto.isFormalApplication.Value ? objeto.regularizationDate : (DateTime?)null) : (DateTime?)null;

                                    //var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                    }

                                    //Crear flujo para el arquitecto evaluador si en caso no lo tenga y el app no esté aprobada
                                    var aprobado = entidad.isApproved.HasValue ? entidad.isApproved.Value : false;
                                    if (!aprobado)
                                    {
                                        var flujoArquitectoActivo = ctx.ApplicationFlow.FirstOrDefault(x => x.AppId == entidad.AppId && x.isActive == true && x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador);
                                        if (flujoArquitectoActivo == null)
                                        {
                                            var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(entidad.architectId.Value);

                                            if (arquitectoEvaluador != null)
                                            {
                                                //Registrando el flujo para el arquitecto para aplicaciones que no son User IT
                                                var flujoArquitecto = new ApplicationFlow()
                                                {
                                                    AppId = entidad.AppId,
                                                    createdBy = objeto.registerBy,
                                                    dateCreation = DateTime.Now,
                                                    isCompleted = false,
                                                    isNotified = false,
                                                    ownerId = arquitectoEvaluador.Matricula,
                                                    ownerEmail = arquitectoEvaluador.Correo,
                                                    typeFlow = (int)Flow.Registro,
                                                    typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                                    isActive = true,
                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                };
                                                ctx.ApplicationFlow.Add(flujoArquitecto);
                                            }

                                            //Desactivar los flujos de los otros aprobadores
                                            ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false', isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                                , entidad.AppId, (int)ApplicationManagerRole.GobiernoUserIT, flujo.ownerId));
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;

                                        //Desactivar los flujos de los otros aprobadores
                                        ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationFlow set isActive='false', isCompleted='true' where AppId={0} and typeRegister={1} and ownerId!='{2}'"
                                            , entidad.AppId, (int)ApplicationManagerRole.GobiernoUserIT, flujo.ownerId));
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo2 = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo2 != null)
                                    {
                                        flujo2.observedBy = objeto.registerBy;
                                        flujo2.comments = objeto.comments;
                                        flujo2.dateObserved = DateTime.Now;
                                        flujo2.isApproved = false;
                                        flujo2.isObserved = true;
                                        flujo2.isCompleted = true;
                                        flujo2.isNotified = true;
                                        flujo2.observedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }

                                ctx.SaveChanges();
                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                                diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2((ApplicationSituationRegister)entidad.registrationSituation.Value));
                                diccionario.Add("[TipoActivo]", this.getAssetTypeName(entidad.assetType));
                                diccionario.Add("[Cumplimiento]", entidad.isFormalApplication.HasValue ? entidad.isFormalApplication.Value ? "Sí" : "No" : "No");

                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AprobacionGobiernoUserIT, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2RechazoGobiernoUserIT, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionUserIT, entidad.applicationId, diccionario);
                                        }; break;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }
                        else if (entidad.isApproved == true)
                        {
                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;

                                        //Validar si el flujo del otro aprobador ya se aprobo antes de aprobar la solicitud
                                        var totalFlujos = ctx.ApplicationFlow.Where(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId).ToList();
                                        if (totalFlujos != null)
                                        {
                                            if (totalFlujos.Count == 2)
                                            {
                                                var flujosSolicitud = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId && x.FlowAppId != flujo.FlowAppId);
                                                if (flujosSolicitud != null)
                                                {
                                                    var aprobado = flujosSolicitud.isApproved.HasValue ? flujosSolicitud.isApproved.Value : false;
                                                    if (aprobado)
                                                    {
                                                        //Se aprueba la solicitud
                                                        var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                        if (solicitud != null)
                                                        {
                                                            solicitud.UsuarioModificacion = objeto.registerBy;
                                                            solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                                            solicitud.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                                            solicitud.FlagAprobacion = false;
                                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                                                            solicitud.FechaModificacion = DateTime.Now;

                                                            ////Agregar al nuevo y actualizar el equipo
                                                            var data = ctx.SolicitudCampos.Where(x => x.SolicitudId == solicitud.SolicitudAplicacionId).ToList();

                                                            if (data != null)
                                                            {
                                                                if (data.Count == 2)
                                                                {
                                                                    switch (data[0].ColumnaId.Value)
                                                                    {
                                                                        case (int)Campos.GestionadoPor:
                                                                            cambios += " , Gestionado por de: " + getManagedName(entidad.managed) + " a: " + getManagedName(int.Parse(data[0].NuevoValor));
                                                                            entidad.managed = int.Parse(data[0].NuevoValor);
                                                                            campos = campos + "- Gestionado por <br/>";
                                                                            break;
                                                                        case (int)Campos.NombreEquipo:
                                                                            cambios += " , Equipo/Squad de: " + getTeamName(entidad.teamId) + " a: " + getTeamName(string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor));
                                                                            entidad.teamId = string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor);
                                                                            campos = campos + "- Nombre de equipo/Squad <br/>";
                                                                            break;
                                                                    }

                                                                    switch (data[1].ColumnaId.Value)
                                                                    {
                                                                        case (int)Campos.GestionadoPor:
                                                                            cambios += " , Gestionado por de: " + getManagedName(entidad.managed) + " a: " + getManagedName(int.Parse(data[1].NuevoValor));
                                                                            entidad.managed = int.Parse(data[1].NuevoValor);
                                                                            campos = campos + "- Gestionado por <br/>";
                                                                            break;
                                                                        case (int)Campos.NombreEquipo:
                                                                            cambios += " , Equipo/Squad de: " + getTeamName(entidad.teamId) + " a: " + getTeamName(string.IsNullOrWhiteSpace(data[1].NuevoValor) ? (int?)null : int.Parse(data[1].NuevoValor));
                                                                            entidad.teamId = string.IsNullOrWhiteSpace(data[1].NuevoValor) ? (int?)null : int.Parse(data[1].NuevoValor);
                                                                            campos = campos + "- Nombre de equipo/Squad <br/>";
                                                                            break;
                                                                    }
                                                                    requiereCambioPerfil = true;
                                                                }
                                                                else if (data.Count == 1)
                                                                {
                                                                    switch (data[0].ColumnaId.Value)
                                                                    {
                                                                        case (int)Campos.GestionadoPor:
                                                                            {
                                                                                //Modificar la solicitud para que lo apruebe el admin
                                                                                cambios += " , Gestionado por de: " + getManagedName(entidad.managed) + " a: " + getManagedName(int.Parse(data[0].NuevoValor));
                                                                                solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                                                                campos = campos + "- Gestionado por <br/>";
                                                                            }
                                                                            break;
                                                                        case (int)Campos.NombreEquipo:
                                                                            {
                                                                                cambios += " , Equipo/Squad de: " + getTeamName(entidad.teamId) + " a: " + getTeamName(string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor));
                                                                                entidad.teamId = string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor);
                                                                                campos = campos + "- Nombre de equipo/Squad <br/>";
                                                                            }
                                                                            break;
                                                                    }
                                                                }

                                                                var gestionadoDestino = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(entidad.managed.Value);

                                                                var flagTTL = gestionadoDestino.FlagEquipoAgil.HasValue ? gestionadoDestino.FlagEquipoAgil.Value : false;
                                                                var flagJdE = gestionadoDestino.FlagJefeEquipo.HasValue ? gestionadoDestino.FlagJefeEquipo.Value : false;
                                                                var flagUserIT = gestionadoDestino.FlagUserIT.HasValue ? gestionadoDestino.FlagUserIT.Value : false;

                                                                if (requiereCambioPerfil)
                                                                {
                                                                    var rol = 0;
                                                                    if (flagTTL)
                                                                        rol = (int)ApplicationManagerRole.TTL;
                                                                    if (flagJdE)
                                                                        rol = (int)ApplicationManagerRole.JefeDeEquipo;

                                                                    //Asignar al nuevo  jefe de equipo, desactivar el rol anterior y agregarlo el nuevo
                                                                    ////Desactivar el rol anterior
                                                                    if (rol != 0)
                                                                    {
                                                                        var rolJdEAnterior = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId
                                                                                                && x.isActive == true
                                                                                                && x.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo);
                                                                        if (rolJdEAnterior != null)
                                                                        {
                                                                            rolJdEAnterior.isActive = false;
                                                                            rolJdEAnterior.dateModification = DateTime.Now;
                                                                        }

                                                                        var rolTTLAnterior = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId
                                                                                                && x.isActive == true
                                                                                                && x.applicationManagerId == (int)ApplicationManagerRole.TTL);
                                                                        if (rolTTLAnterior != null)
                                                                        {
                                                                            rolTTLAnterior.isActive = false;
                                                                            rolTTLAnterior.dateModification = DateTime.Now;
                                                                        }


                                                                        var equipo = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                                                        if (equipo != null)
                                                                        {
                                                                            var rolNuevo = new ApplicationManagerCatalog()
                                                                            {
                                                                                applicationId = entidad.applicationId,
                                                                                applicationManagerId = rol,
                                                                                createdBy = objeto.registerBy,
                                                                                dateCreation = DateTime.Now,
                                                                                email = equipo.ResponsableCorreo,
                                                                                isActive = true,
                                                                                managerName = equipo.Responsable,
                                                                                username = equipo.ResponsableMatricula
                                                                            };
                                                                            ctx.ApplicationManagerCatalog.Add(rolNuevo);
                                                                        }
                                                                    }
                                                                }

                                                                if (flagUserIT)
                                                                {
                                                                    var tipoActivoUserIT = ServiceManager<ActivosDAO>.Provider.GetActivosByUserIT();
                                                                    if (tipoActivoUserIT != null)
                                                                    {
                                                                        entidad.assetType = tipoActivoUserIT.Id;
                                                                        entidad.teamId = entidad.teamId;
                                                                    }
                                                                }

                                                                if (flagJdE)
                                                                {
                                                                    var parametroGestionadoPor = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "GESTIONADO_POR_IDT_TACTICO");
                                                                    if (parametroGestionadoPor != null)
                                                                    {
                                                                        if (gestionadoDestino.Nombre.ToUpper() == parametroGestionadoPor.Valor.ToUpper())
                                                                        {
                                                                            var parametroTipoActivo = ctx.ParametroApp.FirstOrDefault(x => x.Codigo == "TIPO_ACTIVO_IDT_TACTICO");
                                                                            if (parametroTipoActivo != null)
                                                                            {
                                                                                var tipoIDTTactico = ctx.TipoActivoInformacion.FirstOrDefault(x => x.Nombre == parametroTipoActivo.Valor & x.FlagActivo);
                                                                                if (tipoIDTTactico != null)
                                                                                {
                                                                                    entidad.assetType = tipoIDTTactico.TipoActivoInformacionId;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                EnviarCorreoConfirmacion(solicitud.AplicacionId, solicitud.SolicitudAplicacionId);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else if (totalFlujos.Count == 1)
                                            {
                                                //Validar si el flujo es por cambio de estado nada mas
                                                var cambioSolicitud = true;

                                                var data = ctx.ApplicationFlowData.Where(x => x.FlowAppId == flujo.FlowAppId && x.fieldId == (int)Campos.EstadoAplicacion).FirstOrDefault();
                                                if (data != null)
                                                {
                                                    cambios += " , Estado de la aplicación de: " + getStatusName(entidad.status) + " a: " + getStatusName(int.Parse(data.newValue));
                                                    entidad.status = int.Parse(data.newValue);
                                                    if (int.Parse(data.currentValue) == (int)ApplicationState.NoVigente)
                                                    {
                                                        requiereReinicio = true;
                                                    }
                                                    cambioSolicitud = false;
                                                    campos = campos + "- Estado de la aplicación <br/>";
                                                }

                                                data = ctx.ApplicationFlowData.Where(x => x.FlowAppId == flujo.FlowAppId && x.fieldId == (int)Campos.TipoImplementacion).FirstOrDefault();
                                                if (data != null)
                                                {
                                                    cambios += " , Tipo de implementación de: " + getImplementationTypeName(entidad.implementationType) + " a: " + getImplementationTypeName(int.Parse(data.newValue));
                                                    entidad.implementationType = int.Parse(data.newValue);
                                                    cambioSolicitud = false;
                                                    campos = campos + "- Tipo de implementación <br/>";
                                                }

                                                if (cambioSolicitud)
                                                {
                                                    //Modificar la solicitud para q la apruebe el portafolio
                                                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                    if (solicitud != null)
                                                    {
                                                        solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                                        solicitud.FechaModificacion = DateTime.Now;
                                                    }
                                                }
                                                else
                                                {
                                                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                    if (solicitud != null)
                                                    {
                                                        solicitud.UsuarioModificacion = objeto.registerBy;
                                                        solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                                        solicitud.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                                        solicitud.FlagAprobacion = false;
                                                        solicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                                                        solicitud.FechaModificacion = DateTime.Now;

                                                        EnviarCorreoConfirmacion(solicitud.AplicacionId, solicitud.SolicitudAplicacionId);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;

                                        //Se rechaza la solicitud
                                        var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                        if (solicitud != null)
                                        {
                                            solicitud.UsuarioModificacion = objeto.registerBy;
                                            solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                            solicitud.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                            solicitud.FlagAprobacion = false;
                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                                            solicitud.FechaModificacion = DateTime.Now;
                                            solicitud.Observaciones = objeto.comments;

                                            solicitudId = solicitud.SolicitudAplicacionId;
                                        }

                                        //Se rechaza el resto de flujos
                                        var otroFlujo = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == solicitud.SolicitudAplicacionId && x.isCompleted == false && x.FlowAppId != flujo.FlowAppId);
                                        if (otroFlujo != null)
                                        {
                                            otroFlujo.rejectedBy = objeto.registerBy;
                                            otroFlujo.comments = "Rechazado por el otro aprobador: " + objeto.comments;
                                            otroFlujo.dateRejected = DateTime.Now;
                                            otroFlujo.isApproved = false;
                                            otroFlujo.isCompleted = true;
                                            otroFlujo.isNotified = true;
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo2 = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo2 != null)
                                    {
                                        flujo2.rejectedBy = objeto.registerBy;
                                        flujo2.comments = objeto.comments;
                                        flujo2.dateRejected = DateTime.Now;
                                        flujo2.isApproved = false;
                                        flujo2.isCompleted = true;
                                        flujo2.isNotified = true;
                                        flujo2.isActive = false;
                                        flujo2.observedByName = objeto.NombreUsuarioModificacion;

                                        if (flujo.lastFlowAppId.HasValue)
                                        {
                                            var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo2.lastFlowAppId.Value);
                                            if (flujoAnterior != null)
                                            {
                                                flujoAnterior.approvedBy = objeto.registerBy;
                                                flujoAnterior.comments = "Comentarios del Gobierno User IT que observó la solicitud: " + objeto.comments;
                                                flujoAnterior.dateApproved = DateTime.Now;
                                                flujoAnterior.isApproved = true;
                                                flujoAnterior.isCompleted = true;
                                                flujoAnterior.isNotified = true;
                                                flujoAnterior.isActive = true;

                                            }
                                        }
                                    }
                                }
                                ctx.SaveChanges();
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[Campos]", !string.IsNullOrWhiteSpace(campos) ? campos : "Los definidos en la solicitud");
                                switch (objeto.actionManager)
                                {
                                    //case (int)ActionManager.Aprobar:
                                    //    {
                                    //        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionConfirmacionCamposGobiernoUserIT, entidad.applicationId, diccionario);
                                    //    }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionRechazoCamposGobiernoUserIT, entidad.applicationId, diccionario, null, true);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionObervacionUserIT, entidad.applicationId, diccionario);
                                        }; break;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }

                            if (requiereReinicio)
                                ReiniciarRegistroAplicacion(entidad.AppId, objeto.registerBy);
                        }
                        //Agregar registro en bitácora
                        try
                        {
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            var tipo = "";
                            var texto = "";
                            var formal = objeto.isFormalApplication.HasValue ? objeto.isFormalApplication.Value : false;
                            var tieneFecha = objeto.regularizationDate.HasValue;

                            if (entidad.isApproved == false)
                            {
                                if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro)
                                {
                                    tipo = " registro ";
                                    texto = "con los valores Tipo de activo: " + getAssetTypeName(objeto.assetType) + ", Estado de la aplicación: "
                                        + getStatusName(objeto.status) + ", Aplicación informal: " + (formal ? "Sí" : "No");
                                    if (tieneFecha)
                                    {
                                        texto = texto + ", Fecha de regularización: " + objeto.regularizationDate.Value.ToString("dd/MM/yyyy");
                                    }
                                }
                                else if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion) { tipo = " modificación "; }
                                string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                var hour = dateAndTime.ToString("HH:mm:ss");

                                BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " ";

                                if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "rechazó la solicitud de" + tipo + "de gobierno user IT de la aplicación "
                                          + entidad.applicationId +
                                          " " + " - " + "" + entidad.applicationName +
                                          texto +
                                          " por el siguiente motivo: "
                                          + objeto.comments;
                                }
                                else if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "aprobó la solicitud de" + tipo + "de gobierno user IT de la aplicación " + entidad.applicationId +
                                        " " + " - " + "" + entidad.applicationName + " " +
                                          texto;
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "observó la solicitud de" + tipo + "de gobierno user IT de la aplicación "
                                          + entidad.applicationId +
                                          " " + " - " + "" + entidad.applicationName +
                                          texto +
                                          " por el siguiente motivo: "
                                          + objeto.comments;
                                }

                                BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";
                            }
                            else if (entidad.isApproved == true)
                            {
                                tipo = " modificación ";
                                string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                var hour = dateAndTime.ToString("HH:mm:ss");

                                BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " ";

                                if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "rechazó la solicitud de" + tipo + "de gobierno user IT de la aplicación "
                                          + entidad.applicationId +
                                          " " + " - " + "" + entidad.applicationName +
                                          texto +
                                          " por el siguiente motivo: "
                                          + objeto.comments;

                                    var camposSolicitud = ctx.SolicitudCampos.Where(x => x.SolicitudId == solicitudId).ToList();
                                    if (camposSolicitud != null)
                                    {
                                        if (camposSolicitud.Count > 0)
                                        {
                                            BitacoraMensaje = BitacoraMensaje + ". Los campos que se han rechazado son los siguientes: ";
                                            foreach (var item in camposSolicitud)
                                            {
                                                switch (item.ColumnaId)
                                                {
                                                    case (int)Campos.TipoImplementacion:
                                                        BitacoraMensaje += " , Tipo de implementación con el valor: " + getImplementationTypeName(int.Parse(item.NuevoValor));
                                                        break;
                                                    case (int)Campos.ResumenEstandares:
                                                        BitacoraMensaje += " , Resumen de lineamientos de seguridad con el valor: " + item.NuevoValor;
                                                        break;
                                                    case (int)Campos.NivelCumplimientoSeguridad:
                                                        BitacoraMensaje += " , Nivel de cumplimiento de seguridad con el valor: " + decimal.Parse(item.NuevoValor);
                                                        break;
                                                    case (int)Campos.EstadoAplicacion:
                                                        BitacoraMensaje += " , Estado de la aplicación con el valor: " + getStatusName(int.Parse(item.NuevoValor));
                                                        break;
                                                    case (int)Campos.GestionadoPor:
                                                        BitacoraMensaje += " , Gestionado por con el valor: " + getManagedName(int.Parse(item.NuevoValor));
                                                        break;
                                                    case (int)Campos.NombreEquipo:
                                                        {
                                                            if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                                            {
                                                                BitacoraMensaje += " , Equipo/Squad con el valor: " + getTeamName(int.Parse(item.NuevoValor));
                                                            }
                                                        }
                                                        break;
                                                }
                                            }

                                            BitacoraMensaje = BitacoraMensaje + cambios;
                                        }
                                    }
                                }
                               else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "observó la solicitud de" + tipo + "de gobierno user IT de la aplicación "
                                          + entidad.applicationId +
                                          " " + " - " + "" + entidad.applicationName +
                                          texto +
                                          " por el siguiente motivo: "
                                          + objeto.comments;

                                    var camposSolicitud = ctx.SolicitudCampos.Where(x => x.SolicitudId == solicitudId).ToList();
                                    if (camposSolicitud != null)
                                    {
                                        if (camposSolicitud.Count > 0)
                                        {
                                            BitacoraMensaje = BitacoraMensaje + ". Los campos que se han observado son los siguientes: ";
                                            foreach (var item in camposSolicitud)
                                            {
                                                switch (item.ColumnaId)
                                                {
                                                    case (int)Campos.TipoImplementacion:
                                                        BitacoraMensaje += " , Tipo de implementación con el valor: " + getImplementationTypeName(int.Parse(item.NuevoValor));
                                                        break;
                                                    case (int)Campos.ResumenEstandares:
                                                        BitacoraMensaje += " , Resumen de lineamientos de seguridad con el valor: " + item.NuevoValor;
                                                        break;
                                                    case (int)Campos.NivelCumplimientoSeguridad:
                                                        BitacoraMensaje += " , Nivel de cumplimiento de seguridad con el valor: " + decimal.Parse(item.NuevoValor);
                                                        break;
                                                    case (int)Campos.EstadoAplicacion:
                                                        BitacoraMensaje += " , Estado de la aplicación con el valor: " + getStatusName(int.Parse(item.NuevoValor));
                                                        break;
                                                    case (int)Campos.GestionadoPor:
                                                        BitacoraMensaje += " , Gestionado por con el valor: " + getManagedName(int.Parse(item.NuevoValor));
                                                        break;
                                                    case (int)Campos.NombreEquipo:
                                                        {
                                                            if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                                            {
                                                                BitacoraMensaje += " , Equipo/Squad con el valor: " + getTeamName(int.Parse(item.NuevoValor));
                                                            }
                                                        }
                                                        break;
                                                }
                                            }

                                            BitacoraMensaje = BitacoraMensaje + cambios;
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "aprobó la solicitud de" + tipo + "de gobierno user IT de la aplicación " + entidad.applicationId +
                                        " " + " - " + "" + entidad.applicationName + " " +
                                          texto;

                                    BitacoraMensaje = BitacoraMensaje + cambios;
                                }


                                BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";
                            }

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationTTL(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            var requiereCambioPerfil = false;
            int? equipoAnterior = 0;
            string equipoActual = "";
            string equipoNuevo = "";
            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        var gestionadoPor = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == entidad.managed);
                        equipoActual = getTeamName(entidad.teamId);
                        equipoNuevo = getTeamName(objeto.teamId);

                        if (entidad == null) dataResult.EstadoTransaccion = false;

                        if (entidad.isApproved == false)
                        {
                            if (dataResult.EstadoTransaccion)
                            {
                                if (objeto.actionManager == (int)ActionManager.Aprobar)
                                {
                                    equipoAnterior = entidad.teamId;
                                    entidad.teamId = objeto.teamId;
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.approvedBy = objeto.registerBy;
                                        flujo.dateApproved = DateTime.Now;
                                        flujo.isApproved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.approvedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Rechazar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.rejectedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateRejected = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.rejectedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Transferir)
                                {
                                    entidad.teamId = objeto.teamId;
                                    //entidad.registrationSituation = (int)ApplicationSituationRegister.RegistroCompleto;

                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.transferedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateTransfer = DateTime.Now;
                                        flujo.isApproved = null;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = false;
                                        flujo.isActive = false;
                                        flujo.transferedByName = objeto.NombreUsuarioModificacion;
                                        //Validar Jefe de Equipo
                                        if (objeto.teamId.HasValue)
                                        {
                                            if (objeto.teamId.Value > 0)
                                            {
                                                var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                if (equipo != null)
                                                {
                                                    //Registrando rol
                                                    var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TTL && x.isActive);
                                                    if (rol != null)
                                                    {
                                                        if (rol.username != equipo.ResponsableMatricula)
                                                        {
                                                            rol.isActive = false;
                                                            rol.dateModification = DateTime.Now;
                                                            rol.modifiedBy = objeto.registerBy;

                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = equipo.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = equipo.Responsable,
                                                            username = equipo.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }

                                                    //Registrando flujo
                                                    var nuevoFlujo = new ApplicationFlow()
                                                    {
                                                        AppId = entidad.AppId,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        FlowAppId = 0,
                                                        isCompleted = false,
                                                        isNotified = false,
                                                        ownerEmail = equipo.ResponsableCorreo,
                                                        ownerId = equipo.ResponsableMatricula,
                                                        typeFlow = (int)Flow.Registro,
                                                        typeRegister = (int)ApplicationManagerRole.TTL,
                                                        isActive = true,
                                                        comments = objeto.comments,
                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                    };
                                                    ctx.ApplicationFlow.Add(nuevoFlujo);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (objeto.actionManager == (int)ActionManager.Observar)
                                {
                                    var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                    if (flujo != null)
                                    {
                                        flujo.observedBy = objeto.registerBy;
                                        flujo.comments = objeto.comments;
                                        flujo.dateObserved = DateTime.Now;
                                        flujo.isApproved = false;
                                        flujo.isObserved = true;
                                        flujo.isCompleted = true;
                                        flujo.isNotified = true;
                                        flujo.observedByName = objeto.NombreUsuarioModificacion;
                                    }
                                }
                                ctx.SaveChanges();
                                ID = entidad.AppId;
                            }

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[TTL]", objeto.NombreUsuarioModificacion);
                                diccionario.Add("[GestionadoPor]", this.getManagedName(entidad.managed));
                                diccionario.Add("[NombreEquipo]", this.getTeamName(equipoAnterior));
                                diccionario.Add("[NombreEquipoConfirmado]", this.getTeamName(entidad.teamId));
                                diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                                diccionario.Add("[SituacionRegistro]", Utilitarios.GetEnumDescription2((ApplicationSituationRegister)entidad.registrationSituation.Value));

                                switch (objeto.actionManager)
                                {
                                    case (int)ActionManager.Aprobar:
                                        {
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AprobacionTTL, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Transferir:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2TransferenciaTTL, entidad.applicationId, diccionario);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionTTL, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Rechazar:
                                        {
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2RechazoTTL, entidad.applicationId, diccionario);
                                        }; break;
                                    case (int)ActionManager.Observar:
                                        {
                                            diccionario.Add("[ArquitectoActual]", objeto.NombreUsuarioModificacion);
                                            diccionario.Add("[Comentarios]", objeto.comments);
                                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservacionTTL, entidad.applicationId, diccionario);
                                        }; break;

                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }


                        }
                        else if (entidad.isApproved == true)
                        {
                            if (objeto.actionManager == (int)ActionManager.Aprobar)
                            {
                                var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                if (flujo != null)
                                {
                                    flujo.approvedBy = objeto.registerBy;
                                    flujo.dateApproved = DateTime.Now;
                                    flujo.isApproved = true;
                                    flujo.isCompleted = true;
                                    flujo.isNotified = true;
                                    flujo.approvedByName = objeto.NombreUsuarioModificacion;

                                    //Validar si el flujo del otro aprobador ya se aprobo antes de aprobar la solicitud
                                    var totalFlujos = ctx.ApplicationFlow.Where(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId).ToList();
                                    if (totalFlujos != null)
                                    {
                                        if (totalFlujos.Count == 2)
                                        {
                                            var flujosSolicitud = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId && x.FlowAppId != flujo.FlowAppId);
                                            if (flujosSolicitud != null)
                                            {
                                                var aprobado = flujosSolicitud.isApproved.HasValue ? flujosSolicitud.isApproved.Value : false;
                                                if (aprobado)
                                                {
                                                    //Se aprueba la solicitud
                                                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                                    if (solicitud != null)
                                                    {
                                                        solicitud.UsuarioModificacion = objeto.registerBy;
                                                        solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                                        solicitud.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                                        solicitud.FlagAprobacion = false;
                                                        solicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                                                        solicitud.FechaModificacion = DateTime.Now;

                                                        ////Agregar al nuevo y actualizar el equipo
                                                        var data = ctx.SolicitudCampos.Where(x => x.SolicitudId == solicitud.SolicitudAplicacionId).ToList();

                                                        if (data != null)
                                                        {
                                                            if (data.Count == 2)
                                                            {
                                                                switch (data[0].ColumnaId.Value)
                                                                {
                                                                    case (int)Campos.GestionadoPor:
                                                                        entidad.managed = int.Parse(data[0].NuevoValor);
                                                                        break;
                                                                    case (int)Campos.NombreEquipo:
                                                                        entidad.teamId = string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor);
                                                                        break;
                                                                }

                                                                switch (data[1].ColumnaId.Value)
                                                                {
                                                                    case (int)Campos.GestionadoPor:
                                                                        entidad.managed = int.Parse(data[1].NuevoValor);
                                                                        break;
                                                                    case (int)Campos.NombreEquipo:
                                                                        entidad.teamId = string.IsNullOrWhiteSpace(data[1].NuevoValor) ? (int?)null : int.Parse(data[1].NuevoValor);
                                                                        break;
                                                                }

                                                                requiereCambioPerfil = true;
                                                            }
                                                            else if (data.Count == 1)
                                                            {
                                                                switch (data[0].ColumnaId.Value)
                                                                {
                                                                    case (int)Campos.GestionadoPor:
                                                                        {
                                                                            //Modificar la solicitud para que lo apruebe el admin
                                                                            solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                                                        }
                                                                        break;
                                                                    case (int)Campos.NombreEquipo:
                                                                        {
                                                                            entidad.teamId = string.IsNullOrWhiteSpace(data[0].NuevoValor) ? (int?)null : int.Parse(data[0].NuevoValor);
                                                                        }
                                                                        break;
                                                                }
                                                            }

                                                            var gestionadoDestino = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(entidad.managed.Value);

                                                            var flagTTL = gestionadoDestino.FlagEquipoAgil.HasValue ? gestionadoDestino.FlagEquipoAgil.Value : false;
                                                            var flagJdE = gestionadoDestino.FlagJefeEquipo.HasValue ? gestionadoDestino.FlagJefeEquipo.Value : false;
                                                            var flagUserIT = gestionadoDestino.FlagUserIT.HasValue ? gestionadoDestino.FlagUserIT.Value : false;
                                                            if (requiereCambioPerfil)
                                                            {
                                                                var rol = 0;
                                                                if (flagTTL)
                                                                    rol = (int)ApplicationManagerRole.TTL;
                                                                if (flagJdE)
                                                                    rol = (int)ApplicationManagerRole.JefeDeEquipo;

                                                                //Asignar al nuevo  jefe de equipo, desactivar el rol anterior y agregarlo el nuevo
                                                                ////Desactivar el rol anterior
                                                                if (rol != 0)
                                                                {
                                                                    var rolJdEAnterior = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId
                                                                                                 && x.isActive == true
                                                                                                 && x.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo);
                                                                    if (rolJdEAnterior != null)
                                                                    {
                                                                        rolJdEAnterior.isActive = false;
                                                                        rolJdEAnterior.dateModification = DateTime.Now;
                                                                    }

                                                                    var rolTTLAnterior = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId
                                                                                            && x.isActive == true
                                                                                            && x.applicationManagerId == (int)ApplicationManagerRole.TTL);
                                                                    if (rolTTLAnterior != null)
                                                                    {
                                                                        rolTTLAnterior.isActive = false;
                                                                        rolTTLAnterior.dateModification = DateTime.Now;
                                                                    }


                                                                    var equipo = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == entidad.teamId);
                                                                    if (equipo != null)
                                                                    {
                                                                        var rolNuevo = new ApplicationManagerCatalog()
                                                                        {
                                                                            applicationId = entidad.applicationId,
                                                                            applicationManagerId = rol,
                                                                            createdBy = objeto.registerBy,
                                                                            dateCreation = DateTime.Now,
                                                                            email = equipo.ResponsableCorreo,
                                                                            isActive = true,
                                                                            managerName = equipo.Responsable,
                                                                            username = equipo.ResponsableMatricula
                                                                        };
                                                                        ctx.ApplicationManagerCatalog.Add(rolNuevo);
                                                                    }
                                                                }
                                                            }

                                                            if (flagTTL)
                                                            {
                                                                //Quitar el TL anterior
                                                                ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationManagerCatalog set isActive='false' where applicationId='{0}' and applicationManagerId=7;", entidad.applicationId));
                                                                //Registrando TL
                                                                var tlTeam = ctx.TribeLeader.FirstOrDefault(x => x.EquipoId == objeto.teamId.Value);
                                                                if (tlTeam != null)
                                                                {
                                                                    var rolTL = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TL && x.isActive);
                                                                    if (rolTL != null)
                                                                    {
                                                                        if (rolTL.username != tlTeam.ResponsableMatricula)
                                                                        {
                                                                            rolTL.isActive = false;
                                                                            rolTL.dateModification = DateTime.Now;
                                                                            rolTL.modifiedBy = objeto.registerBy;

                                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                                            {
                                                                                applicationId = entidad.applicationId,
                                                                                applicationManagerCatalogId = 0,
                                                                                applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                                createdBy = objeto.registerBy,
                                                                                dateCreation = DateTime.Now,
                                                                                email = tlTeam.ResponsableCorreo,
                                                                                isActive = true,
                                                                                managerName = tlTeam.Responsable,
                                                                                username = tlTeam.ResponsableMatricula
                                                                            };
                                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                                        {
                                                                            applicationId = entidad.applicationId,
                                                                            applicationManagerCatalogId = 0,
                                                                            applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                            createdBy = objeto.registerBy,
                                                                            dateCreation = DateTime.Now,
                                                                            email = tlTeam.ResponsableCorreo,
                                                                            isActive = true,
                                                                            managerName = tlTeam.Responsable,
                                                                            username = tlTeam.ResponsableMatricula
                                                                        };
                                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                                    }
                                                                }
                                                            }

                                                            //if (flagUserIT)
                                                            //{
                                                            //    var tipoActivoUserIT = ServiceManager<ActivosDAO>.Provider.GetActivosByUserIT();
                                                            //    if (tipoActivoUserIT != null)
                                                            //    {
                                                            //        entidad.assetType = tipoActivoUserIT.Id;
                                                            //        entidad.teamId = null;
                                                            //    }
                                                            //}

                                                            EnviarCorreoConfirmacion(solicitud.AplicacionId, solicitud.SolicitudAplicacionId);
                                                        }
                                                    }
                                                }

                                                try
                                                {
                                                    var mailManager = new MailingManager();
                                                    var diccionario = new Dictionary<string, string>();
                                                    diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                                    diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                                    diccionario.Add("[JefeEquipo]", objeto.NombreUsuarioModificacion);

                                                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionAprobacionSolicitudModificacionSquad, entidad.applicationId, diccionario);
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message, ex);
                                                }
                                            }
                                        }
                                        else if (totalFlujos.Count == 1)
                                        {
                                            //Modificar la solicitud para q la apruebe el portafolio
                                            var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                            if (solicitud != null)
                                            {
                                                solicitud.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                                solicitud.FechaModificacion = DateTime.Now;
                                            }
                                        }
                                    }
                                }
                               
                            }
                            else if (objeto.actionManager == (int)ActionManager.Rechazar)
                            {
                                var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                if (flujo != null)
                                {
                                    flujo.rejectedBy = objeto.registerBy;
                                    flujo.comments = objeto.comments;
                                    flujo.dateRejected = DateTime.Now;
                                    flujo.isApproved = false;
                                    flujo.isCompleted = true;
                                    flujo.isNotified = true;
                                    flujo.rejectedByName = objeto.NombreUsuarioModificacion;

                                    //Se rechaza la solicitud
                                    var solicitud = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == flujo.SolicitudAplicacionId);
                                    if (solicitud != null)
                                    {
                                        solicitud.UsuarioModificacion = objeto.registerBy;
                                        solicitud.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitud.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitud.FlagAprobacion = false;
                                        solicitud.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                                        solicitud.FechaModificacion = DateTime.Now;
                                        solicitud.Observaciones = objeto.comments;
                                    }

                                    //Se rechaza el resto de flujos
                                    var otroFlujo = ctx.ApplicationFlow.FirstOrDefault(x => x.SolicitudAplicacionId == solicitud.SolicitudAplicacionId && x.isCompleted == false && x.FlowAppId != flujo.FlowAppId);
                                    if (otroFlujo != null)
                                    {
                                        otroFlujo.rejectedBy = objeto.registerBy;
                                        otroFlujo.comments = "Rechazado por el otro aprobador: " + objeto.comments;
                                        otroFlujo.dateRejected = DateTime.Now;
                                        otroFlujo.isApproved = false;
                                        otroFlujo.isCompleted = true;
                                        otroFlujo.isNotified = true;
                                    }
                                }

                                try
                                {
                                    var mailManager = new MailingManager();
                                    var diccionario = new Dictionary<string, string>();
                                    diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                    diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                    diccionario.Add("[JefeEquipo]", objeto.NombreUsuarioModificacion);
                                    diccionario.Add("[Comentarios]", objeto.comments);

                                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionRechazoSolicitudModificacionSquad, entidad.applicationId, diccionario);
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message, ex);
                                }
                            }

                            else if (objeto.actionManager == (int)ActionManager.Observar)
                            {
                                var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                                if (flujo != null)
                                {
                                    flujo.rejectedBy = objeto.registerBy;
                                    flujo.comments = objeto.comments;
                                    flujo.dateRejected = DateTime.Now;
                                    flujo.isApproved = false;
                                    flujo.isCompleted = true;
                                    flujo.isNotified = true;
                                    flujo.isActive = false;
                                    flujo.observedByName = objeto.NombreUsuarioModificacion;

                                    if (flujo.lastFlowAppId.HasValue)
                                    {
                                        var flujoAnterior = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == flujo.lastFlowAppId.Value);
                                        if (flujoAnterior != null)
                                        {
                                            flujoAnterior.approvedBy = objeto.registerBy;
                                            flujoAnterior.comments = "Comentarios del arquitecto que observó la solicitud: " + objeto.comments;
                                            flujoAnterior.dateApproved = DateTime.Now;
                                            flujoAnterior.isApproved = true;
                                            flujoAnterior.isCompleted = true;
                                            flujoAnterior.isNotified = true;
                                            flujoAnterior.isActive = true;

                                        }
                                    }
                                }

                                try
                                {
                                    var mailManager = new MailingManager();
                                    var diccionario = new Dictionary<string, string>();
                                    diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                    diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                    diccionario.Add("[JefeEquipo]", objeto.NombreUsuarioModificacion);
                                    diccionario.Add("[Comentarios]", objeto.comments);

                                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionObervacionTTL, entidad.applicationId, diccionario);
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message, ex);
                                }
                            }

                            ctx.SaveChanges();

                            dataResult.AplicacionId = ID;
                            dataResult.SolicitudId = 0;
                            transaction.Commit();
                        }

                        //Agregar Bitácora
                        try
                        {
                            var BitacoraMensaje = "";

                            var tipo = "";
                            if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Registro) { tipo = " registro "; }
                            else if (objeto.RegistroOModificacion == (int)ClaseSolicitud.Modificacion) { tipo = " modificación "; }


                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");

                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " ";

                            if (objeto.actionManager == (int)ActionManager.Rechazar)
                            {
                                BitacoraMensaje = BitacoraMensaje + "rechazó la solicitud de" + tipo + "de Tribe Technical Lead de la aplicación "
                                      + entidad.applicationId +
                                      " " + " - " + "" + entidad.applicationName +
                                      "con el cambio de Squad de : " + equipoActual + " a: " + equipoNuevo +
                                      " por el siguiente motivo: "
                                      + objeto.comments;
                            }
                           else  if (objeto.actionManager == (int)ActionManager.Observar)
                            {
                                BitacoraMensaje = BitacoraMensaje + "observó la solicitud de" + tipo + "de Tribe Technical Lead de la aplicación "
                                      + entidad.applicationId +
                                      " " + " - " + "" + entidad.applicationName +
                                      "con el cambio de Squad de : " + equipoActual + " a: " + equipoNuevo +
                                      " por el siguiente motivo: "
                                      + objeto.comments;
                            }
                            else if (objeto.actionManager == (int)ActionManager.Aprobar)
                            {
                                BitacoraMensaje = BitacoraMensaje + "aprobó la solicitud de" + tipo + "de Tribe Technical Lead de la aplicación " + entidad.applicationId +
                                    " " + " - " + "" + entidad.applicationName + " ." + "con el cambio de Squad de : " + equipoActual + " a: " + equipoNuevo + " ";


                            }
                            else if (objeto.actionManager == (int)ActionManager.Transferir)
                            {
                                BitacoraMensaje = BitacoraMensaje + "transfirió la solicitud de" + tipo + " deTribe Technical Lead de la aplicación " + entidad.applicationId +
                                    " " + " - " + "" + entidad.applicationName + " a:" +
                                    equipoNuevo + " por el siguiente motivo: "
                                      + objeto.comments;
                            }

                            BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = entidad.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.Matricula,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }
                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetRequestAppCreation(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     join u2 in ctx.GestionadoPor on u.managed equals u2.GestionadoPorId
                                     join u3 in ctx.ApplicationManagerCatalog on u.applicationId equals u3.applicationId
                                     where (u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || string.IsNullOrEmpty(filter.applicationId))
                                     && u.isApproved == false                                     
                                     && u.isActive == true
                                     && u.status == (filter.Status == -1 ? u.status : filter.Status)
                                     && u.registrationSituation == (filter.registrationSituation == -1 ? u.registrationSituation : filter.registrationSituation)
                                     && u3.isActive == true && u3.applicationManagerId==(int)ApplicationManagerRole.Solicitante
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         managedBy = u2.Nombre,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         registerBy= u.registerBy,
                                         solicitante=u3.managerName,
                                         approvedDate = u.dateApproved
                                     }); ;

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetRequestAppAsignada(PaginationApplication filter, out int totalRows)
        {
            var idsAutorizados = new List<int>() {
                (int)ApplicationManagerRole.Broker,
                (int)ApplicationManagerRole.Experto,
                (int)ApplicationManagerRole.JefeDeEquipo,
                (int)ApplicationManagerRole.Owner,
                (int)ApplicationManagerRole.TL,
                (int)ApplicationManagerRole.TTL,
                (int)ApplicationManagerRole.UsuarioAutorizador
            };

            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     join u2 in ctx.ApplicationManagerCatalog on u.applicationId equals u2.applicationId
                                     join u3 in ctx.ApplicationManager on u2.applicationManagerId equals u3.applicationManagerId
                                     join u4 in ctx.GestionadoPor on u.managed equals u4.GestionadoPorId
                                     join u5 in ctx.TipoActivoInformacion on u.assetType equals u5.TipoActivoInformacionId
                                     where (u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || string.IsNullOrEmpty(filter.applicationId))
                                     && u.isApproved == true
                                     && u.isActive == true
                                     && u2.username == filter.Matricula && idsAutorizados.Contains(u2.applicationManagerId)
                                     && u.status != (int)ApplicationState.Eliminada
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         assetTypeName = u5.Nombre,
                                         managedBy = u4.Nombre
                                     }).Distinct();

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetRequestAppAsignadaNoEliminadas(PaginationApplication filter, out int totalRows)
        {
            var estados = new List<int>() {
                (int)EstadoSolicitud.Observada,
                (int)EstadoSolicitud.Pendiente,
                (int)EstadoSolicitud.PendienteCustodio
            };
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     join u2 in ctx.ApplicationManagerCatalog on u.applicationId equals u2.applicationId
                                     join u3 in ctx.ApplicationManager on u2.applicationManagerId equals u3.applicationManagerId
                                     join u4 in ctx.GestionadoPor on u.managed equals u4.GestionadoPorId
                                     where (u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || string.IsNullOrEmpty(filter.applicationId))
                                     && u.status != (int)ApplicationState.Eliminada
                                     && u.status == (filter.Status == -1 ? u.status : filter.Status)
                                     && u.isApproved == true
                                     && u.isActive == true
                                     && u2.username == filter.Matricula
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         managedBy = u4.Nombre,
                                         description = u.description
                                     }).Distinct();

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    foreach (ApplicationList a in resultado)
                    {
                        var solicitudes = ctx.Solicitud.Where(x => x.AplicacionId == a.id && x.TipoSolicitud == (int)TipoSolicitud.Eliminacion && estados.Contains(x.EstadoSolicitud)).Count();
                        a.TotalSolicitudesActivas = solicitudes;
                    }

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetApplicationEliminadasAprobadas(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                var statusEliminada = (int)ApplicationState.Eliminada;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application                                     
                                     join u4 in ctx.GestionadoPor on u.managed equals u4.GestionadoPorId into GestionadoApps
                                     from ga in GestionadoApps.DefaultIfEmpty()
                                     where (u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                             || u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                             || string.IsNullOrEmpty(filter.applicationId))
                                     && u.status == statusEliminada
                                     && u.isActive == true
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         managedBy = ga.Nombre,
                                         eliminacionFecha = u.FechaEliminacion,
                                         eliminacionUsuario = u.UsuarioEliminacion,
                                         description = u.description
                                     }).Distinct();


                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    #region Obtener aplicaciones con solicitudes de reversion

                    var idsApplications = resultado.Select(x => x.id).Distinct().ToList();

                    var solicitudesReversion = (from a in ctx.Solicitud
                                                where a.TipoSolicitud == (int)TipoSolicitud.RevertirEliminacion && (a.EstadoSolicitud != (int)EstadoSolicitud.Rechazada && a.EstadoSolicitud != (int)EstadoSolicitud.Desestimada)
                                                && idsApplications.Contains(a.AplicacionId)
                                                select a).ToList();


                    foreach (var item in resultado)
                    {
                        item.aplicacionRevertida = solicitudesReversion.Exists(z => z.AplicacionId == item.id);
                    }

                    #endregion

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationEliminadasAprobadas(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationEliminadasAprobadas(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override DataTable GetPublicacionAplicacionAsignada(PaginacionReporteAplicacion pag, out int totalRows)
        {
            try
            {
                totalRows = 0;
                var data = new DataTable();

                data = ReportePublicacionAplicacionAsignada(pag);

                if (data != null && data.Rows.Count > 0) totalRows = Convert.ToInt16(data.Rows[0]["TotalFilas"]);

                return data;
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTecnologiaDTO
                    , "Error en el metodo: GetTecnologias()"
                    , new object[] { null });
            }
        }


        public override bool GetApplicationEliminadaStatus(string codApplication, DateTime fecha)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var idEstados = new List<int> { (int)EEstadoRelacion.Aprobado, (int)EEstadoRelacion.PendienteEliminacion, (int)EEstadoRelacion.Cuarentena, (int)EEstadoRelacion.Pendiente };

                    var existe = (from u in ctx.Relacion
                                  where u.FlagActivo
                                  && u.CodigoAPT == codApplication
                                  && u.AnioRegistro == fecha.Year
                                  && u.MesRegistro == fecha.Month
                                  && u.DiaRegistro == fecha.Day
                                  && idEstados.Contains(u.EstadoId)
                                  select u).Count();


                    return existe != 0;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }

        }

        public override string GetApplicationEliminadaGetDescription(string codApplication)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var desc = (from u in ctx.Application
                                where u.applicationId == codApplication

                                select u.description).FirstOrDefault();


                    return desc;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }

        }

        public override List<UnidadDTO> GetUsuarioUnidad(string name)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var desc = (from u in ctx.Unidad
                                where u.Nombre.ToUpper().Contains(name) && u.FlagActivo==true

                                select new UnidadDTO { 
                                Id=u.UnidadId,                                
                                Responsable=u.Responsable,
                                ResponsableMatricula=u.ResponsableMatricula,
                                ResponsableCorreo=u.ResponsableCorreo,
                                label=u.Nombre,
                                    value = u.Nombre,
                                    displayName= u.Nombre,
                                    matricula= u.Nombre,
                                    mail=u.Nombre,
                                    id = u.UnidadId,
                                    Nombre=u.Nombre

                                }).ToList();


                    return desc;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }

        }

        public override List<OwnerDTO> GetOwner(string name)
        {
            DataSet resultado = null;
            var cadenaConexion = Constantes.CadenaConexion;


            List<OwnerDTO> lista = new List<OwnerDTO>();

            using (SqlConnection cnx = new SqlConnection(cadenaConexion))
            {
                cnx.Open();
                using (var comando = new SqlCommand("app.Buscar_Owner_BCP_CATG_GH_INFO_EMPLEADOS", cnx))
                {
                    comando.CommandTimeout = 0;
                    comando.CommandType = System.Data.CommandType.StoredProcedure;
                    comando.Parameters.Add(new SqlParameter("@nombre", name));
   


                    var reader = comando.ExecuteReader(CommandBehavior.CloseConnection);

                    while (reader.Read())
                    {
                        lista.Add(new OwnerDTO()
                        {
                            Nombre = reader.GetString(reader.GetOrdinal("Nombre")),
                            Matricula = reader.GetString(reader.GetOrdinal("Matricula")),
                            Correo = reader.GetString(reader.GetOrdinal("Correo"))

                        });
                    }

                }

                cnx.Close();

                return lista;
            }
        }

        public override PaginationApplication BuscarEnUnidad(string name)
        {
            DataSet resultado = null;
            var cadenaConexion = Constantes.CadenaConexion;

           


            PaginationApplication res = new PaginationApplication();

            using (SqlConnection cnx = new SqlConnection(cadenaConexion))
            {
                cnx.Open();
                using (var comando = new SqlCommand("app.Buscar_Unidad", cnx))
                {
                    comando.CommandTimeout = 0;
                    comando.CommandType = System.Data.CommandType.StoredProcedure;
                    comando.Parameters.Add(new SqlParameter("@Matricula", name));



                    var reader = comando.ExecuteReader(CommandBehavior.CloseConnection);

                    while (reader.Read())
                    {

                        res.Resultado = reader.GetInt32(reader.GetOrdinal("Resultado"));
                        res.Nombre = reader.GetString(reader.GetOrdinal("Unidad"));

                    }

                }

                cnx.Close();

                return res;
            }
        }

        public DataTable ReportePublicacionAplicacionAsignada(PaginacionReporteAplicacion pag)
        {
            DataSet resultado = null;
            var cadenaConexion = Constantes.CadenaConexion;

            using (SqlConnection cnx = new SqlConnection(cadenaConexion))
            {
                cnx.Open();
                using (var comando = new SqlCommand("[CVT].[USP_Reporte_Publicacion_Catalogo_4]", cnx))
                {
                    comando.CommandTimeout = 0;
                    comando.CommandType = System.Data.CommandType.StoredProcedure;
                    comando.Parameters.Add(new SqlParameter("@aplicacion", string.IsNullOrWhiteSpace(pag.Aplicacion) ? string.Empty : pag.Aplicacion));
                    comando.Parameters.Add(new SqlParameter("@Matricula", pag.Matricula));

                    IDbDataAdapter adapter = new SqlDataAdapter(comando);
                    resultado = new DataSet();
                    adapter.Fill(resultado);
                }

                cnx.Close();

                return resultado.Tables[0];
            }
        }

        public override List<SolicitudList> GetSolicitud(PaginationSolicitud filter, out int totalRows)
        {

            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Solicitud
                                     join b in ctx.Application on u.AplicacionId equals b.AppId
                                     join c in ctx.GestionadoPor on b.managed equals c.GestionadoPorId into gestionado
                                     from pco in gestionado.DefaultIfEmpty()
                                     where (u.EstadoSolicitud == filter.Status || filter.Status == -1)
                                     && (b.applicationId == filter.CodigoAPT || string.IsNullOrEmpty(filter.CodigoAPT))
                                     && u.TipoSolicitud == (int)TipoSolicitud.Eliminacion
                                     select new SolicitudList()
                                     {
                                         SolicitudAplicacionId = u.SolicitudAplicacionId,
                                         TipoSolicitud = u.TipoSolicitud,
                                         UsuarioCreacion = u.NombreUsuarioCreacion,
                                         FechaCreacion = u.FechaCreacion,
                                         AplicacionId = u.AplicacionId,
                                         EstadoSolicitud = u.EstadoSolicitud,
                                         FechaModificacion = u.FechaModificacion,
                                         UsuarioModificacion = u.UsuarioModificacion,
                                         Observaciones = u.Observaciones,
                                         FlagAprobacion = u.FlagAprobacion,
                                         EstadoAnterior = u.EstadoAnterior,
                                         ApplicationName = b.applicationName,
                                         ApplicationId = b.applicationId,
                                         GestionadoPor = pco.Nombre,
                                         ObservacionesRechazo = u.ObservacionesRechazo,
                                         FechaAprobacion = u.FechaAprobacion,
                                         NombreUsuarioAprobacion = u.NombreUsuarioAprobacion,
                                         NombreUsuarioModificacion = u.NombreUsuarioModificacion
                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();
                    var tipoActivo = ctx.TipoActivoInformacion.Where(x => x.FlagActivo == true && x.FlagEliminado == false).ToList();

                    foreach (SolicitudList a in resultado)
                    {
                        string item = Utilitarios.GetEnumDescription2((TipoSolicitud)a.TipoSolicitud);
                        if (item != null) { a.TipoSolicitudName = item; }

                        switch (a.EstadoSolicitud)
                        {
                            case (int)EstadoSolicitud.Pendiente:
                                a.EstadoSolicitudName = "Pendiente por el portafolio";
                                break;
                            case (int)EstadoSolicitud.PendienteCustodio:
                                a.EstadoSolicitudName = "Pendiente Owner / Líder usuario";
                                break;
                            default:
                                string item2 = Utilitarios.GetEnumDescription2((EstadoSolicitud)a.EstadoSolicitud);
                                if (item2 != null) { a.EstadoSolicitudName = item2; }
                                break;
                        }



                        if (a.TipoActivoId.HasValue)
                        {
                            var element = tipoActivo.FirstOrDefault(x => x.TipoActivoInformacionId == a.TipoActivoId.Value);
                            a.TipoActivo = element != null ? element.Nombre : string.Empty;
                        }
                    }

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override bool ValidarModificacion(ApplicationDto objeto)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.AppId == objeto.AppId
                                    select u).FirstOrDefault();

                    var gestionado = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == registro.managed.Value);

                    bool resultado = true;
                    bool flagUserIT = gestionado.FlagUserIT.HasValue ? gestionado.FlagUserIT.Value : false;

                    if (flagUserIT)
                    {
                        if (string.IsNullOrWhiteSpace(registro.summaryStandard))
                            registro.summaryStandard = null;

                        if (objeto.applicationName.Trim().ToUpper() == registro.applicationName.Trim().ToUpper()
                        && objeto.implementationType == registro.implementationType
                        && objeto.description.Trim().ToUpper() == registro.description.Trim().ToUpper()
                        && objeto.parentAPTCode == registro.parentAPTCode
                        && objeto.hasInterfaceId == registro.hasInterfaceId
                        && objeto.interfaceId == registro.interfaceId
                        && objeto.status == registro.status
                        && objeto.deploymentType == registro.deploymentType
                        && objeto.managed == registro.managed
                        && objeto.unit == registro.unit
                        && objeto.teamId == registro.teamId
                        && objeto.complianceLevel == registro.complianceLevel
                        && objeto.summaryStandard == registro.summaryStandard)
                        { resultado = false; }
                    }
                    else
                    {
                        if (objeto.applicationName.Trim().ToUpper() == registro.applicationName.Trim().ToUpper()
                        && objeto.implementationType == registro.implementationType
                        && objeto.description.Trim().ToUpper() == registro.description.Trim().ToUpper()
                        && objeto.parentAPTCode == registro.parentAPTCode
                        && objeto.hasInterfaceId == registro.hasInterfaceId
                        && objeto.interfaceId == registro.interfaceId
                        && objeto.status == registro.status
                        && objeto.deploymentType == registro.deploymentType
                        && objeto.managed == registro.managed
                        && objeto.unit == registro.unit
                        && objeto.teamId == registro.teamId)
                        { resultado = false; }
                    }


                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }

        }

        public override bool ValidarModificacion2(ApplicationDto objeto)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.AppId == objeto.AppId
                                    select u).FirstOrDefault();
                    bool resultado = true;

                    var expertosActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == registro.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto && x.isActive).ToList();

                    var PCIActuales = ctx.ApplicationPCI.Where(x => x.ApplicationId == registro.AppId && x.FlagActivo==true).ToList();



                    //Validar si hay un experto nuevo
                    var listaMatriculas = new List<string>();
                    bool flagNuevaMatricula = false;

                    bool flagDistintoNumero = false;

                    foreach (ApplicationManagerCatalog a in expertosActuales)
                    {
                        listaMatriculas.Add(a.username);
                    }
                    foreach (ExpertoDto experto in objeto.Expertos)
                    {
                        if (!listaMatriculas.Contains(experto.username))
                        {
                            flagNuevaMatricula = true;
                        }
                    }

                    if (expertosActuales.Count() != objeto.Expertos.Count())
                    {
                        flagDistintoNumero = true;
                    }

                    //Validar si hay un experto nuevo
                    var listaPCI = new List<int?>();
                    bool flagNuevoPCI = false;

                    bool flagDistintoNumeroPCI = false;

                    if (PCIActuales != null)
                    {

                        foreach (ApplicationPCI a in PCIActuales)
                        {
                            listaPCI.Add(a.TipoPCIId);
                        }
                    }
                    if (objeto.TipoPCI != null)
                    {
                        foreach (var pci in objeto.TipoPCI)
                        {
                            if (!listaPCI.Contains(pci))
                            {
                                flagNuevoPCI = true;
                            }
                        }
                    }

                    if (PCIActuales.Count() != objeto.TipoPCI.Count())
                    {
                        flagDistintoNumeroPCI = true;
                    }

                    //Validar si hay un PCI nuevo 

                    if (objeto.userEntity == registro.userEntity
                        && objeto.infrastructure == registro.infrastructure
                        && objeto.developmentType == registro.developmentType
                        && objeto.developmentProvider == registro.developmentProvider
                        && objeto.replacementApplication == registro.replacementApplication
                        && objeto.authorizationMethod == registro.authorizationMethod
                        && objeto.authenticationMethod == registro.authenticationMethod
                        && objeto.groupTicketRemedy == registro.groupTicketRemedy
                        && objeto.webDomain == registro.webDomain && !flagNuevaMatricula && !flagDistintoNumero && !flagNuevoPCI && !flagDistintoNumeroPCI)
                    { resultado = false; }







                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetRequestAppCreation(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }

        }

        public override DataResultAplicacion ApprovedApplication(int id, string user, string email, List<ApplicationManagerCatalogDto> usuarios, string matricula, string usuarioAprobador)
        {
            try
            {
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.AppId == id
                                    select u
                                    ).FirstOrDefault();
                    if (registro == null) dataResult.EstadoTransaccion = false;
                    var gestionadoPor = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(registro.managed.Value);
                    var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(registro.architectId.Value);
                    var unidad = ctx.Unidad.FirstOrDefault(x => x.UnidadId == registro.unit);
                    var esUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;

                    if (dataResult.EstadoTransaccion)
                    {
                        if (registro != null)
                        {
                            registro.isApproved = true;
                            registro.approvedBy = user;
                            registro.approvedByEmail = email;
                            registro.dateApproved = DateTime.Now;

                            //Registrar flujo o validar si existe (en ese caso actualizar estado)
                            var flujoAdmin = ctx.ApplicationFlow.FirstOrDefault(x => x.AppId == registro.AppId && x.isActive == true && x.typeRegister == (int)ApplicationManagerRole.AdministradorPortafolio);
                            if (flujoAdmin != null)
                            {
                                flujoAdmin.approvedBy = user;
                                flujoAdmin.comments = "Aprobado";
                                flujoAdmin.createdBy = user;
                                flujoAdmin.dateApproved = DateTime.Now;
                                flujoAdmin.dateCreation = DateTime.Now;
                                flujoAdmin.isApproved = true;
                                flujoAdmin.ownerId = user;
                                flujoAdmin.ownerEmail = email;
                                flujoAdmin.isCompleted = true;
                            }
                            else
                            {
                                var flujoNuevoAdmin = new ApplicationFlow()
                                {
                                    AppId = registro.AppId,
                                    approvedBy = user,
                                    comments = "Aprobado",
                                    createdBy = user,
                                    dateApproved = DateTime.Now,
                                    dateCreation = DateTime.Now,
                                    FlowAppId = 0,
                                    isActive = true,
                                    isApproved = true,
                                    isCompleted = true,
                                    ownerEmail = email,
                                    ownerId = user,
                                    isNotified = true,
                                    typeFlow = (int)Flow.Registro,
                                    typeRegister = (int)ApplicationManagerRole.AdministradorPortafolio,
                                    RegistradoPor = usuarioAprobador

                                };
                                ctx.ApplicationFlow.Add(flujoNuevoAdmin);
                            }

                            if (arquitectoEvaluador != null)
                            {
                                //Registrando el flujo para el arquitecto para aplicaciones que no son User IT                                    
                                var flujoArquitecto = new ApplicationFlow()
                                {
                                    AppId = registro.AppId,
                                    createdBy = user,
                                    approvedBy = user,
                                    dateApproved = DateTime.Now,
                                    dateCreation = DateTime.Now,
                                    isCompleted = true,
                                    isNotified = true,
                                    ownerId = arquitectoEvaluador.Matricula,
                                    ownerEmail = arquitectoEvaluador.Correo,
                                    typeFlow = (int)Flow.Modificacion,
                                    typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                    isActive = true,
                                    isApproved = true,
                                    RegistradoPor = usuarioAprobador
                                };
                                ctx.ApplicationFlow.Add(flujoArquitecto);
                            }

                            if (unidad != null)
                            {
                                var flujoUnidad = new ApplicationFlow()
                                {
                                    AppId = registro.AppId,
                                    createdBy = user,
                                    approvedBy = user,
                                    dateApproved = DateTime.Now,
                                    dateCreation = DateTime.Now,
                                    isCompleted = true,
                                    isNotified = true,
                                    ownerId = unidad.ResponsableMatricula,
                                    ownerEmail = unidad.ResponsableCorreo,
                                    typeFlow = (int)Flow.Modificacion,
                                    typeRegister = (int)ApplicationManagerRole.Owner,
                                    isActive = true,
                                    isApproved = true,
                                    isActiveOwner = true,
                                    RegistradoPor = usuarioAprobador
                                };
                                ctx.ApplicationFlow.Add(flujoUnidad);
                            }


                            //Registrando responsables por grupos
                            if (usuarios != null)
                            {
                                if (usuarios.Count() > 0)
                                {
                                    var exoneradosSinUserIT = usuarios.Where(x => x.applicationManagerId != (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                    foreach (var item in exoneradosSinUserIT)
                                    {
                                        if (item.applicationManagerId != 0)
                                        {
                                            var flujoRol = new ApplicationFlow()
                                            {
                                                AppId = registro.AppId,
                                                createdBy = user,
                                                approvedBy = user,
                                                dateApproved = DateTime.Now,
                                                dateCreation = DateTime.Now,
                                                isCompleted = true,
                                                isNotified = true,
                                                ownerId = item.username,
                                                ownerEmail = item.email,
                                                typeFlow = (int)Flow.Modificacion,
                                                typeRegister = item.applicationManagerId,
                                                isActive = true,
                                                isApproved = true
                                            };
                                            ctx.ApplicationFlow.Add(flujoRol);
                                        }
                                    }
                                }
                            }

                            ctx.SaveChanges();

                            dataResult.AplicacionId = registro.AppId;

                            try
                            {
                                var mailManager = new MailingManager();
                                var listaCorreosExpertos = new List<string>();

                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", registro.applicationId);
                                diccionario.Add("[NombreAplicacion]", registro.applicationName);
                                diccionario.Add("[Descripcion]", registro.description);
                                diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)registro.status.Value));
                                diccionario.Add("[TipoActivo]", this.getAssetTypeName(registro.assetType));
                                diccionario.Add("[GestionadoPor]", this.getManagedName(registro.managed));
                                diccionario.Add("[ModeloEntrega]", this.getDeploymentTypeName(registro.deploymentType));
                                diccionario.Add("[NombreEquipo]", this.getTeamName(registro.teamId));
                                diccionario.Add("[Interface]", registro.interfaceId);
                                diccionario.Add("[UnidadDuena]", this.getUnitName(registro.unit));

                                var roles = this.GetRolesByApplication(registro.AppId);
                                var rolesDetalle = "<table border='1'><tr><td><strong>Rol</strong></td><td><strong>Responsable</strong></td></tr>{0}</table>";
                                var formato = "<tr><td>{0}</td><td>{1}</td></tr>";
                                var rolesApps = string.Empty;

                                //Owner
                                var owner = roles.FirstOrDefault(x => x.applicationManagerId == (int)ApplicationManagerRole.Owner);
                                rolesApps = rolesApps + string.Format(formato, "Owner/Líder Usuario", owner == null ? "NO APLICA" : owner.managerName);

                                //Gestor
                                var gestores = roles.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador).ToList();
                                foreach (var item in gestores)
                                {
                                    rolesApps = rolesApps + string.Format(formato, "Gestor/Usuario Autorizador", item == null ? "NO APLICA" : item.managerName);
                                }

                                //Tribe Lead
                                var tribeLead = roles.FirstOrDefault(x => x.applicationManagerId == (int)ApplicationManagerRole.TL);
                                rolesApps = rolesApps + string.Format(formato, "Tribe Lead", tribeLead == null ? "NO APLICA" : tribeLead.managerName);

                                //Tribe Technical Lead
                                var tribeTechnicalLead = roles.FirstOrDefault(x => x.applicationManagerId == (int)ApplicationManagerRole.TTL);
                                rolesApps = rolesApps + string.Format(formato, "Tribe Technical Lead", tribeTechnicalLead == null ? "NO APLICA" : tribeTechnicalLead.managerName);

                                //Broker
                                var broker = roles.FirstOrDefault(x => x.applicationManagerId == (int)ApplicationManagerRole.Broker);
                                rolesApps = rolesApps + string.Format(formato, "Broker", broker == null ? "NO APLICA" : broker.managerName);

                                //Expertos
                                var expertos = roles.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.Experto).ToList();
                                foreach (var item in expertos)
                                {
                                    rolesApps = rolesApps + string.Format(formato, "Experto/Especialista/Lider Técnico", item == null ? "NO APLICA" : item.managerName);
                                    listaCorreosExpertos.Add(item.email);
                                }

                                //Broker
                                var solicitante = roles.FirstOrDefault(x => x.applicationManagerId == (int)ApplicationManagerRole.Solicitante);
                                rolesApps = rolesApps + string.Format(formato, "Solicitante", solicitante == null ? "NO APLICA" : solicitante.managerName);

                                var data = string.Format(rolesDetalle, rolesApps);
                                diccionario.Add("[Roles]", data);

                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AprobacionPortafolio, registro.applicationId, diccionario, listaCorreosExpertos);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }
                    }

                    var cadenaConexion = Constantes.CadenaConexion;

                    using (SqlConnection cnx = new SqlConnection(cadenaConexion))
                    {
                        cnx.Open();
                        using (var comando = new SqlCommand("[app].[USP_CongelarFormatRegistro]", cnx))
                        {
                            comando.CommandTimeout = 0;
                            comando.CommandType = System.Data.CommandType.StoredProcedure;
                            comando.Parameters.Add(new SqlParameter("@appId", id));
                            comando.ExecuteNonQuery();
                        }

                        cnx.Close();
                    }

                    //Agregar Bitácora

                    try
                    {

                        //Agregar registro en bitácora
                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "" + usuarioAprobador + "" + "(" + matricula + ")" + " " +
                            "aprobó la solicitud de creación de la aplicación " + "" + registro.applicationId + "" + " - " + "" + registro.applicationName + " ";


                        BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = registro.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = usuarioAprobador
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    return dataResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion ApprovedSolicitud(int id, string user)
        {
            try
            {
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Solicitud
                                    where u.SolicitudAplicacionId == id
                                    select u
                                    ).FirstOrDefault();
                    if (registro == null) dataResult.EstadoTransaccion = false;
                    if (dataResult.EstadoTransaccion)
                    {
                        if (registro != null)
                        {
                            registro.FlagAprobacion = true;
                            registro.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;

                            var registro2 = (from u in ctx.Application
                                             where u.AppId == registro.AplicacionId
                                             select u
                                 ).FirstOrDefault();

                            registro2.status = Convert.ToInt32(registro.EstadoAnterior);

                            ctx.SaveChanges();

                            dataResult.AplicacionId = registro.AplicacionId;
                        }
                    }
                    return dataResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion ApprovedSolicitudEliminacion(int id, string user, string matricula, string nombre)
        {
            string CodigoApp = "";
            string NombreApp = "";
            string email = "";
            int appId = 0;
            try
            {
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Solicitud
                                    where u.SolicitudAplicacionId == id
                                    select u
                                    ).FirstOrDefault();

                    appId = registro.AplicacionId;

                    var solicitudes = (from u in ctx.Solicitud
                                       where u.AplicacionId == appId && u.SolicitudAplicacionId != id
                                       select u
                                    ).ToList();

                    foreach (Solicitud a in solicitudes)
                    {
                        a.EstadoSolicitud = (int)EstadoSolicitud.Desestimada;
                    }

                    email = registro.EmailSolicitante;
                    if (registro == null) dataResult.EstadoTransaccion = false;
                    if (dataResult.EstadoTransaccion)
                    {
                        if (registro != null)
                        {
                            registro.FlagAprobacion = true;
                            registro.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                            registro.NombreUsuarioAprobacion = nombre;
                            registro.FechaAprobacion = DateTime.Now;

                            var registro2 = (from u in ctx.Application
                                             where u.AppId == registro.AplicacionId
                                             select u
                                 ).FirstOrDefault();

                            registro2.status = (int)ApplicationState.Eliminada;
                            registro2.UsuarioEliminacion = nombre;
                            registro2.FechaEliminacion = DateTime.Now;

                            ctx.SaveChanges();

                            dataResult.AplicacionId = registro.AplicacionId;
                        }
                    }

                    try
                    {

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == registro.AplicacionId);
                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El administrador del Portafolio de Aplicaciones, " + nombre + "" + "(" + matricula + ")" + " " +
                            "aprobó la solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName;


                        BitacoraMensaje = BitacoraMensaje + " , el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = nombre
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    //Envio de correo
                    try
                    {
                        List<string> correos = new List<string>();
                        correos.Add(email);

                        var mailManager = new MailingManager();
                        var diccionario = new Dictionary<string, string>();
                        diccionario.Add("[CodigoAPT]", CodigoApp);
                        diccionario.Add("[NombreAplicacion]", NombreApp);
                        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.EliminacionAprobacionSolicitud, CodigoApp, diccionario, correos, true);
                    }
                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    this.SincronizarConCVT(CodigoApp);
                    return dataResult;
                 

                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion ObservedSolicitudEliminacion(int id, string user, string matricula, string nombre, string comment)
        {
            string CodigoApp = "";
            string NombreApp = "";
            string email = "";
            try
            {
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Solicitud
                                    where u.SolicitudAplicacionId == id
                                    select u
                                    ).FirstOrDefault();
                    email = registro.EmailSolicitante;
                    if (registro == null) dataResult.EstadoTransaccion = false;
                    if (dataResult.EstadoTransaccion)
                    {
                        if (registro != null)
                        {
                            registro.EstadoSolicitud = (int)EstadoSolicitud.Observada;
                            registro.ObservacionesRechazo = comment;
                            registro.NombreUsuarioAprobacion = nombre;
                            registro.FechaAprobacion = DateTime.Now;

                            ctx.SaveChanges();

                            dataResult.AplicacionId = registro.AplicacionId;
                        }
                    }

                    try
                    {

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == registro.AplicacionId);
                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El administrador del Portafolio de Aplicaciones, " + nombre + "" + "(" + matricula + ")" + " " +
                            "mandó a observación la solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " por el siguiente motivo: ";

                        BitacoraMensaje = BitacoraMensaje + comment;

                        BitacoraMensaje = BitacoraMensaje + " , el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = nombre
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    //Envio de correo
                    try
                    {
                        List<string> correos = new List<string>();
                        correos.Add(email);

                        var mailManager = new MailingManager();
                        var diccionario = new Dictionary<string, string>();
                        diccionario.Add("[CodigoAPT]", CodigoApp);
                        diccionario.Add("[NombreAplicacion]", NombreApp);
                        diccionario.Add("[Motivo]", comment);
                        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ObservaciónSolicitudEliminación, CodigoApp, diccionario, correos);
                    }
                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    return dataResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion RefusedSolicitud(int id, string user, string comments, string matricula, string nombre)
        {
            string CodigoApp = "";
            string NombreApp = "";
            string email = "";
            try
            {
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Solicitud
                                    where u.SolicitudAplicacionId == id
                                    select u
                                    ).FirstOrDefault();
                    email = registro.EmailSolicitante;
                    if (registro == null) dataResult.EstadoTransaccion = false;
                    if (dataResult.EstadoTransaccion)
                    {
                        if (registro != null)
                        {
                            registro.FlagAprobacion = false;
                            registro.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                            registro.ObservacionesRechazo = comments;
                            registro.NombreUsuarioModificacion = nombre;                            
                            registro.FechaModificacion = DateTime.Now;
                            registro.NombreRechazo = "Administrador del portafolio";
                            registro.FechaRechazo = DateTime.Now;



                            ctx.SaveChanges();

                            dataResult.AplicacionId = registro.AplicacionId;
                        }
                    }

                    try
                    {

                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == registro.AplicacionId);
                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El administrador del Portafolio de Aplicaciones " + nombre + "" + "(" + matricula + ")" + " " +
                            "rechazó la solicitud de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " por el siguiente motivo: ";
                        BitacoraMensaje = BitacoraMensaje + comments;

                        BitacoraMensaje = BitacoraMensaje + " , el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = matricula,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = nombre
                        };

                        ctx.BitacoraAcciones.Add(registroBitacora);
                        ctx.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    //Envio de correo
                    try
                    {
                        List<string> correos = new List<string>();
                        correos.Add(email);

                        var mailManager = new MailingManager();
                        var diccionario = new Dictionary<string, string>();
                        diccionario.Add("[CodigoAPT]", CodigoApp);
                        diccionario.Add("[NombreAplicacion]", NombreApp);
                        diccionario.Add("[MotivoEliminacion]", comments);
                        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.EliminacionRechazoSolicitud, CodigoApp, diccionario, correos);
                    }
                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }


                    return dataResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion RefusedSolicitudEliminacion(int id, string user, string comments)
        {
            try
            {
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Solicitud
                                    where u.SolicitudAplicacionId == id
                                    select u
                                    ).FirstOrDefault();
                    if (registro == null) dataResult.EstadoTransaccion = false;
                    if (dataResult.EstadoTransaccion)
                    {
                        if (registro != null)
                        {
                            registro.FlagAprobacion = false;
                            registro.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                            registro.Observaciones = comments;




                            ctx.SaveChanges();

                            dataResult.AplicacionId = registro.AplicacionId;
                        }
                    }
                    return dataResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowList> GetApplicationFlowByApp(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.ApplicationFlow
                                     join u2 in ctx.Application on u.AppId equals u2.AppId
                                     where u.AppId == filter.Id && u.isActive == true
                                     //&& u.typeRegister!= (int)ApplicationManagerRole.AIO
                                     && u.typeFlow == (int)Flow.Registro
                                     select new ApplicationFlowList()
                                     {
                                         AppId = u2.AppId,
                                         FlowAppId = u.FlowAppId,
                                         applicationId = u2.applicationId,
                                         applicationName = u2.applicationName,
                                         comments = u.comments,
                                         dateCreation = u.dateCreation,
                                         dateApproved = u.dateApproved,
                                         isApproved = u.isApproved,
                                         isCompleted = u.isCompleted,
                                         status = u2.status,
                                         typeFlow = u.typeFlow,
                                         typeRegister = u.typeRegister,
                                         name = u.ownerId,
                                         mail = u.ownerEmail,
                                         isActive = u2.isActive
                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }


        public override List<ApplicationFlowList> GetApplicationFlowByAppEliminacion(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.ApplicationFlow
                                    join u2 in ctx.Application on u.AppId equals u2.AppId
                                    join u3 in ctx.Solicitud on u.SolicitudAplicacionId equals u3.SolicitudAplicacionId
                                    where u.AppId == filter.Id && u.isActive == true && u3.SolicitudAplicacionId == filter.solId
                                    //&& u.typeRegister!= (int)ApplicationManagerRole.AIO
                                    && u.typeFlow == (int)Flow.Eliminacion 
                                    select new ApplicationFlowList()
                                    {
                                        AppId = u2.AppId,
                                        FlowAppId = u.FlowAppId,
                                        applicationId = u2.applicationId,
                                        applicationName = u2.applicationName,
                                        comments = u.comments,
                                        dateCreation = u.dateCreation,
                                        dateApproved = u.dateApproved,
                                        isApproved = u.isApproved,
                                        isCompleted = u.isCompleted,
                                        status = u2.status,
                                        typeFlow = u.typeFlow,
                                        typeRegister = u.typeRegister,
                                        name = u.ownerId,
                                        mail = u.ownerEmail,
                                        isActive = u2.isActive,
                                        IdSolicitud = u.SolicitudAplicacionId
                                    }).FirstOrDefault();

                    if (registro.isCompleted == true)
                    {
                        registro.estadoEliminacion = "Atendida";
                    }
                    else if (registro.isCompleted == false)
                    {
                        registro.estadoEliminacion = "Pendiente";
                    }
                    registro.typeRegisterDetail2 = registro.typeRegisterDetail;

                    var sol = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == registro.IdSolicitud);

                    var registros = new List<ApplicationFlowList>();
                    registros.Add(registro);

                    ApplicationFlowList solAdmin = new ApplicationFlowList();
                    solAdmin.AppId = registro.AppId;

                    if (sol.EstadoSolicitud != (int)EstadoSolicitud.Pendiente && sol.EstadoSolicitud != (int)EstadoSolicitud.PendienteCustodio)
                    {
                        solAdmin.isCompleted = true;
                    }
                    else if (sol.EstadoSolicitud == (int)EstadoSolicitud.Pendiente || sol.EstadoSolicitud == (int)EstadoSolicitud.PendienteCustodio)
                    {
                        solAdmin.isCompleted = false;
                    }

                    solAdmin.estadoEliminacion = Utilitarios.GetEnumDescription2((EstadoSolicitud)sol.EstadoSolicitud);                    
                    solAdmin.typeRegisterDetail2 = "Administrador del portafolio";

                    registros.Add(solAdmin);

                    totalRows = registros.Count();
                    //registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowList> GetApplicationFlowByAppModificacion(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.ApplicationFlow
                                    join u2 in ctx.Application on u.AppId equals u2.AppId
                                    join u3 in ctx.Solicitud on u.SolicitudAplicacionId equals u3.SolicitudAplicacionId
                                    where u.AppId == filter.Id && u.isActive == true && u3.SolicitudAplicacionId == filter.solId
                                    //&& u.typeRegister!= (int)ApplicationManagerRole.AIO
                                    && u.typeFlow == (int)Flow.Modificacion
                                    select new ApplicationFlowList()
                                    {
                                        AppId = u2.AppId,
                                        FlowAppId = u.FlowAppId,
                                        applicationId = u2.applicationId,
                                        applicationName = u2.applicationName,
                                        comments = u.comments,
                                        dateCreation = u.dateCreation,
                                        dateApproved = u.dateApproved,
                                        isApproved = u.isApproved,
                                        isCompleted = u.isCompleted,
                                        status = u2.status,
                                        typeFlow = u.typeFlow,
                                        typeRegister = u.typeRegister,
                                        name = u.ownerId,
                                        mail = u.ownerEmail,
                                        isActive = u2.isActive,
                                        IdSolicitud = u.SolicitudAplicacionId
                                    }).FirstOrDefault();

                    if (registro.isCompleted == true)
                    {
                        registro.estadoEliminacion = "Atendida";
                    }
                    else if (registro.isCompleted == false)
                    {
                        registro.estadoEliminacion = "Pendiente";
                    }
                    registro.typeRegisterDetail2 = registro.typeRegisterDetail;

                    var sol = ctx.Solicitud.FirstOrDefault(x => x.SolicitudAplicacionId == registro.IdSolicitud);

                    var registros = new List<ApplicationFlowList>();
                    registros.Add(registro);

                    ApplicationFlowList solAdmin = new ApplicationFlowList();
                    solAdmin.AppId = registro.AppId;

                    if (sol.EstadoSolicitud != (int)EstadoSolicitud.Pendiente && sol.EstadoSolicitud != (int)EstadoSolicitud.PendienteCustodio)
                    {
                        solAdmin.isCompleted = true;
                    }
                    else if (sol.EstadoSolicitud == (int)EstadoSolicitud.Pendiente || sol.EstadoSolicitud == (int)EstadoSolicitud.PendienteCustodio)
                    {
                        solAdmin.isCompleted = false;
                    }

                    solAdmin.estadoModificacion = Utilitarios.GetEnumDescription2((EstadoSolicitud)sol.EstadoSolicitud);
                    solAdmin.typeRegisterDetail2 = "Administrador del portafolio";

                    registros.Add(solAdmin);

                    totalRows = registros.Count();
                    //registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowList> GetApplicationFlowByAppPendiente(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Solicitud
                                     where u.AplicacionId == filter.Id &&
                                     (u.EstadoSolicitud == (int)EstadoSolicitud.Pendiente || u.EstadoSolicitud == (int)EstadoSolicitud.PendienteCustodio)
                                     select new ApplicationFlowList()
                                     {
                                         AppId = u.AplicacionId,
                                         dateCreation = u.FechaCreacion,
                                         NombreUsuarioCreacion = u.NombreUsuarioModificacion,
                                         EstadoSolicitudId = u.EstadoSolicitud
                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByApp(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationManagerCatalogDto> GetRolesByApplication(int appId)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                    if (app != null)
                    {
                        var listaManagers = (from u in ctx.ApplicationManagerCatalog
                                             join u2 in ctx.Application on u.applicationId equals u2.applicationId
                                             join u3 in ctx.ApplicationManager on u.applicationManagerId equals u3.applicationManagerId
                                             where u2.AppId == appId && u.isActive
                                             select new ApplicationManagerCatalogDto
                                             {
                                                 username = u.username,
                                                 managerName = u.managerName,
                                                 applicationManagerId = u.applicationManagerId,
                                                 email = u.email,
                                                 applicationManagerIdDetail = u3.Name
                                             }).Distinct().ToList();

                        if (app.isApproved.HasValue)
                        {
                            if (app.isApproved.Value)
                            {
                                listaManagers.Add(new ApplicationManagerCatalogDto()
                                {
                                    username = app.approvedBy,
                                    managerName = string.Empty,
                                    applicationManagerId = 0,
                                    email = app.approvedByEmail,
                                    applicationManagerIdDetail = "Administrador Portafolio"
                                });
                            }
                        }

                        return listaManagers;
                    }
                    else
                        return null;
                }
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationManagerCatalogDto> GetExpertsByApplication(int appId)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                    if (app != null)
                    {
                        var listaManagers = (from u in ctx.ApplicationManagerCatalog
                                             join u2 in ctx.Application on u.applicationId equals u2.applicationId
                                             join u3 in ctx.ApplicationManager on u.applicationManagerId equals u3.applicationManagerId
                                             where u2.AppId == appId && u.isActive && u.applicationManagerId==(int)ApplicationManagerRole.Experto
                                             select new ApplicationManagerCatalogDto
                                             {
                                                 username = u.username,
                                                 managerName = u.managerName,
                                                 applicationManagerId = u.applicationManagerId,
                                                 email = u.email,
                                                 applicationManagerIdDetail = u3.Name
                                             }).Distinct().ToList();

                        if (app.isApproved.HasValue)
                        {
                            if (app.isApproved.Value)
                            {
                                listaManagers.Add(new ApplicationManagerCatalogDto()
                                {
                                    username = app.approvedBy,
                                    managerName = string.Empty,
                                    applicationManagerId = 0,
                                    email = app.approvedByEmail,
                                    applicationManagerIdDetail = "Administrador Portafolio"
                                });
                            }
                        }

                        return listaManagers;
                    }
                    else
                        return null;
                }
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
        }


        public override List<ApplicationManagerCatalogDto> GetRolesByInitialApplication(int appId)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = (from u in ctx.InitialApplication
                               where u.AppId == appId
                               select new ApplicationDetail()
                               {
                                   id = u.AppId,
                                   applicationId = u.applicationId,
                                   deploymentType = u.deploymentType,
                                   deploymentTypeOriginal = u.deploymentTypeOriginal,
                                   managed = u.managed,
                                   applicationName = u.applicationName,
                                   description = u.description,
                                   developmentProvider = u.developmentProvider,
                                   developmentType = u.developmentType,
                                   hasInterfaceId = u.hasInterfaceId,
                                   implementationType = u.implementationType,
                                   infrastructure = u.infrastructure,
                                   interfaceId = u.interfaceId,
                                   mainOffice = u.mainOffice,
                                   parentAPTCode = u.parentAPTCode,
                                   registerDate = u.registerDate,
                                   replacementApplication = u.replacementApplication,
                                   teamName = u.teamName,
                                   unit = u.unit,
                                   userEntity = u.userEntity,
                                   status = u.status,
                                   authenticationMethod = u.authenticationMethod,
                                   authorizationMethod = u.authorizationMethod,
                                   BIANdomain = u.BIANdomain,
                                   assetType = u.assetType,
                                   tobe = u.tobe,
                                   tierProduction = u.tierProduction,
                                   tierPreProduction = u.tierPreProduction,
                                   technicalClassification = u.technicalClassification,
                                   technicalSubclassification = u.technicalSubclassification,
                                   technologyCategory = u.technologyCategory,
                                   architecId = u.architectId,
                                   teamId = u.teamId,
                                   isFormalApplication = u.isFormalApplication,
                                   regularizationDate = u.regularizationDate,
                                   groupTicketRemedy = u.groupTicketRemedy,
                                   webDomain = u.webDomain,
                                   applicationCriticalityBIA = u.applicationCriticalityBIA,
                                   classification = u.classification,
                                   finalCriticality = u.finalCriticality,
                                   ProductoServicioRepresentativoName = u.starProduct,
                                   MenorRTOName = u.shorterApplicationResponseTime,
                                   MayorGradoInterrupcionName = u.highestDegreeInterruption,
                                   dateFirstRelease = u.dateFirstRelease,
                                   technicalSubClassification = u.technicalSubclassification,
                                   TIERProduccionName = u.tierProduction,
                                   TIERPreProduccionName = u.tierPreProduction,
                                   isApproved = u.isApproved,
                                   summaryStandard = u.summaryStandard,
                                   complianceLevel = u.complianceLevel,
                                   commentsObserved = u.commentsObserved,
                                   registerBy = u.registerBy,
                                   approvedByEmail = u.approvedByEmail,
                                   approvedBy = u.approvedBy
                               }).FirstOrDefault();

                    //var app = ctx.InitialApplication.FirstOrDefault(x => x.AppId == appId);

                    if (app != null)
                    {
                        var listaManagers = (from u in ctx.InitialApplicationManagerCatalog
                                             join u2 in ctx.InitialApplication on u.applicationId equals u2.applicationId
                                             join u3 in ctx.ApplicationManager on u.applicationManagerId equals u3.applicationManagerId
                                             where u2.AppId == appId && u.isActive
                                             select new ApplicationManagerCatalogDto
                                             {
                                                 username = u.username,
                                                 managerName = u.managerName,
                                                 applicationManagerId = u.applicationManagerId,
                                                 email = u.email,
                                                 applicationManagerIdDetail = u3.Name
                                             }).Distinct().ToList();

                        if (app.isApproved.HasValue)
                        {
                            if (app.isApproved.Value)
                            {
                                listaManagers.Add(new ApplicationManagerCatalogDto()
                                {
                                    username = app.approvedBy,
                                    managerName = string.Empty,
                                    applicationManagerId = 0,
                                    email = app.approvedByEmail,
                                    applicationManagerIdDetail = "Administrador Portafolio"
                                });
                            }
                        }

                        return listaManagers;
                    }
                    else
                        return null;
                }
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationManagerCatalogDto> GetOwnersByApplication(int appId)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                    if (app != null)
                    {
                        var listaManagers = (from u in ctx.ApplicationManagerCatalog
                                             join u2 in ctx.Application on u.applicationId equals u2.applicationId
                                             join u3 in ctx.ApplicationManager on u.applicationManagerId equals u3.applicationManagerId
                                             where u2.AppId == appId && u.isActive && u.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador
                                             select new ApplicationManagerCatalogDto
                                             {
                                                 username = u.username,
                                                 managerName = u.managerName,
                                                 applicationManagerId = u.applicationManagerId,
                                                 email = u.email,
                                                 applicationManagerIdDetail = u3.Name
                                             }).Distinct().ToList();

                        //if (app.isApproved.HasValue)
                        //{
                        //    if (app.isApproved.Value)
                        //    {
                        //        listaManagers.Add(new ApplicationManagerCatalogDto()
                        //        {
                        //            username = app.approvedBy,
                        //            managerName = string.Empty,
                        //            applicationManagerId = 0,
                        //            email = app.approvedByEmail,
                        //            applicationManagerIdDetail = "Administrador Portafolio"
                        //        });
                        //    }
                        //}

                        return listaManagers;
                    }
                    else
                        return null;
                }
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationManagerCatalogDto> GetExpertosByApplication(int appId)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == appId);
                    if (app != null)
                    {
                        var listaManagers = (from u in ctx.ApplicationManagerCatalog
                                             join u2 in ctx.Application on u.applicationId equals u2.applicationId
                                             join u3 in ctx.ApplicationManager on u.applicationManagerId equals u3.applicationManagerId
                                             where u2.AppId == appId && u.isActive && u.applicationManagerId == (int)ApplicationManagerRole.Experto
                                             select new ApplicationManagerCatalogDto
                                             {
                                                 username = u.username,
                                                 managerName = u.managerName,
                                                 applicationManagerId = u.applicationManagerId,
                                                 email = u.email,
                                                 applicationManagerIdDetail = u3.Name
                                             }).Distinct().ToList();

                        //if (app.isApproved.HasValue)
                        //{
                        //    if (app.isApproved.Value)
                        //    {
                        //        listaManagers.Add(new ApplicationManagerCatalogDto()
                        //        {
                        //            username = app.approvedBy,
                        //            managerName = string.Empty,
                        //            applicationManagerId = 0,
                        //            email = app.approvedByEmail,
                        //            applicationManagerIdDetail = "Administrador Portafolio"
                        //        });
                        //    }
                        //}

                        return listaManagers;
                    }
                    else
                        return null;
                }
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int GetApplicationManagerCatalogByRolesIds()"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationAdmin(ApplicationDto objeto, List<ApplicationManagerCatalogDto> usuarios)
        {
            DbContextTransaction transaction = null;
            bool enviarNotificacionCriticidad = false;
            int? estadoInicial = 0;
            bool flagUserIt = false;
            int areaBIANIdInicial = 0;
            int areaBIANIdFinal = 0;
            string codigoAPT = string.Empty;

            bool modificacionExperto = false;
            var bitacoraExperto = string.Empty;
            bool modificacionAutorizador = false;
            bool modificacionExperto2 = false;

            List<string> listaExpertosAntiguos = new List<string>();
            List<string> listaAutorizadoresAntiguos = new List<string>();


            bool nuevosPCI = false;

            var cambiosDetalle = "<table border='1'><tr><td><strong>Campo</strong></td><td><strong>Valor anterior</strong></td><td><strong>Valor nuevo</strong></td></tr>{0}</table>";
            var formato = "<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>";
            var filas = string.Empty;
            string pciIniciales = "";

            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);

                        codigoAPT = entidad.applicationId;

                        estadoInicial = entidad.status;

                        var gestionadoPor = ServiceManager<ActivosDAO>.Provider.GetGestionadoPorById(objeto.managed.Value);
                        var flagUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;

                        int mainOfficeId = this.GetMainOfficeId(objeto.architectId);

                        ApplicationDtoTemporal entidadInicial = new ApplicationDtoTemporal();

                        entidadInicial.managed = entidad.managed;
                        entidadInicial.applicationName = entidad.applicationName;
                        entidadInicial.implementationType = entidad.implementationType;
                        entidadInicial.description = entidad.description;
                        entidadInicial.deploymentType = entidad.deploymentType;
                        entidadInicial.parentAPTCode = entidad.parentAPTCode == null ? string.Empty : entidad.parentAPTCode;
                        entidadInicial.mainOffice = mainOfficeId;
                        //Arquitecto                                
                        //tiene interfaz,
                        entidadInicial.hasInterfaceId = entidad.hasInterfaceId;
                        entidadInicial.interfaceId = entidad.interfaceId;
                        if (string.IsNullOrWhiteSpace(entidadInicial.interfaceId))
                            entidadInicial.interfaceId = null;

                        entidadInicial.unit = entidad.unit;
                        entidadInicial.teamName = entidad.teamName;
                        entidadInicial.teamId = entidad.teamId;

                        entidadInicial.userEntity = entidad.userEntity == null ? string.Empty : entidad.userEntity;
                        entidadInicial.developmentType = entidad.developmentType;
                        entidadInicial.developmentProvider = entidad.developmentProvider == null ? string.Empty : entidad.developmentProvider;
                        entidadInicial.infrastructure = entidad.infrastructure;
                        entidadInicial.replacementApplication = entidad.replacementApplication == null ? string.Empty : entidad.replacementApplication;
                        entidadInicial.authenticationMethod = entidad.authenticationMethod;
                        entidadInicial.authorizationMethod = entidad.authorizationMethod;
                        entidadInicial.architectId = entidad.architectId;

                        entidadInicial.groupTicketRemedy = entidad.groupTicketRemedy;
                        entidadInicial.webDomain = entidad.webDomain == null ? string.Empty : entidad.webDomain;
                        entidadInicial.classification = entidad.classification;
                        entidadInicial.applicationCriticalityBIA = entidad.applicationCriticalityBIA;

                        //Nuevos campos
                        entidadInicial.assetType = entidad.assetType;
                        entidadInicial.BIANdomain = entidad.BIANdomain;

                        entidadInicial.tobe = entidad.tobe;
                        //entidad.mainOffice = objeto.mainOffice;
                        entidadInicial.technologyCategory = entidad.technologyCategory;
                        entidadInicial.technicalClassification = entidad.technicalClassification;
                        entidadInicial.technicalSubclassification = entidad.technicalSubclassification;
                        entidadInicial.tierProduction = entidad.tierProduction == null ? string.Empty : entidad.tierProduction;
                        entidadInicial.tierPreProduction = entidad.tierPreProduction == null ? string.Empty : entidad.tierPreProduction;
                        entidadInicial.summaryStandard = entidad.summaryStandard == null ? string.Empty : entidad.summaryStandard;
                        entidadInicial.complianceLevel = entidad.complianceLevel;
                        entidadInicial.status = entidad.status;
                        entidadInicial.starProduct = entidad.starProduct == null ? string.Empty : entidad.starProduct;
                        entidadInicial.shorterApplicationResponseTime = entidad.shorterApplicationResponseTime == null ? string.Empty : entidad.shorterApplicationResponseTime;                        
                        entidadInicial.highestDegreeInterruption = entidad.highestDegreeInterruption == null ? string.Empty : entidad.highestDegreeInterruption;
                        entidadInicial.dateFirstRelease = entidad.dateFirstRelease;

                        var BIANInicial = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == entidad.BIANdomain);
                        if (BIANInicial != null)
                            areaBIANIdInicial = BIANInicial.AreaBianId;
                        var BIANFinal = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == objeto.BIANdomain);
                        if (BIANFinal != null)
                            areaBIANIdFinal = BIANFinal.AreaBianId;


                        if (entidad == null) dataResult.EstadoTransaccion = false;
                        if (gestionadoPor == null) dataResult.EstadoTransaccion = false;

                        if (string.IsNullOrWhiteSpace(objeto.interfaceId))
                            objeto.interfaceId = null;

                        if (dataResult.EstadoTransaccion)
                        {
                            if (objeto.status == (int)ApplicationState.Eliminada)
                            {

                                entidad.status = objeto.status;
                                entidad.FechaEliminacion = DateTime.Now;
                                entidad.UsuarioEliminacion = objeto.NombreUsuarioModificacion;

                            }
                            else
                            {
                                entidad.managed = objeto.managed;
                                entidad.applicationName = objeto.applicationName;
                                entidad.implementationType = objeto.implementationType;
                                entidad.description = objeto.description;
                                entidad.deploymentType = objeto.deploymentType;
                                entidad.parentAPTCode = objeto.parentAPTCode;
                                entidad.mainOffice = mainOfficeId;
                                //Arquitecto                                
                                //tiene interfaz,
                                entidad.hasInterfaceId = objeto.hasInterfaceId;
                                entidad.interfaceId = objeto.interfaceId;
                                entidad.unit = objeto.unit;
                                entidad.teamName = objeto.teamName;
                                entidad.teamId = objeto.teamId;

                                entidad.userEntity = objeto.userEntity;
                                entidad.developmentType = objeto.developmentType;
                                entidad.developmentProvider = objeto.developmentProvider;
                                entidad.infrastructure = objeto.infrastructure;
                                entidad.replacementApplication = objeto.replacementApplication;
                                entidad.authenticationMethod = objeto.authenticationMethod;
                                entidad.authorizationMethod = objeto.authorizationMethod;
                                entidad.architectId = objeto.architectId;

                                entidad.groupTicketRemedy = objeto.groupTicketRemedy;
                                entidad.webDomain = objeto.webDomain;
                                entidad.classification = objeto.classification;
                                entidad.applicationCriticalityBIA = objeto.applicationCriticalityBIA;

                                //Nuevos campos
                                entidad.assetType = objeto.assetType;
                                entidad.BIANdomain = objeto.BIANdomain;

                                entidad.tobe = objeto.tobe;
                                //entidad.mainOffice = objeto.mainOffice;
                                entidad.technologyCategory = objeto.technologyCategory;
                                entidad.technicalClassification = objeto.technicalClassification;
                                entidad.technicalSubclassification = objeto.technicalSubclassification;
                                entidad.tierProduction = objeto.tierProduction;
                                entidad.tierPreProduction = objeto.tierPreProduction;


                                entidad.status = objeto.status;
                                if (entidad.status == (int)ApplicationState.Eliminada)
                                {
                                    entidad.FechaEliminacion = DateTime.Now;
                                    entidad.UsuarioEliminacion = objeto.NombreUsuarioModificacion;
                                }
                                if (flagUserIT)
                                {
                                    entidad.summaryStandard = objeto.summaryStandard;
                                    entidad.complianceLevel = objeto.complianceLevel;
                                    entidad.teamId = null;
                                }
                                else
                                {
                                    entidad.summaryStandard = string.Empty;
                                    entidad.complianceLevel = null;
                                }

                                //PCI
                                var PCIActuales = ctx.ApplicationPCI.Where(x => x.ApplicationId == entidad.AppId && x.FlagActivo == true && x.FlagEliminado == false).ToList();
                                var IdPCIS = ctx.ApplicationPCI.Where(x => x.ApplicationId == entidad.AppId && x.FlagActivo == true && x.FlagEliminado == false).Select(x => x.TipoPCIId).ToList();

                                foreach (int a in IdPCIS)
                                {
                                    pciIniciales = pciIniciales + "" + getPCIName(a) + ",  ";

                                }

                                if (IdPCIS != null && IdPCIS.Count > 0)
                                {
                                    var set = new HashSet<int?>(IdPCIS);
                                    nuevosPCI = !(set.SetEquals(objeto.TipoPCI));
                                }

                                if (objeto.TipoPCI != null)
                                {

                                    //Desactiva los PCI actuales

                                    foreach (ApplicationPCI a in PCIActuales)
                                    {
                                        a.FlagActivo = false;
                                        a.FlagEliminado = true;
                                    }

                                    //Crea los nuevos PCI asociados
                                    foreach (int PCI in objeto.TipoPCI)
                                    {
                                        ApplicationPCI registro = new ApplicationPCI();
                                        registro.ApplicationId = entidad.AppId;
                                        registro.TipoPCIId = PCI;
                                        registro.FlagActivo = true;
                                        registro.FlagEliminado = false;
                                        ctx.ApplicationPCI.Add(registro);
                                    }
                                }





                                ctx.SaveChanges();



                                var listaManagers = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.Experto
                                                     || x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador)).ToList();

                                listaExpertosAntiguos = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.Experto)).Select(x => x.managerName).ToList();
                                listaAutorizadoresAntiguos = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador)).Select(x => x.managerName).ToList();

                                foreach (ApplicationManagerCatalog item in listaManagers)
                                {

                                    ctx.ApplicationManagerCatalog.Remove(item);
                                }


                                //Agrega nuevos expertos y usuarios autorizadores
                                foreach (ApplicationManagerCatalogDto item in objeto.NuevosRolesList)
                                {
                                    var nuevoApplicationManager = new ApplicationManagerCatalog()
                                    {
                                        applicationId = entidad.applicationId,
                                        applicationManagerCatalogId = 0,
                                        applicationManagerId = item.applicationManagerId,
                                        createdBy = objeto.registerBy,
                                        dateCreation = DateTime.Now,
                                        email = item.email,
                                        isActive = true,
                                        managerName = item.managerName,
                                        username = item.username
                                    };
                                    ctx.ApplicationManagerCatalog.Add(nuevoApplicationManager);
                                }


                                if (objeto.finalCriticality.HasValue)
                                {
                                    if (objeto.finalCriticality != entidad.finalCriticality)
                                    {
                                        entidadInicial.finalCriticality = entidad.finalCriticality;
                                        entidad.finalCriticality = objeto.finalCriticality;
                                        enviarNotificacionCriticidad = (objeto.finalCriticality.Value > 0);
                                    }
                                }


                                entidad.starProduct = objeto.starProduct;
                                entidad.shorterApplicationResponseTime = objeto.shorterApplicationResponseTime;
                                entidad.highestDegreeInterruption = objeto.highestDegreeInterruption;

                                entidad.dateFirstRelease = objeto.dateFirstRelease;
                                if (objeto.dateFirstRelease.HasValue)
                                {
                                    if (entidad.status == (int)ApplicationState.EnDesarrollo)
                                        entidad.status = (int)ApplicationState.Vigente;

                                    var implementacion = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == objeto.implementationType);
                                    var claveProduccion = ServiceManager<ParametroDAO>.Provider.ObtenerParametroApp("VALOR_APLICACION_PRODUCCION");
                                    var implementacionProduccion = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor.ToUpper() == claveProduccion.Valor.ToUpper());
                                    if (implementacionProduccion != null)
                                    {
                                        if (implementacion != null)
                                        {
                                            if (implementacionProduccion.ParametricaDetalleId != implementacion.ParametricaDetalleId)
                                                entidad.implementationType = implementacionProduccion.ParametricaDetalleId;
                                        }
                                    }

                                }

                                if (entidad.isApproved == false)
                                {
                                    //Validar unidad
                                    if (objeto.unit.HasValue)
                                    {
                                        if (objeto.unit.Value > 0)
                                        {
                                            var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(objeto.unit.Value);
                                            if (unidad != null)
                                            {
                                                //Registrando rol
                                                var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Owner && x.isActive);
                                                if (rol != null)
                                                {
                                                    if (rol.username != unidad.ResponsableMatricula)
                                                    {
                                                        rol.isActive = false;
                                                        rol.dateModification = DateTime.Now;
                                                        rol.modifiedBy = objeto.registerBy;

                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.Owner,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = unidad.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = unidad.Responsable,
                                                            username = unidad.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }
                                                }
                                                else
                                                {
                                                    var nuevoRol = new ApplicationManagerCatalog()
                                                    {
                                                        applicationId = entidad.applicationId,
                                                        applicationManagerCatalogId = 0,
                                                        applicationManagerId = (int)ApplicationManagerRole.Owner,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        email = unidad.ResponsableCorreo,
                                                        isActive = true,
                                                        managerName = unidad.Responsable,
                                                        username = unidad.ResponsableMatricula
                                                    };
                                                    ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                }

                                                //Registrando flujo
                                                var flujoActualSinAprobar = ctx.ApplicationFlow
                                                    .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.Owner && x.AppId == entidad.AppId && x.ownerId == unidad.ResponsableMatricula);
                                                if (flujoActualSinAprobar == null)
                                                {
                                                    var sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0", entidad.AppId, (int)ApplicationManagerRole.Owner);
                                                    ctx.Database.ExecuteSqlCommand(sql);

                                                    sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.Owner);
                                                    ctx.Database.ExecuteSqlCommand(sql);

                                                    var nuevoFlujo = new ApplicationFlow()
                                                    {
                                                        AppId = entidad.AppId,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        FlowAppId = 0,
                                                        isCompleted = false,
                                                        isNotified = false,
                                                        ownerEmail = unidad.ResponsableCorreo,
                                                        ownerId = unidad.ResponsableMatricula,
                                                        typeFlow = (int)Flow.Registro,
                                                        typeRegister = (int)ApplicationManagerRole.Owner,
                                                        isActive = true,
                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                    };
                                                    ctx.ApplicationFlow.Add(nuevoFlujo);

                                                    //Enviando correo al Owner
                                                    try
                                                    {
                                                        var mailManager = new MailingManager();
                                                        var diccionario = new Dictionary<string, string>();
                                                        diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                                        diccionario.Add("[NombreAplicacion]", entidad.applicationName);

                                                        mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2AsignacionOwner, entidad.applicationId, diccionario);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message, ex);
                                                    }
                                                }
                                                else
                                                {
                                                    //Validar si el flujo esta rechazado y es para el mismo Owner
                                                    if (flujoActualSinAprobar.isApproved.HasValue)
                                                    {
                                                        var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                        var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                        if (activo && !aprobado)
                                                        {
                                                            flujoActualSinAprobar.isActive = false;

                                                            var nuevoFlujo = new ApplicationFlow()
                                                            {
                                                                AppId = entidad.AppId,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                FlowAppId = 0,
                                                                isCompleted = false,
                                                                isNotified = false,
                                                                ownerEmail = unidad.ResponsableCorreo,
                                                                ownerId = unidad.ResponsableMatricula,
                                                                typeFlow = (int)Flow.Registro,
                                                                typeRegister = (int)ApplicationManagerRole.Owner,
                                                                isActive = true,
                                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                                            };
                                                            ctx.ApplicationFlow.Add(nuevoFlujo);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    //Validar si la aplicación es de tribu o si tiene jefe de equipo
                                    var esTribu = gestionadoPor.FlagEquipoAgil.HasValue ? gestionadoPor.FlagEquipoAgil.Value : false;
                                    var esUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;
                                    flagUserIt = esUserIT;
                                    var tieneJefeEquipo = gestionadoPor.FlagJefeEquipo.HasValue ? gestionadoPor.FlagJefeEquipo.Value : false;

                                    if (!esTribu)
                                    {
                                        if (tieneJefeEquipo)
                                        {
                                            //Validar Jefe de Equipo
                                            if (objeto.teamId.HasValue)
                                            {
                                                if (objeto.teamId.Value > 0)
                                                {
                                                    var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                    if (equipo != null)
                                                    {
                                                        //Registrando rol
                                                        var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo && x.isActive);
                                                        if (rol != null)
                                                        {
                                                            if (rol.username != equipo.ResponsableMatricula)
                                                            {
                                                                rol.isActive = false;
                                                                rol.dateModification = DateTime.Now;
                                                                rol.modifiedBy = objeto.registerBy;

                                                                var nuevoRol = new ApplicationManagerCatalog()
                                                                {
                                                                    applicationId = entidad.applicationId,
                                                                    applicationManagerCatalogId = 0,
                                                                    applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    email = equipo.ResponsableCorreo,
                                                                    isActive = true,
                                                                    managerName = equipo.Responsable,
                                                                    username = equipo.ResponsableMatricula
                                                                };
                                                                ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }

                                                        //Registrando flujo
                                                        var flujoActualSinAprobar = ctx.ApplicationFlow
                                                            .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.JefeDeEquipo && x.AppId == entidad.AppId && x.ownerId == equipo.ResponsableMatricula);

                                                        if (flujoActualSinAprobar == null)
                                                        {
                                                            var sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                            ctx.Database.ExecuteSqlCommand(sql);

                                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                            ctx.Database.ExecuteSqlCommand(sql);

                                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                            ctx.Database.ExecuteSqlCommand(sql);

                                                            var nuevoFlujo = new ApplicationFlow()
                                                            {
                                                                AppId = entidad.AppId,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                FlowAppId = 0,
                                                                isCompleted = false,
                                                                isNotified = false,
                                                                ownerEmail = equipo.ResponsableCorreo,
                                                                ownerId = equipo.ResponsableMatricula,
                                                                typeFlow = (int)Flow.Registro,
                                                                typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                isActive = true,
                                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                                            };
                                                            ctx.ApplicationFlow.Add(nuevoFlujo);

                                                        }
                                                        else
                                                        {
                                                            //Validar si el flujo esta rechazado y es para el mismo JdE
                                                            if (flujoActualSinAprobar.isApproved.HasValue)
                                                            {
                                                                var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                                var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                                if (activo && !aprobado)
                                                                {
                                                                    flujoActualSinAprobar.isActive = false;

                                                                    var nuevoFlujo = new ApplicationFlow()
                                                                    {
                                                                        AppId = entidad.AppId,
                                                                        createdBy = objeto.registerBy,
                                                                        dateCreation = DateTime.Now,
                                                                        FlowAppId = 0,
                                                                        isCompleted = false,
                                                                        isNotified = false,
                                                                        ownerEmail = equipo.ResponsableCorreo,
                                                                        ownerId = equipo.ResponsableMatricula,
                                                                        typeFlow = (int)Flow.Registro,
                                                                        typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                        isActive = true,
                                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                                    };
                                                                    ctx.ApplicationFlow.Add(nuevoFlujo);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    else
                                    {
                                        //Validar TTL
                                        if (objeto.teamId.HasValue)
                                        {
                                            if (objeto.teamId.Value > 0)
                                            {
                                                var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                if (equipo != null)
                                                {
                                                    //Registrando rol
                                                    var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TTL && x.isActive);
                                                    if (rol != null)
                                                    {
                                                        if (rol.username != equipo.ResponsableMatricula)
                                                        {
                                                            rol.isActive = false;
                                                            rol.dateModification = DateTime.Now;
                                                            rol.modifiedBy = objeto.registerBy;

                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = equipo.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = equipo.Responsable,
                                                            username = equipo.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }

                                                    //Registrando flujo
                                                    var flujoActualSinAprobar = ctx.ApplicationFlow
                                                        .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.TTL && x.AppId == entidad.AppId && x.ownerId == equipo.ResponsableMatricula);
                                                    if (flujoActualSinAprobar == null)
                                                    {
                                                        var sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        var nuevoFlujo = new ApplicationFlow()
                                                        {
                                                            AppId = entidad.AppId,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            FlowAppId = 0,
                                                            isCompleted = false,
                                                            isNotified = false,
                                                            ownerEmail = equipo.ResponsableCorreo,
                                                            ownerId = equipo.ResponsableMatricula,
                                                            typeFlow = (int)Flow.Registro,
                                                            typeRegister = (int)ApplicationManagerRole.TTL,
                                                            isActive = true,
                                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                                        };
                                                        ctx.ApplicationFlow.Add(nuevoFlujo);
                                                    }
                                                    else
                                                    {
                                                        //Validar si el flujo esta rechazado y es para el mismo JdE
                                                        if (flujoActualSinAprobar.isApproved.HasValue)
                                                        {
                                                            var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                            var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                            if (activo && !aprobado)
                                                            {
                                                                flujoActualSinAprobar.isActive = false;

                                                                var nuevoFlujo = new ApplicationFlow()
                                                                {
                                                                    AppId = entidad.AppId,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    FlowAppId = 0,
                                                                    isCompleted = false,
                                                                    isNotified = false,
                                                                    ownerEmail = equipo.ResponsableCorreo,
                                                                    ownerId = equipo.ResponsableMatricula,
                                                                    typeFlow = (int)Flow.Registro,
                                                                    typeRegister = (int)ApplicationManagerRole.TTL,
                                                                    isActive = true,
                                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                                };
                                                                ctx.ApplicationFlow.Add(nuevoFlujo);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    //Validar si el arquitecto evaluador, tecnologia o user it ha sido rechazado y se vuelve a asignar la solicitud
                                    var listaRechazados = ctx.ApplicationFlow.Where(x => x.AppId == objeto.AppId && x.isApproved == false && x.isActive == true).ToList();
                                    if (listaRechazados != null)
                                    {
                                        if (listaRechazados.Count > 0)
                                        {
                                            //Arquitecto evaluador
                                            var rechazoArquitectoEvaluador = listaRechazados.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoEvaluador);
                                            if (rechazoArquitectoEvaluador != null)
                                            {
                                                if (objeto.architectId != 0)
                                                {
                                                    var arquitectoEvaluador = ServiceManager<ActivosDAO>.Provider.GetArquitectoTiById(objeto.architectId);
                                                    if (arquitectoEvaluador != null)
                                                    {
                                                        {
                                                            var sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.ArquitectoEvaluador);
                                                            ctx.Database.ExecuteSqlCommand(sql);

                                                            var flujoArquitecto = new ApplicationFlow()
                                                            {
                                                                AppId = objeto.AppId,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                isCompleted = false,
                                                                isNotified = false,
                                                                ownerId = arquitectoEvaluador.Matricula,
                                                                ownerEmail = arquitectoEvaluador.Correo,
                                                                typeFlow = (int)Flow.Registro,
                                                                typeRegister = (int)ApplicationManagerRole.ArquitectoEvaluador,
                                                                isActive = true,
                                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                                            };
                                                            ctx.ApplicationFlow.Add(flujoArquitecto);
                                                        }
                                                    }
                                                }

                                            }

                                            //Arquitecto tecnología
                                            var rechazoArquitectoTecnologia = listaRechazados.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.ArquitectoTI);
                                            if (rechazoArquitectoTecnologia != null)
                                            {
                                                var sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.ArquitectoTI);
                                                ctx.Database.ExecuteSqlCommand(sql);

                                                if (usuarios != null)
                                                {
                                                    if (usuarios.Count > 0)
                                                    {
                                                        var arquitectosTI = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.ArquitectoTI).ToList();
                                                        foreach (var item in arquitectosTI)
                                                        {
                                                            if (item.applicationManagerId != 0)
                                                            {
                                                                var flujoRol = new ApplicationFlow()
                                                                {
                                                                    AppId = objeto.AppId,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    isCompleted = false,
                                                                    isNotified = false,
                                                                    ownerId = item.username,
                                                                    ownerEmail = item.email,
                                                                    typeFlow = (int)Flow.Registro,
                                                                    typeRegister = item.applicationManagerId,
                                                                    isActive = true,
                                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                                };
                                                                ctx.ApplicationFlow.Add(flujoRol);
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            if (esUserIT)
                                            {
                                                var rechazoUserIT = listaRechazados.FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.GobiernoUserIT);
                                                if (rechazoUserIT != null)
                                                {
                                                    var sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1", entidad.AppId, (int)ApplicationManagerRole.GobiernoUserIT);
                                                    ctx.Database.ExecuteSqlCommand(sql);

                                                    if (usuarios != null)
                                                    {
                                                        if (usuarios.Count > 0)
                                                        {
                                                            var userIT = usuarios.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.GobiernoUserIT).ToList();
                                                            foreach (var item in userIT)
                                                            {
                                                                if (item.applicationManagerId != 0)
                                                                {
                                                                    var flujoRol = new ApplicationFlow()
                                                                    {
                                                                        AppId = objeto.AppId,
                                                                        createdBy = objeto.registerBy,
                                                                        dateCreation = DateTime.Now,
                                                                        isCompleted = false,
                                                                        isNotified = false,
                                                                        ownerId = item.username,
                                                                        ownerEmail = item.email,
                                                                        typeFlow = (int)Flow.Registro,
                                                                        typeRegister = item.applicationManagerId,
                                                                        isActive = true,
                                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                                    };
                                                                    ctx.ApplicationFlow.Add(flujoRol);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //Validar unidad
                                    if (objeto.unit.HasValue)
                                    {
                                        if (objeto.unit.Value > 0)
                                        {
                                            var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(objeto.unit.Value);
                                            if (unidad != null)
                                            {
                                                //Registrando rol
                                                var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Owner && x.isActive);
                                                if (rol != null)
                                                {
                                                    if (rol.username != unidad.ResponsableMatricula || rol.managerName != unidad.Responsable)
                                                    {
                                                        rol.isActive = false;
                                                        rol.dateModification = DateTime.Now;
                                                        rol.modifiedBy = objeto.registerBy;

                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.Owner,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = unidad.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = unidad.Responsable,
                                                            username = unidad.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }
                                                }
                                                else
                                                {
                                                    var nuevoRol = new ApplicationManagerCatalog()
                                                    {
                                                        applicationId = entidad.applicationId,
                                                        applicationManagerCatalogId = 0,
                                                        applicationManagerId = (int)ApplicationManagerRole.Owner,
                                                        createdBy = objeto.registerBy,
                                                        dateCreation = DateTime.Now,
                                                        email = unidad.ResponsableCorreo,
                                                        isActive = true,
                                                        managerName = unidad.Responsable,
                                                        username = unidad.ResponsableMatricula
                                                    };
                                                    ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                }

                                                //Registrando flujo
                                                //var flujoActualSinAprobar = ctx.ApplicationFlow
                                                //    .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.Owner && x.AppId == entidad.AppId && x.ownerId == unidad.ResponsableMatricula);
                                                //if (flujoActualSinAprobar == null)
                                                //{
                                                //var sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0 and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.Owner);
                                                //ctx.Database.ExecuteSqlCommand(sql);

                                                //sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1  and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.Owner);
                                                //ctx.Database.ExecuteSqlCommand(sql);

                                                var nuevoFlujo = new ApplicationFlow()
                                                {
                                                    AppId = entidad.AppId,
                                                    createdBy = objeto.registerBy,
                                                    dateCreation = DateTime.Now,
                                                    FlowAppId = 0,
                                                    isCompleted = true,
                                                    isNotified = true,
                                                    ownerEmail = unidad.ResponsableCorreo,
                                                    ownerId = unidad.ResponsableMatricula,
                                                    typeFlow = (int)Flow.Modificacion,
                                                    typeRegister = (int)ApplicationManagerRole.Owner,
                                                    isActive = true,
                                                    isApproved = true,
                                                    isActiveOwner = true,
                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                };
                                                ctx.ApplicationFlow.Add(nuevoFlujo);
                                                //}
                                                //else
                                                //{
                                                //    //Validar si el flujo esta rechazado y es para el mismo Owner
                                                //    if (flujoActualSinAprobar.isApproved.HasValue)
                                                //    {
                                                //        var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                //        var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                //        if (activo && !aprobado)
                                                //        {
                                                //            flujoActualSinAprobar.isActive = false;

                                                //            var nuevoFlujo = new ApplicationFlow()
                                                //            {
                                                //                AppId = entidad.AppId,
                                                //                createdBy = objeto.registerBy,
                                                //                dateCreation = DateTime.Now,
                                                //                FlowAppId = 0,
                                                //                isCompleted = true,
                                                //                isNotified = true,
                                                //                ownerEmail = unidad.ResponsableCorreo,
                                                //                ownerId = unidad.ResponsableMatricula,
                                                //                typeFlow = (int)Flow.Modificacion,
                                                //                typeRegister = (int)ApplicationManagerRole.Owner,
                                                //                isActive = true,
                                                //                isApproved = true,
                                                //                isActiveOwner = true
                                                //            };
                                                //            ctx.ApplicationFlow.Add(nuevoFlujo);
                                                //        }
                                                //    }
                                                //}
                                            }
                                        }
                                    }

                                    //Validar si la aplicación es de tribu o si tiene jefe de equipo
                                    var esTribu = gestionadoPor.FlagEquipoAgil.HasValue ? gestionadoPor.FlagEquipoAgil.Value : false;
                                    var esUserIT = gestionadoPor.FlagUserIT.HasValue ? gestionadoPor.FlagUserIT.Value : false;
                                    flagUserIt = esUserIT;
                                    var tieneJefeEquipo = gestionadoPor.FlagJefeEquipo.HasValue ? gestionadoPor.FlagJefeEquipo.Value : false;

                                    if (!esTribu)
                                    {
                                        if (tieneJefeEquipo)
                                        {
                                            //Validar Jefe de Equipo
                                            if (objeto.teamId.HasValue)
                                            {
                                                if (objeto.teamId.Value > 0)
                                                {
                                                    var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                    if (equipo != null)
                                                    {
                                                        //Registrando rol
                                                        var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.JefeDeEquipo && x.isActive);
                                                        if (rol != null)
                                                        {
                                                            if (rol.username != equipo.ResponsableMatricula)
                                                            {
                                                                rol.isActive = false;
                                                                rol.dateModification = DateTime.Now;
                                                                rol.modifiedBy = objeto.registerBy;

                                                                var nuevoRol = new ApplicationManagerCatalog()
                                                                {
                                                                    applicationId = entidad.applicationId,
                                                                    applicationManagerCatalogId = 0,
                                                                    applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    email = equipo.ResponsableCorreo,
                                                                    isActive = true,
                                                                    managerName = equipo.Responsable,
                                                                    username = equipo.ResponsableMatricula
                                                                };
                                                                ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }

                                                        //Desactivar TL y TTL
                                                        var sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId in (1,7)", entidad.applicationId);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        //Registrando flujo
                                                        var flujoActualSinAprobar = ctx.ApplicationFlow
                                                            .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.JefeDeEquipo && x.AppId == entidad.AppId && x.ownerId == equipo.ResponsableMatricula);

                                                        if (flujoActualSinAprobar == null)
                                                        {
                                                            sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0  and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                            ctx.Database.ExecuteSqlCommand(sql);

                                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1  and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                            ctx.Database.ExecuteSqlCommand(sql);

                                                            sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}  and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                            ctx.Database.ExecuteSqlCommand(sql);

                                                            var nuevoFlujo = new ApplicationFlow()
                                                            {
                                                                AppId = entidad.AppId,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                FlowAppId = 0,
                                                                isCompleted = true,
                                                                isNotified = true,
                                                                ownerEmail = equipo.ResponsableCorreo,
                                                                ownerId = equipo.ResponsableMatricula,
                                                                typeFlow = (int)Flow.Modificacion,
                                                                typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                isActive = true,
                                                                isApproved = true,
                                                                RegistradoPor = objeto.NombreUsuarioModificacion
                                                            };
                                                            ctx.ApplicationFlow.Add(nuevoFlujo);

                                                        }
                                                        else
                                                        {
                                                            //Validar si el flujo esta rechazado y es para el mismo JdE
                                                            if (flujoActualSinAprobar.isApproved.HasValue)
                                                            {
                                                                var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                                var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                                if (activo && !aprobado)
                                                                {
                                                                    flujoActualSinAprobar.isActive = false;

                                                                    var nuevoFlujo = new ApplicationFlow()
                                                                    {
                                                                        AppId = entidad.AppId,
                                                                        createdBy = objeto.registerBy,
                                                                        dateCreation = DateTime.Now,
                                                                        FlowAppId = 0,
                                                                        isCompleted = true,
                                                                        isNotified = true,
                                                                        ownerEmail = equipo.ResponsableCorreo,
                                                                        ownerId = equipo.ResponsableMatricula,
                                                                        typeFlow = (int)Flow.Modificacion,
                                                                        typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                                                        isActive = true,
                                                                        isApproved = true,
                                                                        RegistradoPor = objeto.NombreUsuarioModificacion
                                                                    };
                                                                    ctx.ApplicationFlow.Add(nuevoFlujo);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    else
                                    {
                                        //Validar TTL
                                        if (objeto.teamId.HasValue)
                                        {
                                            if (objeto.teamId.Value > 0)
                                            {
                                                var equipo = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(objeto.teamId.Value);
                                                if (equipo != null)
                                                {
                                                    //Registrando rol
                                                    var rol = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TTL && x.isActive);
                                                    if (rol != null)
                                                    {
                                                        if (rol.username != equipo.ResponsableMatricula)
                                                        {
                                                            rol.isActive = false;
                                                            rol.dateModification = DateTime.Now;
                                                            rol.modifiedBy = objeto.registerBy;

                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = equipo.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = equipo.Responsable,
                                                                username = equipo.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        var nuevoRol = new ApplicationManagerCatalog()
                                                        {
                                                            applicationId = entidad.applicationId,
                                                            applicationManagerCatalogId = 0,
                                                            applicationManagerId = (int)ApplicationManagerRole.TTL,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            email = equipo.ResponsableCorreo,
                                                            isActive = true,
                                                            managerName = equipo.Responsable,
                                                            username = equipo.ResponsableMatricula
                                                        };
                                                        ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                    }

                                                    //Desactivar TL y TTL
                                                    var sql = string.Format("update app.ApplicationManagerCatalog set isActive='0' where applicationId='{0}' and applicationManagerId in (2)", entidad.applicationId);
                                                    ctx.Database.ExecuteSqlCommand(sql);

                                                    //Registrando flujo
                                                    var flujoActualSinAprobar = ctx.ApplicationFlow
                                                        .FirstOrDefault(x => x.typeRegister == (int)ApplicationManagerRole.TTL && x.AppId == entidad.AppId && x.ownerId == equipo.ResponsableMatricula);
                                                    if (flujoActualSinAprobar == null)
                                                    {
                                                        sql = string.Format("update app.ApplicationFlow set isCompleted=1, dateTransfer=getdate(), transferedBy='auto', isActive='0' where AppId={0} and typeRegister={1} and isCompleted=0  and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1} and isCompleted=1  and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.TTL);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        sql = string.Format("update app.ApplicationFlow set isActive='0' where AppId={0} and typeRegister={1}  and typeFlow=2", entidad.AppId, (int)ApplicationManagerRole.JefeDeEquipo);
                                                        ctx.Database.ExecuteSqlCommand(sql);

                                                        var nuevoFlujo = new ApplicationFlow()
                                                        {
                                                            AppId = entidad.AppId,
                                                            createdBy = objeto.registerBy,
                                                            dateCreation = DateTime.Now,
                                                            FlowAppId = 0,
                                                            isCompleted = true,
                                                            isNotified = true,
                                                            ownerEmail = equipo.ResponsableCorreo,
                                                            ownerId = equipo.ResponsableMatricula,
                                                            typeFlow = (int)Flow.Modificacion,
                                                            typeRegister = (int)ApplicationManagerRole.TTL,
                                                            isActive = true,
                                                            isApproved = true,
                                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                                        };
                                                        ctx.ApplicationFlow.Add(nuevoFlujo);
                                                    }
                                                    else
                                                    {
                                                        //Validar si el flujo esta rechazado y es para el mismo JdE
                                                        if (flujoActualSinAprobar.isApproved.HasValue)
                                                        {
                                                            var aprobado = flujoActualSinAprobar.isApproved.HasValue ? flujoActualSinAprobar.isApproved.Value : false;
                                                            var activo = flujoActualSinAprobar.isActive.HasValue ? flujoActualSinAprobar.isActive.Value : false;
                                                            if (activo && !aprobado)
                                                            {
                                                                flujoActualSinAprobar.isActive = false;

                                                                var nuevoFlujo = new ApplicationFlow()
                                                                {
                                                                    AppId = entidad.AppId,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    FlowAppId = 0,
                                                                    isCompleted = true,
                                                                    isNotified = true,
                                                                    ownerEmail = equipo.ResponsableCorreo,
                                                                    ownerId = equipo.ResponsableMatricula,
                                                                    typeFlow = (int)Flow.Modificacion,
                                                                    typeRegister = (int)ApplicationManagerRole.TTL,
                                                                    isActive = true,
                                                                    isApproved = true,
                                                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                                                };
                                                                ctx.ApplicationFlow.Add(nuevoFlujo);
                                                            }
                                                        }
                                                    }

                                                    //Registrando TL
                                                    var tlTeam = ctx.TribeLeader.FirstOrDefault(x => x.EquipoId == objeto.teamId.Value);
                                                    if (tlTeam != null)
                                                    {
                                                        var rolTL = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.TL && x.isActive);
                                                        if (rolTL != null)
                                                        {
                                                            if (rolTL.username != tlTeam.ResponsableMatricula)
                                                            {
                                                                rolTL.isActive = false;
                                                                rolTL.dateModification = DateTime.Now;
                                                                rolTL.modifiedBy = objeto.registerBy;

                                                                var nuevoRol = new ApplicationManagerCatalog()
                                                                {
                                                                    applicationId = entidad.applicationId,
                                                                    applicationManagerCatalogId = 0,
                                                                    applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                    createdBy = objeto.registerBy,
                                                                    dateCreation = DateTime.Now,
                                                                    email = tlTeam.ResponsableCorreo,
                                                                    isActive = true,
                                                                    managerName = tlTeam.Responsable,
                                                                    username = tlTeam.ResponsableMatricula
                                                                };
                                                                ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            var nuevoRol = new ApplicationManagerCatalog()
                                                            {
                                                                applicationId = entidad.applicationId,
                                                                applicationManagerCatalogId = 0,
                                                                applicationManagerId = (int)ApplicationManagerRole.TL,
                                                                createdBy = objeto.registerBy,
                                                                dateCreation = DateTime.Now,
                                                                email = tlTeam.ResponsableCorreo,
                                                                isActive = true,
                                                                managerName = tlTeam.Responsable,
                                                                username = tlTeam.ResponsableMatricula
                                                            };
                                                            ctx.ApplicationManagerCatalog.Add(nuevoRol);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                var ownersActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && (x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador || x.applicationManagerId == (int)ApplicationManagerRole.Experto) && x.isActive).ToList();

                                var expertosActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Experto && x.isActive).Select(x => x.username).ToList();


                                var autorizadoresActuales = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador && x.isActive).Select(x => x.username).ToList();

                                var expertosLista = objeto.NuevosRolesList.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.Experto).ToList();

                                var autorizadorLista = objeto.NuevosRolesList.Where(x => x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador).ToList();


                                if (expertosActuales.Count() != expertosLista.Count())
                                {
                                    modificacionExperto2 = true;
                                    modificacionExperto = true;
                                }
                                if (autorizadoresActuales.Count() != autorizadorLista.Count())
                                {
                                    modificacionAutorizador = true;
                                    modificacionExperto = true;
                                }
                                foreach (ApplicationManagerCatalogDto owner in objeto.NuevosExpertosList)
                                {
                                    if (!expertosActuales.Any(x => x == owner.username))
                                    {
                                        modificacionExperto = true;
                                        modificacionExperto2 = true;
                                    }
                                    //filas = filas + string.Format(formato, owner.applicationManagerId == (int)ApplicationManagerRole.Experto ? "Experto/Líder técnico" : "Usuario Autorizador", string.Empty, owner.managerName);
                                }
                                foreach (ApplicationManagerCatalogDto owner in objeto.NuevosAutorizadoresList)
                                {
                                    if (!autorizadoresActuales.Any(x => x == owner.username))
                                    {
                                        modificacionExperto = true;
                                        modificacionAutorizador = true;
                                    }
                                    //filas = filas + string.Format(formato, owner.applicationManagerId == (int)ApplicationManagerRole.Experto ? "Experto/Líder técnico" : "Usuario Autorizador", string.Empty, owner.managerName);
                                }


                                foreach (ApplicationManagerCatalog a in ownersActuales)
                                {
                                    ctx.ApplicationManagerCatalog.Remove(a);
                                }


                                //foreach (ApplicationManagerCatalogDto owner in objeto.NuevosRolesList)
                                //    {
                                //        //Validar experto
                                //        if (!string.IsNullOrEmpty(owner.email)
                                //        && !string.IsNullOrEmpty(owner.username)
                                //        && !string.IsNullOrEmpty(owner.managerName))
                                //        {
                                //            //Registrando rol
                                //            var nuevoRol = new ApplicationManagerCatalog()
                                //            {
                                //                applicationId = entidad.applicationId,
                                //                applicationManagerCatalogId = 0,
                                //                applicationManagerId = owner.applicationManagerId,
                                //                createdBy = objeto.registerBy,
                                //                dateCreation = DateTime.Now,
                                //                email = owner.email,
                                //                isActive = true,
                                //                managerName = owner.managerName,
                                //                username = owner.username
                                //            };
                                //            ctx.ApplicationManagerCatalog.Add(nuevoRol);

                                //        }
                                //    //    if(modificacionExperto)
                                //    //filas = filas + string.Format(formato, owner.applicationManagerId== (int)ApplicationManagerRole.Experto ? "Experto/Líder técnico": "Usuario Autorizador", string.Empty, owner.managerName);

                                //}
                            }



                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);

                                if (enviarNotificacionCriticidad)
                                {
                                    diccionario.Add("[Criticidad]", Utilitarios.GetEnumDescription2((CriticidadFinal)objeto.finalCriticality.Value));
                                    diccionario.Add("[CriticidadBIA]", Utilitarios.GetEnumDescription2((BIA)objeto.applicationCriticalityBIA.Value));
                                    diccionario.Add("[Clasificacion]", Utilitarios.GetEnumDescription2((ClasificacionActivos)objeto.classification.Value));

                                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M3CriticidadFinal, entidad.applicationId, diccionario);
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }

                            ID = entidad.AppId;
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        //if (estadoInicial == (int)ApplicationState.NoVigente)
                        //{
                        //    if (objeto.status != (int)ApplicationState.Eliminada)
                        //        ReiniciarRegistroAplicacion(entidad.AppId, objeto.registerBy);
                        //}


                        var notificacionActualizacion = false;
                        //Agregar registro en bitácora
                        try
                        {
                            ctx.SaveChanges();


                            var BitacoraMensaje = "";

                            //Solo para el arquitecto evaluador
                            if (!entidadInicial.architectId.HasValue)
                                entidadInicial.architectId = 0;

                            if (objeto.managed != entidadInicial.managed || objeto.applicationName.Trim().ToUpper() != entidadInicial.applicationName.Trim().ToUpper() 
                                || objeto.implementationType != entidadInicial.implementationType || objeto.description.Trim().ToUpper() != entidadInicial.description.Trim().ToUpper() 
                                || objeto.deploymentType != entidadInicial.deploymentType || objeto.parentAPTCode != entidadInicial.parentAPTCode 
                                || objeto.hasInterfaceId != entidadInicial.hasInterfaceId || objeto.interfaceId != entidadInicial.interfaceId 
                                || objeto.unit != entidadInicial.unit || objeto.teamId != entidadInicial.teamId 
                                || objeto.userEntity != entidadInicial.userEntity || objeto.developmentProvider != entidadInicial.developmentProvider 
                                || objeto.developmentType != entidadInicial.developmentType || objeto.infrastructure != entidadInicial.infrastructure 
                                || objeto.replacementApplication != entidadInicial.replacementApplication || objeto.authorizationMethod != entidadInicial.authorizationMethod 
                                || objeto.authenticationMethod != entidadInicial.authenticationMethod || objeto.architectId != entidadInicial.architectId 
                                || objeto.groupTicketRemedy != entidadInicial.groupTicketRemedy || objeto.webDomain.Trim().ToUpper() != entidadInicial.webDomain.Trim().ToUpper() 
                                || objeto.classification != entidadInicial.classification || objeto.applicationCriticalityBIA != entidadInicial.applicationCriticalityBIA 
                                || objeto.assetType != entidadInicial.assetType || objeto.BIANdomain != entidadInicial.BIANdomain 
                                || objeto.tobe != entidadInicial.tobe || objeto.technologyCategory != entidadInicial.technologyCategory 
                                || objeto.technicalClassification != entidadInicial.technicalClassification || objeto.technicalSubclassification != entidadInicial.technicalSubclassification 
                                || objeto.tierProduction != entidadInicial.tierProduction || objeto.tierPreProduction != entidadInicial.tierPreProduction 
                                || (objeto.summaryStandard.Trim().ToUpper() != entidadInicial.summaryStandard.Trim().ToUpper() && flagUserIt) 
                                || (objeto.complianceLevel != entidadInicial.complianceLevel && flagUserIt) || objeto.status != entidadInicial.status 
                                || objeto.starProduct != entidadInicial.starProduct || objeto.shorterApplicationResponseTime != entidadInicial.shorterApplicationResponseTime 
                                || objeto.highestDegreeInterruption != entidadInicial.highestDegreeInterruption || objeto.dateFirstRelease != entidadInicial.dateFirstRelease 
                                || modificacionAutorizador || modificacionExperto2  || nuevosPCI
                                //|| modificacionExperto
                                )
                            {
                                var dateAndTime = DateTime.Now;
                                string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                var hour = dateAndTime.ToString("HH:mm:ss");
                                BitacoraMensaje = "El administrador del portafolio " + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " +
                                    " modificó los datos de la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con los siguientes campos:";
                                if (objeto.managed != entidadInicial.managed && objeto.status!= (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Gestionado por de: " + getManagedName(entidadInicial.managed) + " a: " + getManagedName(objeto.managed) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Gestionado por", getManagedName(entidadInicial.managed), getManagedName(objeto.managed));
                                }

                                if (objeto.applicationName.Trim().ToUpper() != entidadInicial.applicationName.Trim().ToUpper() && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Nombre de la aplicación de: " + (entidadInicial.applicationName == "" ? "Ningún valor" : entidadInicial.applicationName) + " a: " + (objeto.applicationName == "" ? "Ningún valor" : objeto.applicationName) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Nombre de la aplicación", (entidadInicial.applicationName == "" ? "Ningún valor" : entidadInicial.applicationName), (objeto.applicationName == "" ? "Ningún valor" : objeto.applicationName));
                                }

                                if (objeto.implementationType != entidadInicial.implementationType && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Tipo de implementación de: " + getParametricaDetalleName(entidadInicial.implementationType) + " a: " + getParametricaDetalleName(objeto.implementationType) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Tipo de implementación", getParametricaDetalleName(entidadInicial.implementationType), getParametricaDetalleName(objeto.implementationType));
                                }

                                if (objeto.description.Trim().ToUpper() != entidadInicial.description.Trim().ToUpper() && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Descripción de: " + (entidadInicial.description == "" ? "Ningún valor" : entidadInicial.description) + " a: " + (objeto.description == "" ? "Ningún valor" : objeto.description) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Descripción", (entidadInicial.description == "" ? "Ningún valor" : entidadInicial.description), (objeto.description == "" ? "Ningún valor" : objeto.description));
                                }

                                if (objeto.deploymentType != entidadInicial.deploymentType && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Modelo de entrega de: " + getDeploymentTypeName(entidadInicial.deploymentType) + " a: " + getDeploymentTypeName(objeto.deploymentType) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Modelo de entrega", getDeploymentTypeName(entidadInicial.deploymentType), getDeploymentTypeName(objeto.deploymentType));
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.parentAPTCode) || !string.IsNullOrWhiteSpace(entidadInicial.parentAPTCode) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.parentAPTCode == null)                                    
                                        entidadInicial.parentAPTCode = string.Empty;                                    

                                    if (objeto.parentAPTCode.Trim().ToUpper() != entidadInicial.parentAPTCode.Trim().ToUpper())
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Código de aplicación padre de: " + (string.IsNullOrWhiteSpace(entidadInicial.parentAPTCode) ? "Ningún valor" : entidadInicial.parentAPTCode) + " a: " + (objeto.parentAPTCode == "" ? "Ningún valor" : objeto.parentAPTCode) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "Código de aplicación padre", (string.IsNullOrWhiteSpace(entidadInicial.parentAPTCode) ? "Ningún valor" : entidadInicial.parentAPTCode), (objeto.parentAPTCode == "" ? "Ningún valor" : objeto.parentAPTCode));
                                    }
                                }                                    

                                if (!string.IsNullOrWhiteSpace(objeto.interfaceId) || !string.IsNullOrWhiteSpace(entidadInicial.interfaceId) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.interfaceId == null)
                                        entidadInicial.interfaceId = string.Empty;

                                    if (objeto.interfaceId.Trim().ToUpper() != entidadInicial.interfaceId.Trim().ToUpper())
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Código de interfaz de: " + (string.IsNullOrWhiteSpace(entidadInicial.interfaceId) ? "Ningún valor" : entidadInicial.interfaceId) + " a: " + (objeto.interfaceId == "" ? "Ningún valor" : objeto.interfaceId) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "Código de interfaz", (string.IsNullOrWhiteSpace(entidadInicial.interfaceId) ? "Ningún valor" : entidadInicial.interfaceId), (objeto.interfaceId == "" ? "Ningún valor" : objeto.interfaceId));
                                    }
                                }


                                if (objeto.unit != entidadInicial.unit && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Unidad dueña de la aplicación de: " + getUnitName(entidadInicial.unit) + " a: " + getUnitName(objeto.unit) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Unidad dueña de la aplicación", getUnitName(entidadInicial.unit), getUnitName(objeto.unit));
                                }

                                if (objeto.teamId != entidadInicial.teamId && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Equipo/Squad de: " + getTeamName(entidadInicial.teamId) + " a: " + getTeamName(objeto.teamId) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Equipo/Squad", getTeamName(entidadInicial.teamId), getTeamName(objeto.teamId));
                                }

                                string[] entidadesIniciales = entidadInicial.userEntity.Split(new string[] { "," }, StringSplitOptions.None);
                                string[] entidadesFinales = objeto.userEntity.Split(new string[] { "," }, StringSplitOptions.None);

                                var entidadesInicialesLista = string.Empty;
                                var entidadesFinalesLista = string.Empty;
                                if (objeto.userEntity != entidadInicial.userEntity && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Entidad Usuaria de: ";
                                    notificacionActualizacion = true;

                                    foreach (string a in entidadesIniciales)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + getUserEntityName(a) + ", ";
                                        entidadesInicialesLista = entidadesInicialesLista + getUserEntityName(a) + ", ";
                                    }
                                    BitacoraMensaje = BitacoraMensaje + " a: ";

                                    foreach (string b in entidadesFinales)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + getUserEntityName(b) + ", ";
                                        entidadesFinalesLista = entidadesFinalesLista + getUserEntityName(b) + ", ";
                                    }
                                    filas = filas + string.Format(formato, "Entidad Usuaria", entidadesInicialesLista, entidadesFinalesLista);
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.developmentProvider) || !string.IsNullOrWhiteSpace(entidadInicial.developmentProvider) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.developmentProvider == null)
                                        entidadInicial.developmentProvider = string.Empty;

                                    if (objeto.developmentProvider.Trim().ToUpper() != entidadInicial.developmentProvider.Trim().ToUpper())
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Proveedor de desarrollo de: " + (string.IsNullOrWhiteSpace(entidadInicial.developmentProvider) ? "Ningún valor" : entidadInicial.developmentProvider) + " a: " + (objeto.developmentProvider == "" ? "Ningún valor" : objeto.developmentProvider) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "Proveedor de desarrollo", (string.IsNullOrWhiteSpace(entidadInicial.developmentProvider) ? "Ningún valor" : entidadInicial.developmentProvider), (objeto.developmentProvider == "" ? "Ningún valor" : objeto.developmentProvider));
                                    }
                                }
                                    
                                if (objeto.developmentType != entidadInicial.developmentType && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Tipo de desarrollo de: " + getDevelopmentTypeName(entidadInicial.developmentType) + " a: " + getDevelopmentTypeName(objeto.developmentType) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Tipo de desarrollo", getDevelopmentTypeName(entidadInicial.developmentType), getDevelopmentTypeName(objeto.developmentType));
                                }

                                if (objeto.infrastructure != entidadInicial.infrastructure && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Infraestructura de: " + getInfraestructureName(entidadInicial.infrastructure) + " a: " + getInfraestructureName(objeto.infrastructure) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Infraestructura", getInfraestructureName(entidadInicial.infrastructure), getInfraestructureName(objeto.infrastructure));
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.replacementApplication) || !string.IsNullOrWhiteSpace(entidadInicial.replacementApplication) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.replacementApplication == null)
                                        entidadInicial.replacementApplication = string.Empty;

                                    if (objeto.replacementApplication.Trim().ToUpper() != entidadInicial.replacementApplication.Trim().ToUpper())
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Aplicación reemplazada de: " + (string.IsNullOrWhiteSpace(entidadInicial.replacementApplication) ? "Ningún valor" : entidadInicial.replacementApplication) + " a: " + (objeto.replacementApplication == "" ? "Ningún valor" : objeto.replacementApplication) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "Aplicación reemplazada", (string.IsNullOrWhiteSpace(entidadInicial.replacementApplication) ? "Ningún valor" : entidadInicial.replacementApplication), (objeto.replacementApplication == "" ? "Ningún valor" : objeto.replacementApplication));
                                    }
                                }
                                    

                                if (objeto.authorizationMethod != entidadInicial.authorizationMethod && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Método de autorización de: " + getParametricaDetalleName(entidadInicial.authorizationMethod) + " a: " + getParametricaDetalleName(objeto.authorizationMethod) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Método de autorización", getParametricaDetalleName(entidadInicial.authorizationMethod), getParametricaDetalleName(objeto.authorizationMethod));
                                }

                                if (objeto.authenticationMethod != entidadInicial.authenticationMethod && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Método de Autenticación de: " + getParametricaDetalleName(entidadInicial.authenticationMethod) + " a: " + getParametricaDetalleName(objeto.authenticationMethod) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Método de Autenticación", getParametricaDetalleName(entidadInicial.authenticationMethod), getParametricaDetalleName(objeto.authenticationMethod));
                                }

                                if (objeto.architectId != entidadInicial.architectId && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Arquitecto evaluador de: " + getArchitectName(entidadInicial.architectId) + " a: " + getArchitectName(objeto.architectId) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Arquitecto evaluador", getArchitectName(entidadInicial.architectId), getArchitectName(objeto.architectId));
                                }

                                if (objeto.groupTicketRemedy != entidadInicial.groupTicketRemedy && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Grupo Ticket Remedy de: " + getGroupRemedyName(entidadInicial.groupTicketRemedy) + " a: " + getGroupRemedyName(objeto.groupTicketRemedy) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Grupo Ticket Remedy", getGroupRemedyName(entidadInicial.groupTicketRemedy), getGroupRemedyName(objeto.groupTicketRemedy));
                                }

                                if (objeto.classification != entidadInicial.classification && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Clasificación de activo: " + getClassificationName(entidadInicial.classification) + " a: " + getClassificationName(objeto.classification) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Clasificación de activo", getClassificationName(entidadInicial.classification), getClassificationName(objeto.classification));
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.webDomain) || !string.IsNullOrWhiteSpace(entidadInicial.webDomain) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.webDomain == null)
                                        entidadInicial.webDomain = string.Empty;

                                    if (objeto.webDomain.Trim().ToUpper() != entidadInicial.webDomain.Trim().ToUpper())
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - URL Dominio Web de: " + (string.IsNullOrWhiteSpace(entidadInicial.webDomain) ? "Ningún valor" : entidadInicial.webDomain) + " a: " + (objeto.webDomain == "" ? "Ningún valor" : objeto.webDomain) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "URL Dominio Web", (string.IsNullOrWhiteSpace(entidadInicial.webDomain) ? "Ningún valor" : entidadInicial.webDomain), (objeto.webDomain == "" ? "Ningún valor" : objeto.webDomain));
                                    }
                                }
                                   
                                if (objeto.applicationCriticalityBIA != entidadInicial.applicationCriticalityBIA && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Criticidad según BIA de: " + getBIACriticalityName(entidadInicial.applicationCriticalityBIA) + " a: " + getBIACriticalityName(objeto.applicationCriticalityBIA) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Criticidad según BIA", getBIACriticalityName(entidadInicial.applicationCriticalityBIA), getBIACriticalityName(objeto.applicationCriticalityBIA));
                                }

                                if (objeto.finalCriticality != entidadInicial.finalCriticality && entidadInicial.finalCriticality != null && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Criticidad Final de: " + getFinalCriticalityName(entidadInicial.finalCriticality) + " a: " + getFinalCriticalityName(objeto.finalCriticality) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Criticidad Final", getFinalCriticalityName(entidadInicial.finalCriticality), getFinalCriticalityName(objeto.finalCriticality));
                                }

                                if (objeto.assetType != entidadInicial.assetType && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Tipo de activo de: " + getAssetTypeName(entidadInicial.assetType) + " a: " + getAssetTypeName(objeto.assetType) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Tipo de activo", getAssetTypeName(entidadInicial.assetType), getAssetTypeName(objeto.assetType));
                                }

                                if (objeto.BIANdomain != entidadInicial.BIANdomain && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Dominio BIAN de: " + getBIANDomainName(entidadInicial.BIANdomain) + " a: " + getBIANDomainName(objeto.BIANdomain) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Dominio BIAN", getBIANDomainName(entidadInicial.BIANdomain), getBIANDomainName(objeto.BIANdomain));
                                }

                                if (areaBIANIdInicial != areaBIANIdFinal && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Área BIAN de: " + getBIANAreaName(areaBIANIdInicial) + " a: " + getBIANAreaName(areaBIANIdFinal) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Área BIAN", getBIANAreaName(areaBIANIdInicial), getBIANAreaName(areaBIANIdFinal));
                                }

                                if (objeto.tobe != entidadInicial.tobe && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - TOBE de: " + getTOBEName(entidadInicial.tobe) + " a: " + getTOBEName(objeto.tobe) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "TOBE", getTOBEName(entidadInicial.tobe), getTOBEName(objeto.tobe));
                                }

                                if (objeto.technologyCategory != entidadInicial.technologyCategory && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Categoría Tecnológica de: " + getTechnologyCategoryName(entidadInicial.technologyCategory) + " a: " + getTechnologyCategoryName(objeto.technologyCategory) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Categoría Tecnológica", getTechnologyCategoryName(entidadInicial.technologyCategory), getTechnologyCategoryName(objeto.technologyCategory));
                                }

                                if (objeto.technicalClassification != entidadInicial.technicalClassification && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Clasificación Técnica de: " + getTechnicalClassificationName(entidadInicial.technicalClassification) + " a: " + getTechnicalClassificationName(objeto.technicalClassification) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Clasificación Técnica", getTechnicalClassificationName(entidadInicial.technicalClassification), getTechnicalClassificationName(objeto.technicalClassification));
                                }

                                if (objeto.technicalSubclassification != entidadInicial.technicalSubclassification && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Sub Clasificación Técnica de: " + getSubTechnicalClassificationName(entidadInicial.technicalSubclassification) + " a: " + getSubTechnicalClassificationName(objeto.technicalSubclassification) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Sub Clasificación Técnica", getSubTechnicalClassificationName(entidadInicial.technicalSubclassification), getSubTechnicalClassificationName(objeto.technicalSubclassification));
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.tierProduction) || !string.IsNullOrWhiteSpace(entidadInicial.tierProduction) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.tierProduction == null)
                                        entidadInicial.tierProduction = string.Empty;

                                    if (objeto.tierProduction != entidadInicial.tierProduction)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - TIER Producción de: " + (string.IsNullOrWhiteSpace(entidadInicial.tierProduction) ? "Ningún valor" : entidadInicial.tierProduction) + " a: " + (objeto.tierProduction == "" ? "Ningún valor" : objeto.tierProduction) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "TIER Producción", (string.IsNullOrWhiteSpace(entidadInicial.tierProduction) ? "Ningún valor" : entidadInicial.tierProduction), (objeto.tierProduction == "" ? "Ningún valor" : objeto.tierProduction));
                                    }
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.tierPreProduction) || !string.IsNullOrWhiteSpace(entidadInicial.tierPreProduction) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.tierPreProduction == null)
                                        entidadInicial.tierPreProduction = string.Empty;

                                    if (objeto.tierPreProduction != entidadInicial.tierPreProduction)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - TIER Pre Producción de: " + (string.IsNullOrWhiteSpace(entidadInicial.tierPreProduction) ? "Ningún valor" : entidadInicial.tierPreProduction) + " a: " + (objeto.tierPreProduction == "" ? "Ningún valor" : objeto.tierPreProduction) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "TIER Pre Producción", (string.IsNullOrWhiteSpace(entidadInicial.tierPreProduction) ? "Ningún valor" : entidadInicial.tierPreProduction), (objeto.tierPreProduction == "" ? "Ningún valor" : objeto.tierPreProduction));
                                    }
                                }

                                if (flagUserIt)
                                {
                                    if (!string.IsNullOrWhiteSpace(objeto.summaryStandard) || !string.IsNullOrWhiteSpace(entidadInicial.summaryStandard) && objeto.status != (int)ApplicationState.Eliminada)
                                    {
                                        if (entidadInicial.summaryStandard == null)
                                            entidadInicial.summaryStandard = string.Empty;

                                        if (objeto.summaryStandard.Trim().ToUpper() != entidadInicial.summaryStandard.Trim().ToUpper())
                                        {
                                            BitacoraMensaje = BitacoraMensaje + " - Resumen de lineamientos de seguridad de: " + (string.IsNullOrWhiteSpace(entidadInicial.summaryStandard) ? "Ningún valor" : entidadInicial.summaryStandard) + " a: " + (objeto.summaryStandard == "" ? "Ningún valor" : objeto.summaryStandard) + "  ";
                                            notificacionActualizacion = true;
                                            filas = filas + string.Format(formato, "Resumen de lineamientos de seguridad", (string.IsNullOrWhiteSpace(entidadInicial.summaryStandard) ? "Ningún valor" : entidadInicial.summaryStandard), (objeto.summaryStandard == "" ? "Ningún valor" : objeto.summaryStandard));
                                        }
                                    }

                                    if (objeto.complianceLevel != entidadInicial.complianceLevel && objeto.status != (int)ApplicationState.Eliminada)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Nivel de Cumplimiento de Seguridad de: " + (Convert.ToString(entidadInicial.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(entidadInicial.complianceLevel)) + " a: " + (Convert.ToString(objeto.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(objeto.complianceLevel)) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "Nivel de Cumplimiento de Seguridad", (Convert.ToString(entidadInicial.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(entidadInicial.complianceLevel)), (Convert.ToString(objeto.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(objeto.complianceLevel)));
                                    }
                                }

                                if (objeto.status != entidadInicial.status)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Estado de la aplicación de: " + getStatusName(entidadInicial.status) + " a: " + getStatusName(objeto.status) + "  ";
                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, " Estado de la aplicación", getStatusName(entidadInicial.status), getStatusName(objeto.status));
                                }

                                if (objeto.dateFirstRelease != entidadInicial.dateFirstRelease && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - Fecha de primer pase: "
                                        + (entidadInicial.dateFirstRelease.HasValue ? entidadInicial.dateFirstRelease.Value.ToString("dd/MM/yyyy") : "Ningún valor")
                                        + " a: " + (objeto.dateFirstRelease.HasValue ? objeto.dateFirstRelease.Value.ToString("dd/MM/yyyy") : "Ningún valor") + "  ";

                                    notificacionActualizacion = true;
                                    filas = filas + string.Format(formato, "Fecha de primer pase", (entidadInicial.dateFirstRelease.HasValue ? entidadInicial.dateFirstRelease.Value.ToString("dd/MM/yyyy") : "Ningún valor")
                                        , (objeto.dateFirstRelease.HasValue ? objeto.dateFirstRelease.Value.ToString("dd/MM/yyyy") : "Ningún valor"));
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.starProduct) || !string.IsNullOrWhiteSpace(entidadInicial.starProduct) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.starProduct == null)
                                        entidadInicial.starProduct = string.Empty;

                                    if (objeto.starProduct != entidadInicial.starProduct && objeto.status != (int)ApplicationState.Eliminada)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Producto/Servicio más representativo de: " + (string.IsNullOrWhiteSpace(entidadInicial.starProduct) ? "Ningún valor" : entidadInicial.starProduct) + " a: " + (objeto.starProduct == "" ? "Ningún valor" : objeto.starProduct) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, "Producto/Servicio más representativo", (string.IsNullOrWhiteSpace(entidadInicial.starProduct) ? "Ningún valor" : entidadInicial.starProduct)
                                            , (objeto.starProduct == "" ? "Ningún valor" : objeto.starProduct));
                                    }
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.shorterApplicationResponseTime) || !string.IsNullOrWhiteSpace(entidadInicial.shorterApplicationResponseTime) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.shorterApplicationResponseTime == null)
                                        entidadInicial.shorterApplicationResponseTime = string.Empty;

                                    if (objeto.shorterApplicationResponseTime != entidadInicial.shorterApplicationResponseTime)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Menor RTO de los productos soportados de: " + (string.IsNullOrWhiteSpace(entidadInicial.shorterApplicationResponseTime) ? "Ningún valor" : entidadInicial.shorterApplicationResponseTime) + " a: " + (objeto.shorterApplicationResponseTime == "" ? "Ningún valor" : objeto.shorterApplicationResponseTime) + "  ";

                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, " Menor RTO de los productos soportados"
                                            , (string.IsNullOrWhiteSpace(entidadInicial.shorterApplicationResponseTime) ? "Ningún valor" : entidadInicial.shorterApplicationResponseTime)
                                            , (objeto.shorterApplicationResponseTime == "" ? "Ningún valor" : objeto.shorterApplicationResponseTime));
                                    }
                                }

                                if (!string.IsNullOrWhiteSpace(objeto.highestDegreeInterruption) || !string.IsNullOrWhiteSpace(entidadInicial.shorterApplicationResponseTime) && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    if (entidadInicial.highestDegreeInterruption == null)
                                        entidadInicial.highestDegreeInterruption = string.Empty;

                                    if (objeto.highestDegreeInterruption != entidadInicial.highestDegreeInterruption)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " - Mayor grado de interrupción de: " + (string.IsNullOrWhiteSpace(entidadInicial.shorterApplicationResponseTime) ? "Ningún valor" : entidadInicial.highestDegreeInterruption) + " a: " + (objeto.highestDegreeInterruption == "" ? "Ningún valor" : objeto.highestDegreeInterruption) + "  ";
                                        notificacionActualizacion = true;
                                        filas = filas + string.Format(formato, " Mayor grado de interrupción"
                                            , (string.IsNullOrWhiteSpace(entidadInicial.shorterApplicationResponseTime) ? "Ningún valor" : entidadInicial.highestDegreeInterruption)
                                            , (objeto.highestDegreeInterruption == "" ? "Ningún valor" : objeto.highestDegreeInterruption));
                                    }
                                }

                                var relacionUsuariosNuevos = string.Empty;
                                var relacionUsuariosAntiguos = string.Empty;

                                if (objeto.NuevosExpertosList != null && modificacionExperto2 && objeto.status != (int)ApplicationState.Eliminada)
                                {                                                                      
                                    BitacoraMensaje = BitacoraMensaje + "-Expertos de : ";
                                    foreach (string a in listaExpertosAntiguos)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " " + a + ", ";
                                        relacionUsuariosAntiguos = relacionUsuariosAntiguos + a + "<br/>";
                                    }

                                    BitacoraMensaje = BitacoraMensaje + " a : ";

                                    var listaExpertosNuevos = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.Experto)).Select(x => x.managerName).ToList();

                                    //foreach (ApplicationManagerCatalogDto owner in objeto.NuevosExpertosList)
                                    //{
                                    //    //Validar experto
                                    //    if (!string.IsNullOrEmpty(owner.email)
                                    //    && !string.IsNullOrEmpty(owner.username)
                                    //    && !string.IsNullOrEmpty(owner.managerName))
                                    //    {
                                    //        BitacoraMensaje = BitacoraMensaje + " " + owner.managerName + ", ";
                                    //    }
                                    //}
                                    foreach (string a in listaExpertosNuevos)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " " + a + ", ";
                                        relacionUsuariosNuevos = relacionUsuariosNuevos + a + "<br/>";
                                    }

                                    filas = filas + string.Format(formato, "Experto/Líder técnico", relacionUsuariosAntiguos, relacionUsuariosNuevos);
                                }

                                relacionUsuariosAntiguos = string.Empty;
                                relacionUsuariosNuevos = string.Empty;

                                if (objeto.NuevosAutorizadoresList != null && modificacionAutorizador && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + "-Usuarios Autorizadores de : ";

                                    foreach (string a in listaAutorizadoresAntiguos)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " " + a + ", ";
                                        relacionUsuariosAntiguos = relacionUsuariosAntiguos + a + "<br/>";
                                    }

                                    BitacoraMensaje = BitacoraMensaje + " a : ";
                                    var listaAutorizadoresNuevos = ctx.ApplicationManagerCatalog.Where(x => x.applicationId == entidad.applicationId && x.isActive == true && (x.applicationManagerId == (int)ApplicationManagerRole.UsuarioAutorizador)).Select(x => x.managerName).ToList();
                                    //foreach (ApplicationManagerCatalogDto owner in objeto.NuevosAutorizadoresList)
                                    //{
                                    //    //Validar experto
                                    //    if (!string.IsNullOrEmpty(owner.email)
                                    //    && !string.IsNullOrEmpty(owner.username)
                                    //    && !string.IsNullOrEmpty(owner.managerName))
                                    //    {
                                    //        BitacoraMensaje = BitacoraMensaje + ", ";
                                    //    }
                                    //}
                                    foreach (string a in listaAutorizadoresNuevos)
                                    {
                                        BitacoraMensaje = BitacoraMensaje + " " + a + ", ";
                                        relacionUsuariosNuevos = relacionUsuariosNuevos + a + "<br/>";
                                    }

                                    filas = filas + string.Format(formato, "Usuario Autorizador", relacionUsuariosAntiguos, relacionUsuariosNuevos);
                                }
                                if (nuevosPCI && objeto.status != (int)ApplicationState.Eliminada)
                                {
                                    BitacoraMensaje = BitacoraMensaje + " - PCI DSS de: " + pciIniciales + "a:  ";

                                    foreach (int a in objeto.TipoPCI)
                                    {

                                        BitacoraMensaje = BitacoraMensaje + "" + getPCIName(a) + ",  ";
                                        filas = filas + string.Format(formato, "PCI DSS", string.Empty, getPCIName(a));

                                    }
                                 
                                }


                                BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + objeto.motivoActualizacion;

                                //if (modificacionExperto)
                                //    BitacoraMensaje = BitacoraMensaje + bitacoraExperto;

                                BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                                var registroBitacora = new BitacoraAcciones()
                                {
                                    CodigoAPT = entidad.applicationId,
                                    DetalleBitacora = BitacoraMensaje,
                                    CreadoPor = objeto.registerBy,
                                    FechaCreacion = dateAndTime,
                                    NombreUsuarioCreacion = objeto.NombreUsuarioModificacion,
                                    Archivo=objeto.archivoMotivo,
                                    NombreArchivo = objeto.archivoMotivoNombre
                                };

                                ctx.BitacoraAcciones.Add(registroBitacora);
                                ctx.SaveChanges();
                            }
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        if (notificacionActualizacion || modificacionExperto2 || modificacionAutorizador)
                        {
                            try
                            {
                                var campos = string.Format(cambiosDetalle, filas);
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[Campos]", campos);

                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionCamposPortafolio, entidad.applicationId, diccionario, null, true);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        this.SincronizarConCVT(codigoAPT);


                        //LLAMAR A API JENKINS EN CASO LAS INFRAESTRUCTURAS SEAN LAS ADECUADAS
                        var objURL = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("INFRAESTRUCTURAS_JENKINS");
                        var ActivarJenkins = ServiceManager<ParametroDAO>.Provider.ObtenerParametro("ACTIVAR_INTEGRACION_JENKINS");

                        var listInfraestructuras = getInfrastructureId(objURL.Valor);


                        if (listInfraestructuras.Contains(Convert.ToString(objeto.infrastructure)) && ActivarJenkins.Valor.ToUpper() == "TRUE".ToUpper())
                        {
                            CallPipelineJenkins(entidad.applicationId);
                        }



                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override List<CustomAutocomplete> GetApplicationVigenteByFilter(string filter, bool? flagAprobado, string codigoAPT)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var entidad = (from u in ctx.Application
                                   where u.status != (int)ApplicationState.Eliminada
                                   && (u.applicationId != codigoAPT)
                                   && (u.applicationId + " - " + u.applicationName).ToUpper().Contains(filter.ToUpper())
                                   && u.isActive == true && u.registrationSituation == (int)ApplicationSituationRegister.RegistroCompleto && u.isApproved == true
                                   orderby u.applicationId
                                   select new CustomAutocomplete()
                                   {
                                       Id = u.applicationId,
                                       IdAplicacion = u.AppId,
                                       Descripcion = u.applicationId + " - " + u.applicationName,
                                       value = u.applicationId + " - " + u.applicationName
                                   }).ToList();

                    return entidad;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<CustomAutocomplete> GetApplicationVigenteByFilter(string filtro)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<CustomAutocomplete> GetApplicationVigenteByFilter(string filtro)"
                    , new object[] { null });
            }
        }

        public override List<CustomAutocompleteRemedy> GetGroupRemedyByFilter(string filter, bool? flagAprobado)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var entidad = (from u in ctx.GrupoRemedy
                                   where u.FlagEliminado == false
                                   && (u.Nombre).ToUpper().Contains(filter.ToUpper())
                                   orderby u.GrupoRemedyId
                                   select new CustomAutocompleteRemedy()
                                   {
                                       Id = u.GrupoRemedyId,
                                       Descripcion = u.Descripcion,
                                       value = u.Descripcion

                                   }).ToList();

                    return entidad;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<CustomAutocomplete> GetApplicationVigenteByFilter(string filtro)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<CustomAutocomplete> GetApplicationVigenteByFilter(string filtro)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion RefuseFlow(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var flujo = ctx.ApplicationFlow.FirstOrDefault(x => x.FlowAppId == objeto.FlowAppId);
                        if (flujo != null)
                        {
                            flujo.isApproved = null;
                            flujo.isCompleted = false;
                            flujo.dateApproved = null;
                            flujo.comments = objeto.comments;
                            flujo.rejectedBy = objeto.registerBy;
                            flujo.dateRejected = DateTime.Now;


                            var app = ctx.Application.FirstOrDefault(x => x.AppId == flujo.AppId);
                            if (app != null)
                            {
                                app.registrationSituation = (int)ApplicationSituationRegister.RegistroParcial;
                                app.isApproved = false;
                            }

                            ctx.SaveChanges();
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();
                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion RefuseUser(ApplicationDto objeto)
        {
            DbContextTransaction transaction = null;
            try
            {
                long ID = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var app = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        if (app != null)
                        {
                            app.registrationSituation = (int)ApplicationSituationRegister.RegistroParcial;
                            app.isApproved = false;
                            app.dateRegistrationSituationComplete = (DateTime?)null;
                            app.isObserved = true;
                            app.commentsObserved = objeto.comments;
                        }

                        var flujoAdmin = ctx.ApplicationFlow.FirstOrDefault(x => x.AppId == app.AppId && x.isActive == true && x.typeRegister == (int)ApplicationManagerRole.AdministradorPortafolio);
                        if (flujoAdmin != null)
                        {
                            flujoAdmin.approvedBy = objeto.registerBy;
                            flujoAdmin.comments = objeto.comments;
                            flujoAdmin.createdBy = objeto.registerBy;
                            flujoAdmin.dateApproved = DateTime.Now;
                            flujoAdmin.dateCreation = DateTime.Now;
                            flujoAdmin.isApproved = false;
                            flujoAdmin.ownerId = objeto.registerBy;
                            flujoAdmin.ownerEmail = objeto.registerByEmail;
                            flujoAdmin.isCompleted = true;
                        }
                        else
                        {
                            var flujoNuevoAdmin = new ApplicationFlow()
                            {
                                AppId = app.AppId,
                                approvedBy = objeto.registerBy,
                                comments = objeto.comments,
                                createdBy = objeto.registerBy,
                                dateApproved = DateTime.Now,
                                dateCreation = DateTime.Now,
                                FlowAppId = 0,
                                isActive = true,
                                isApproved = false,
                                isCompleted = true,
                                ownerEmail = objeto.registerByEmail,
                                ownerId = objeto.registerBy,
                                isNotified = true,
                                typeFlow = (int)Flow.Registro,
                                typeRegister = (int)ApplicationManagerRole.AdministradorPortafolio,
                                RegistradoPor = objeto.NombreUsuarioModificacion

                            };
                            ctx.ApplicationFlow.Add(flujoNuevoAdmin);
                        }

                        ctx.SaveChanges();

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = 0;
                        transaction.Commit();

                        try
                        {
                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", app.applicationId);
                            diccionario.Add("[NombreAplicacion]", app.applicationName);
                            diccionario.Add("[Comentarios]", objeto.comments);

                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2ObservacionAdministradorSolicitante, app.applicationId, diccionario);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        try
                        {

                            //Agregar registro en bitácora
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " +
                            "rechazó la solicitud creación de la aplicación " + "" + app.applicationId + "" + " - " + "" + app.applicationName + " ";

                            BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + objeto.comments;

                            BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = app.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = objeto.registerBy,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }

                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetApplicationsToNotify()
        {
            var date = DateTime.Now.AddDays(1);
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     where (u.registrationSituation.HasValue && u.registrationSituation.Value == 1) //TODO [CHC]: ENUM
                                     && (u.registerDate.HasValue && u.registerDate.Value <= date) //TODO [CHC]: quitar horas
                                     && u.isActive == true && (u.isReactivated.HasValue == false || u.isReactivated == false)
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         isApproved = u.isApproved
                                     });

                    return registros.ToList();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowList> GetApplicationsFlowToNotify(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.ApplicationFlow
                                     join u2 in ctx.Application on u.AppId equals u2.AppId
                                     where u.AppId == id
                                     && u.isActive == true
                                     && u.isCompleted == false
                                     && u2.isApproved == false && u2.registrationSituation == (int)ApplicationSituationRegister.RegistroParcial
                                     select new ApplicationFlowList()
                                     {
                                         dateCreation = DbFunctions.TruncateTime(u.dateCreation.Value),
                                         mail = u.ownerEmail
                                     }).Distinct().ToList();

                    return registros;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsFlowToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsFlowToNotify()"
                    , new object[] { null });
            }
        }

        public override void DeleteApplication(int id, string user)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == id);
                    if (app != null)
                    {
                        app.isActive = false;
                        app.desactivatedBy = user;
                        app.dateDesactivated = DateTime.Now;
                    }
                    ctx.SaveChanges();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override void DeleteApplication2(int id, string user, string email, string comments, string Matricula, string NombreUsuarioModificacion)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var app = ctx.Application.FirstOrDefault(x => x.AppId == id);
                    if (app != null)
                    {
                        app.isActive = false;
                        app.desactivatedBy = user;
                        app.dateDesactivated = DateTime.Now;
                        app.commentsObserved = comments;
                        app.desactivatedByEmail = email;

                        //Registrar flujo o validar si existe (en ese caso actualizar estado)
                        var flujoAdmin = ctx.ApplicationFlow.FirstOrDefault(x => x.AppId == app.AppId && x.isActive == true && x.typeRegister == (int)ApplicationManagerRole.AdministradorPortafolio);
                        if (flujoAdmin != null)
                        {
                            flujoAdmin.approvedBy = user;
                            flujoAdmin.comments = string.Format("Desestimado con comentarios: {0}", comments);
                            flujoAdmin.createdBy = user;
                            flujoAdmin.dateApproved = DateTime.Now;
                            flujoAdmin.dateCreation = DateTime.Now;
                            flujoAdmin.isApproved = false;
                            flujoAdmin.ownerId = user;
                            flujoAdmin.ownerEmail = email;
                            flujoAdmin.isCompleted = true;
                        }
                        else
                        {
                            var flujoNuevoAdmin = new ApplicationFlow()
                            {
                                AppId = app.AppId,
                                approvedBy = user,
                                comments = string.Format("Desestimado con comentarios: {0}", comments),
                                createdBy = user,
                                dateApproved = DateTime.Now,
                                dateCreation = DateTime.Now,
                                FlowAppId = 0,
                                isActive = true,
                                isApproved = false,
                                isCompleted = true,
                                ownerEmail = email,
                                ownerId = user,
                                isNotified = true,
                                typeFlow = (int)Flow.Registro,
                                typeRegister = (int)ApplicationManagerRole.AdministradorPortafolio,
                                RegistradoPor = NombreUsuarioModificacion

                            };
                            ctx.ApplicationFlow.Add(flujoNuevoAdmin);
                        }

                        ctx.SaveChanges();

                        try
                        {
                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", app.applicationId);
                            diccionario.Add("[NombreAplicacion]", app.applicationName);
                            diccionario.Add("[Comentarios]", comments);

                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.M2RechazoPortafolio, app.applicationId, diccionario);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }

                        try
                        {

                            //Agregar registro en bitácora
                            var BitacoraMensaje = "";
                            var dateAndTime = DateTime.Now;
                            string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                            var hour = dateAndTime.ToString("HH:mm:ss");
                            BitacoraMensaje = "" + NombreUsuarioModificacion + "" + "(" + Matricula + ")" + " " +
                            "desestimó la solicitud creación de la aplicación " + "" + app.applicationId + "" + " - " + "" + app.applicationName + " ";

                            BitacoraMensaje = BitacoraMensaje + " por el siguiente motivo: " + comments;

                            BitacoraMensaje = BitacoraMensaje + ",el día " + "" + date + "" + " a las " + "" + hour + "";

                            var registroBitacora = new BitacoraAcciones()
                            {
                                CodigoAPT = app.applicationId,
                                DetalleBitacora = BitacoraMensaje,
                                CreadoPor = user,
                                FechaCreacion = dateAndTime,
                                NombreUsuarioCreacion = NombreUsuarioModificacion
                            };

                            ctx.BitacoraAcciones.Add(registroBitacora);
                            ctx.SaveChanges();
                        }

                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: void DeleteApplication2((int id, string user, string comments)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: void DeleteApplication2(int id, string user, string comments)"
                    , new object[] { null });
            }
        }

        public override int? GetManagedId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.GestionadoPor.FirstOrDefault(x => x.Nombre == name);
                if (item != null) { return item.GestionadoPorId; }
                else return null;
            }

        }

        public override int? GetDeploymentTypeId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == name && x.FlagActivo == true && x.Descripcion == "Modelo de entrega");
                if (item != null) { return item.ParametricaDetalleId; }
                else return null;
            }

        }

        public override int? GetStatusId(string name)
        {
            if (name == "En Desarrollo") { return 1; }
            if (name == "Vigente") { return 2; }
            if (name == "No Vigente") { return 3; }
            if (name == "Eliminada") { return 4; }
            else return null;

        }

        public override int? GetUnitId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Unidad.FirstOrDefault(x => x.Nombre == name);
                if (item != null) { return item.UnidadId; }
                else return null;
            }

        }



        public override int? GetInfrastructureId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == name && x.FlagActivo == true && x.Descripcion == "Infraestructura de la aplicación");
                if (item != null) { return item.ParametricaDetalleId; }
                else return null;
            }

        }

        public override int? GetAssetTypeId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.TipoActivoInformacion.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.TipoActivoInformacionId; }
                else return null;
            }

        }

        public override int? GetBianDomainId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.DominioBian.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.DominioBianId; }
                else return null;
            }

        }

        public override int? GetMainOfficeId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.JefaturaAti.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.JefaturaAtiId; }
                else return null;
            }

        }

        public override int? GetTechnologyCategoryId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == name && x.FlagActivo == true && x.Descripcion == "Categoria tecnologica");
                if (item != null) { return item.ParametricaDetalleId; }
                else return null;
            }

        }

        public override int? GetTechnicalSubclassificationId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.SubClasificacionTecnicaId; }
                else return null;
            }

        }

        public override int? GetTechnicalClassificationId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ClasificacionTecnica.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.ClasificacionTecnicaId; }
                else return null;
            }

        }

        public override int? GetGroupTicketRemedyId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.GrupoRemedy.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.GrupoRemedyId; }
                else return null;
            }

        }

        public override int? GetTobeId(string name)
        {
            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.PlataformaBcp.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.PlataformaBcpId; }
                else return null;
            }

        }

        public override int? GetAuthorizationMethodId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == name && x.FlagActivo == true && x.Descripcion == "Método de autorización");
                if (item != null) { return item.ParametricaDetalleId; }
                else return null;
            }

        }

        public override int? GetAuthenticationMethodId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == name && x.FlagActivo == true && x.Descripcion == "Método de autenticación");
                if (item != null) { return item.ParametricaDetalleId; }
                else return null;
            }

        }

        public override int? GetAssetClassificationId(string name)
        {
            if (name != "")
            {
                if (name.ToUpper() == "Restringido".ToUpper()) { return 1; }
                else if (name.ToUpper() == "Uso Interno".ToUpper()) { return 2; }
                else if (name.ToUpper() == "Público".ToUpper()) { return 3; }
                else return null;
            }
            else return -1;
        }

        public override int? GetAssetBIACriticalityId(string name)
        {
            if (name != "")
            {
                if (name.ToUpper() == "Baja".ToUpper()) { return 1; }
                else if (name.ToUpper() == "Media".ToUpper()) { return 2; }
                else if (name.ToUpper() == "Alta".ToUpper()) { return 3; }
                else if (name.ToUpper() == "Muy Alta".ToUpper()) { return 4; }
                else return null;
            }
            else return -1;
        }

        public override int? GetFinalCriticality(int? clasificacion, int? bia)
        {

            if (bia == -1)
                return -1;
            if (clasificacion == -1)
                return -1;

            if (bia == (int)BIA.MuyAlta)
            {
                return (int)CriticidadFinal.MuyAlta;
            }
            else if (bia == (int)BIA.Alta)
            {
                if (clasificacion == (int)ClasificacionActivos.Restringido)
                    return (int)CriticidadFinal.MuyAlta;
                else
                    return (int)CriticidadFinal.Alta;
            }
            else if (bia == (int)BIA.Media)
            {
                if (clasificacion == (int)ClasificacionActivos.Restringido)
                    return (int)CriticidadFinal.Alta;
                else
                    return (int)CriticidadFinal.Media;
            }
            else if (bia == (int)BIA.Baja)
            {
                if (clasificacion == (int)ClasificacionActivos.Restringido)
                    return (int)CriticidadFinal.Alta;
                else
                    return (int)CriticidadFinal.Baja;
            }
            else return null;

        }

        public override int? GetImplementationTypeId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == name && x.FlagActivo == true && x.Descripcion == "Tipo de implementacion");
                if (item != null) { return item.ParametricaDetalleId; }
                else return null;
            }

        }
        public override List<ParametricaDetalle> GetAllParametricaDetalle()
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.Where(x =>  x.FlagActivo == true ).ToList();

                return item;

            }
       
        }

        public override List<GestionadoPor> GetAllGestionadoPor()
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.GestionadoPor.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<Unidad> GetAllUnit()
        {

 
            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Unidad.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<TipoActivoInformacion> GetAllAssetType()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.TipoActivoInformacion.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<DominioBian> GetAllBianDomain()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.DominioBian.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<JefaturaAti> GetAllMainOffice()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.JefaturaAti.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }
        public override List<ClasificacionTecnica> GetAllClasificacionTecnica()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ClasificacionTecnica.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }
        public override List<SubClasificacionTecnica> GetAllSubClasificacionTecnica()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.SubClasificacionTecnica.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<GrupoRemedy> GetAllGrupoRemedy()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.GrupoRemedy.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<PlataformaBcp> GetAllTobe()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.PlataformaBcp.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<Area> GetAllAreas()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Area.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<AreaBian> GetAllAreaBian()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.AreaBian.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }

        public override List<ApplicationManagerCatalog> GetAllApplicationManager()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ApplicationManagerCatalog.Where(x => x.isActive == true).ToList();

                return item;

            }

        }

        public override List<Division> GetAllDivision()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Division.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }
        public override List<Gerencia> GetAllGerencia()
        {


            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Gerencia.Where(x => x.FlagActivo == true).ToList();

                return item;

            }

        }


        public override int? GetDevTypeId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == name && x.FlagActivo == true && x.Descripcion == "Tipo de desarrollo");
                if (item != null) { return item.ParametricaDetalleId; }
                else return null;
            }

        }

        public override int? GetAreaId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Area.FirstOrDefault(x => x.Nombre == name && x.FlagActivo == true);
                if (item != null) { return item.AreaId; }
                else return null;
            }

        }


        public override string GetUserEntityId(string name)
        {
            string[] lista = name.Split(new string[] { ";" }, StringSplitOptions.None);
            int flag = 0;
            string listaIds = "";
            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                foreach (string a in lista)
                {
                    var item = ctx.ParametricaDetalle.FirstOrDefault(x => x.Valor == a.Trim() && x.FlagActivo == true && x.Descripcion == "Entidades usuarias");
                    if (item != null)
                    {
                        if (flag == 0)
                        {
                            listaIds += item.ParametricaDetalleId;
                            flag++;
                        }
                        else listaIds += "," + item.ParametricaDetalleId;
                    }

                }
                return listaIds;

            }

        }

        public override string GetPCIId(string name)
        {
            string[] lista = name.Split(new string[] { ";" }, StringSplitOptions.None);
        
           int flag = 0;
            string listaIds = "";
            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                foreach (string a in lista)
                {
                    var item = ctx.TipoPCI.FirstOrDefault(x => x.Nombre == a.Trim() && x.FlagActivo == true);
                    if (item != null)
                    {
                        if (flag == 0)
                        {
                            listaIds += item.TipoPCIId;
                            flag++;
                        }
                        else listaIds += "," + item.TipoPCIId;
                    }
                    if (item == null)
                    {
                        if (flag == 0)
                        {
                            listaIds += " ";
                            flag++;
                        }
                        else listaIds += "," + " ";
                    }

                }
                return listaIds;

            }

        }

        public override PCIDto GetPCIById(int id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var entidad = (from u in ctx.TipoPCI

                                   where u.TipoPCIId == id
                                   select new PCIDto()
                                   {
                                       Id = u.TipoPCIId,
                                       Descripcion = u.Descripcion,
                                       Nombre = u.Nombre,

                                       FlagActivo = u.FlagActivo,
                                       //FechaCreacion = u.FechaCreacion.HasValue? u.FechaCreacion.Value : DateTime.Now,
                                       UsuarioCreacion = u.UsuarioCreacion,
                              
                                   }).FirstOrDefault();
                    return entidad;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: PCIDto GetPCIById(int id)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: PCIDto GetPCIById(int id)"
                    , new object[] { null });
            }
        }

        public override bool CambiarEstadoPCI(int id, bool? estado, string usuario)
        {
            try
            {
                bool retorno = false;
                DateTime FECHA_ACTUAL = DateTime.Now;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var itemBD = (from u in ctx.TipoPCI
                                  where u.TipoPCIId == id
                                  select u).FirstOrDefault();

                    if (itemBD != null)
                    {
                        itemBD.FechaModificacion = FECHA_ACTUAL;
                        itemBD.UsuarioModificacion = usuario;
                        itemBD.FlagActivo = estado;
                        ctx.SaveChanges();

                        retorno = !retorno;
                    }

                    return retorno;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: bool CambiarEstado(int id, bool estado, string usuario)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: bool CambiarEstado(int id, bool estado, string usuario)"
                    , new object[] { null });
            }
        }

        public override int AddOrEditPCI(PCIDto objeto)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;
                int ID = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (objeto.Id == -1)
                    {
                        var entidad = new TipoPCI()
                        {
                        
                            Descripcion = objeto.Descripcion,
                            Nombre = objeto.Nombre,
                            UsuarioCreacion = objeto.UsuarioCreacion,
                            UsuarioModificacion = objeto.UsuarioModificacion,
                            FechaCreacion = FECHA_ACTUAL,
                            FechaModificacion = FECHA_ACTUAL,
                            FlagEliminado = false,
                            FlagActivo = true,
                        };
                        ctx.TipoPCI.Add(entidad);

      
                        ctx.SaveChanges();

                        ID = entidad.TipoPCIId;
                    }
                    else
                    {
                        var entidad = (from u in ctx.TipoPCI
                                       where u.TipoPCIId == objeto.Id
                                       select u).FirstOrDefault();
                        if (entidad != null)
                        {

                            entidad.Descripcion = objeto.Descripcion;
                            entidad.Nombre = objeto.Nombre;
                            entidad.FechaModificacion = FECHA_ACTUAL;
                            entidad.UsuarioModificacion = objeto.UsuarioModificacion;


                            ctx.SaveChanges();

                            ID = entidad.TipoPCIId;
                        }
                    }

                    return ID;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditPCI(PCIDto objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditPCI(PCIDto objeto)"
                    , new object[] { null });
            }
        }


        public override List<PCIDto> GetPCI(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.TipoPCI
                                     where (u.Nombre.ToUpper().Contains(filtro.ToUpper())
                                     || string.IsNullOrEmpty(filtro))
                                     && !u.FlagEliminado.Value
                                     orderby u.Nombre ascending
                                     select new PCIDto()
                                     {
                                         Id = u.TipoPCIId,
                                         Descripcion = u.Descripcion,
                                         Nombre = u.Nombre,
                                         FlagActivo = u.FlagActivo,
                                         UsuarioCreacion = u.UsuarioCreacion,
                                         FechaCeacionPCI = u.FechaCreacion,
                                         UsuarioModificacion = u.UsuarioModificacion,
                                         FechaModificacion = u.FechaModificacion,

                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(sortName + " " + sortOrder);
                    var resultado = registros.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetActivos(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetActivos(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<InfoCampoPortafolioToolbox> GetAppToolbox()
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.InfoCampoPortafolio
                                         //where u.Codigo != null
                                     select new InfoCampoPortafolioToolbox()
                                     {
                                         Codigo = u.Codigo,
                                         Tooltip = u.ToolTip

                                     }).ToList();

                    return registros;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public override int? GetGereciaId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Gerencia.FirstOrDefault(x => x.Nombre == name);
                if (item != null) { return item.GerenciaId; }
                else return null;
            }

        }

        public override int? GetDivisionId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Division.FirstOrDefault(x => x.Nombre == name);
                if (item != null) { return item.DivisionId; }
                else return null;
            }

        }

        public override int? GetBIANAreaId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.AreaBian.FirstOrDefault(x => x.Nombre == name);
                if (item != null) { return item.AreaBianId; }
                else return null;
            }

        }

        public override string GetMatriculaByName(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.managerName == name);
                if (item != null) { return item.username; }
                else return null;
            }

        }

        public override string GetEmailByName(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.managerName == name);
                if (item != null) { return item.email; }
                else return null;
            }

        }

        public override int? GetapplicationCriticalityBIAId(string name)
        {

            using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
            {
                var item = ctx.Criticidad.FirstOrDefault(x => x.DetalleCriticidad == name);
                if (item != null) { return item.CriticidadId; }
                else return null;
            }

        }

        public override List<ApplicationList> GetApplicationsToNotifyAdmins()
        {
            var date = DateTime.Now.AddDays(1);
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     where (u.registrationSituation.HasValue && u.registrationSituation.Value == (int)ApplicationSituationRegister.RegistroCompleto) //TODO [CHC]: ENUM
                                     && (u.registerDate.HasValue && u.registerDate.Value <= date) //TODO [CHC]: quitar horas
                                     && u.isActive == true && u.isApproved == false
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         isApproved = u.isApproved,
                                         //dateRegistrationSituationComplete = u.dateRegistrationSituationComplete
                                     });

                    return registros.ToList();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
        }

        public override void EliminarPortafolio()
        {
            try
            {
                var cadenaConexion = Constantes.CadenaConexion;

                using (SqlConnection cnx = new SqlConnection(cadenaConexion))
                {
                    cnx.Open();
                    using (var comando = new SqlCommand("[app].[USP_EliminarAplicaciones]", cnx))
                    {
                        comando.CommandTimeout = 0;
                        comando.CommandType = System.Data.CommandType.StoredProcedure;
                        comando.ExecuteNonQuery();
                    }

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: void EliminarPortafolio()"
                    , new object[] { null });
            }
        }

        public string getImplementationTypeName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                    if (registro != null)
                        return registro.Valor;
                    else
                        return null;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getStatusName(int? id)
        {

            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null)
                    {
                        string registro = Utilitarios.GetEnumDescription2((ApplicationState)id);
                        return registro;
                    }
                    else return "Ninguno.";

                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getPCIName(int id)
        {



            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.TipoPCI.FirstOrDefault(x => x.TipoPCIId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }

                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getUserEntityName(string id)
        {

            string[] userEntities = id.Split(',');
            string resultado = "";
            int flag = 0;

            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && id != "")
                    {
                        foreach (string a in userEntities)
                        {
                            var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == a);
                            if (flag == userEntities.Length - 1)
                                resultado += registro.Valor;
                            else resultado += registro.Valor + ", ";
                        }
                        return resultado;
                    }

                    else return "Ninguno seleccionado";

                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getDevelopmentTypeName(string id)
        {



            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == id);
                        if (registro != null)
                            return registro.Valor;
                        else
                            return "Ninguno seleccionado";
                    }

                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getInfraestructureName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                        if (registro != null)
                            return registro.Valor;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getParametricaDetalleName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                        if (registro != null)
                            return registro.Valor;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getGroupRemedyName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.GrupoRemedy.FirstOrDefault(x => x.GrupoRemedyId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getBIA(int? id)
        {
            try
            {
                if (id != null && Convert.ToInt32(id) != 0)
                {
                    return Utilitarios.GetEnumDescription2((BIA)id.Value);
                }
                else return "Ninguno seleccionado";
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getClassificationName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        return Utilitarios.GetEnumDescription2((ClasificacionActivos)id.Value);
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getBIACriticalityName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        return Utilitarios.GetEnumDescription2((BIA)id.Value);
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getNuevaCriticidad(int? id)
        {
            try
            {
                if (id != null && Convert.ToInt32(id) != 0)
                {
                    return Utilitarios.GetEnumDescription2((CriticidadFinal)id.Value);
                }
                else return "Ninguno seleccionado";
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getFinalCriticalityName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        return Utilitarios.GetEnumDescription2((CriticidadFinal)id.Value);
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getManagedName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getLiderUnidad(string nombre)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (nombre != null)
                    {
                        var registro = ctx.Unidad.FirstOrDefault(x => x.Nombre == nombre);
                        if (registro != null)
                            return registro.Responsable;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getMainOfficeName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && id != 0)
                    {
                        var registro = ctx.JefaturaAti.FirstOrDefault(x => x.JefaturaAtiId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";

                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getUnitName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.Unidad.FirstOrDefault(x => x.UnidadId == id);
                        if (registro != null)
                        {
                            return registro.Nombre;
                        }
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getArchitectName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ArquitectoTI.FirstOrDefault(x => x.ArquitectoTIId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getTechnologyCategoryName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                        if (registro != null)
                            return registro.Valor;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getTechnicalClassificationName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ClasificacionTecnica.FirstOrDefault(x => x.ClasificacionTecnicaId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }

                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getSubTechnicalClassificationName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {

                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.SubClasificacionTecnicaId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getDeploymentTypeName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                        if (registro != null)
                            return registro.Valor;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getAssetTypeName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {

                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.TipoActivoInformacion.FirstOrDefault(x => x.TipoActivoInformacionId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }

                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getTOBEName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.PlataformaBcp.FirstOrDefault(x => x.PlataformaBcpId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getBIANDomainName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getBIANAreaName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getTeamName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {

                        var registro = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public string getEvalArchitectName(int? id)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (id != null && Convert.ToInt32(id) != 0)
                    {
                        var registro = ctx.ArquitectoTI.FirstOrDefault(x => x.ArquitectoTIId == id);
                        if (registro != null)
                            return registro.Nombre;
                        else
                            return "Ninguno seleccionado";
                    }
                    else return "Ninguno seleccionado";
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<InfoCampoPortafolioToolbox> GetAppToolbox()"
                    , new object[] { null });
            }
        }

        public override int AddOrEditConsulta(ConsultaDTO objeto)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;
                int ID = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var entidad = new Consultas()
                    {
                        FechaConsulta = FECHA_ACTUAL,
                        TipoConsulta = objeto.TipoConsulta,
                        Consulta = objeto.Consulta,
                        NombreUsuarioConsultor = objeto.NombreUsuarioConsultor,
                        MatriculaUsuarioConsultor = objeto.MatriculaUsuarioConsultor,
                        EmailUsuarioConsultor = objeto.EmailUsuarioConsultor,
                        Respondido = (int)EstadoConsulta.SinResponder,
                        applicationId = objeto.applicationId,
                        FlagEliminado = false
                    };
                    ctx.Consultas.Add(entidad);
                    ctx.SaveChanges();

                    ID = entidad.ConsultaId;

                    //Envio de correo
                    try
                    {
                        var tipoConsulta = "";
                        if (objeto.TipoConsulta == (int)TipoConsulta.ConsultaGeneral) { tipoConsulta = "consulta general relacionada a la aplicación (" + objeto.applicationId + ") "; }
                        else if (objeto.TipoConsulta == (int)TipoConsulta.Comentarios) { tipoConsulta = "comentario relacionado a la aplicación (" + objeto.applicationId + ") "; }
                        else if (objeto.TipoConsulta == (int)TipoConsulta.ConsultaRolesAplicacion) { tipoConsulta = "consulta de roles de una aplicación relacionada a la aplicación (" + objeto.applicationId + ") "; }
                        else if (objeto.TipoConsulta == (int)TipoConsulta.ConsultaProceso) { tipoConsulta = "consulta sobre el proceso relacionada a la aplicación (" + objeto.applicationId + ") "; }
                        else if (objeto.TipoConsulta == (int)TipoConsulta.ConsultaInformacionHistorica) { tipoConsulta = "consulta por información histórica relacionada a la aplicación (" + objeto.applicationId + ") "; }
                        List<string> correos = new List<string>();
                        //correos.Add(objeto.EmailUsuarioConsultor);

                        var mailManager = new MailingManager();
                        var diccionario = new Dictionary<string, string>();

                        diccionario.Add("[Consulta]", objeto.Consulta);
                        diccionario.Add("[TipoConsulta]", tipoConsulta);
                        mailManager.ProcesarEnvioNotificacionesConsulta((int)NotificationFlow.EnvioConsulta, tipoConsulta, diccionario, correos, objeto.Consulta);
                    }
                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    return ID;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
        }


        public override int EditConsulta(ConsultaDTO objeto)
        {
            var anteriorConsulta = "";
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;
                int ID = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = ctx.Consultas.FirstOrDefault(x => x.ConsultaId == objeto.ConsultaId);
                    anteriorConsulta = registro.Consulta;
                    registro.Consulta = objeto.Consulta;

                    ctx.SaveChanges();

                    ID = registro.ConsultaId;

                    //Envio de correo
                    try
                    {

                        List<string> correos = new List<string>();
                        correos.Add(registro.EmailUsuarioConsultor);

                        var mailManager = new MailingManager();
                        var diccionario = new Dictionary<string, string>();

                        diccionario.Add("[Consulta]", anteriorConsulta);
                        diccionario.Add("[NuevaConsulta]", registro.Consulta);
                        mailManager.ProcesarEnvioNotificacionesAdministradoresConsultas((int)NotificationFlow.ModificacionConsultasPortafolio, "", diccionario, true, true, correos);

                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    return ID;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
        }

        public override int EliminarConsulta(ConsultaDTO objeto)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;
                int ID = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = ctx.Consultas.FirstOrDefault(x => x.ConsultaId == objeto.ConsultaId);
                    registro.FlagEliminado = true;

                    ctx.SaveChanges();

                    ID = registro.ConsultaId;

                    //Envio de correo
                    try
                    {

                        List<string> correos = new List<string>();
                        correos.Add(registro.EmailUsuarioConsultor);

                        var mailManager = new MailingManager();
                        var diccionario = new Dictionary<string, string>();

                      
                        diccionario.Add("[Consulta]", registro.Consulta);
                        mailManager.ProcesarEnvioNotificacionesAdministradoresConsultas((int)NotificationFlow.EliminacionConsultasPortafolio,"", diccionario,true,true, correos);
     
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    return ID;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
        }
        
        public override List<ConsultaDTO> GetConsultasByUser(int tipoid, int respondido, int pageNumber, int pageSize, string sortName, string sortOrder, string matricula, out int totalRows)
        {

            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Consultas
                                     where (u.TipoConsulta == tipoid
                                     || tipoid == -1) && (u.Respondido == respondido || respondido == -1) && u.MatriculaUsuarioConsultor == matricula && u.FlagEliminado != true
                                     select new ConsultaDTO()
                                     {
                                         ConsultaId = u.ConsultaId,
                                         FechaConsulta = u.FechaConsulta,
                                         TipoConsulta = u.TipoConsulta,
                                         Consulta = u.Consulta,
                                         FechaRespuesta = u.FechaRespuesta,
                                         RespuestaPortafolio = u.RespuestaPortafolio,
                                         NombreUsuarioConsultor = u.NombreUsuarioConsultor,
                                         MatriculaUsuarioConsultor = u.MatriculaUsuarioConsultor,
                                         EmailUsuarioConsultor = u.EmailUsuarioConsultor,
                                         Respondido = u.Respondido,
                                         applicationId = u.applicationId

                                     });


                    totalRows = registros.Count();
                    registros = registros.OrderBy(sortName + " " + sortOrder);
                    var resultado = registros.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();


                    foreach (ConsultaDTO a in resultado)
                    {
                        a.TipoConsultaName = Utilitarios.GetEnumDescription2((TipoConsulta)a.TipoConsulta.Value);
                        a.FechaConsultaF = a.FechaConsulta != null ? a.FechaConsulta.Value.ToString("dd/MM/yyyy") : "-";
                        a.FechaRespuestaF = a.FechaRespuesta != null ? a.FechaRespuesta.Value.ToString("dd/MM/yyyy") : "-";
                        a.RespondidoName = a.Respondido == 1 ? "Respondida" : "Sin responder";
                    }

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ConsultaDTO> GetConsultas(int tipoid, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ConsultaDTO> GetConsultas(int tipoid, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ConsultaDTO> GetConsultas(int tipoid, int respondido, int pageNumber, int pageSize, string sortName, string sortOrder, string matricula, string desde, string hasta, out int totalRows)
        {
            DateTime? DesdeF = null;
            DateTime? HastaF = null;
            DateTime flag = DateTime.Now;

            if (desde == hasta && desde != "" && hasta!="") { 
                flag= DateTime.ParseExact(hasta, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                flag = flag.AddDays(1);
            }

             //DesdeF = desde != "" ? Convert.ToDateTime(desde) : DesdeF;

            //HastaF = hasta != "" ? Convert.ToDateTime(hasta) : HastaF;



            DesdeF = desde != "" ? DateTime.ParseExact(desde, "dd/MM/yyyy", CultureInfo.InvariantCulture) : DesdeF;

            HastaF = hasta != "" ? DateTime.ParseExact(hasta, "dd/MM/yyyy", CultureInfo.InvariantCulture) : HastaF;


            if (desde == hasta && desde != "" && hasta != "") {
                HastaF = flag;
            }



            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Consultas
                                     where (u.NombreUsuarioConsultor.ToUpper().Contains(matricula.ToUpper()) || matricula == "")
                                     && (u.FechaConsulta >= DesdeF || DesdeF == null) && (u.FechaConsulta <= HastaF || HastaF == null)
                                     && (u.TipoConsulta == tipoid
                                     || tipoid == -1) && (u.Respondido == respondido || respondido == -1)
                                     select new ConsultaDTO()
                                     {
                                         ConsultaId = u.ConsultaId,
                                         FechaConsulta = u.FechaConsulta,
                                         TipoConsulta = u.TipoConsulta,
                                         ConsultaUsuario = u.NombreUsuarioConsultor + ": " + u.Consulta,
                                         Consulta = u.Consulta,
                                         FechaRespuesta = u.FechaRespuesta,
                                         RespuestaPortafolio = u.RespuestaPortafolio,
                                         NombreUsuarioConsultor = u.NombreUsuarioConsultor,
                                         MatriculaUsuarioConsultor = u.MatriculaUsuarioConsultor,
                                         EmailUsuarioConsultor = u.EmailUsuarioConsultor,
                                         applicationId = u.applicationId

                                     });


                    totalRows = registros.Count();
                    registros = registros.OrderBy(sortName + " " + sortOrder);
                    var resultado = registros.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();


                    foreach (ConsultaDTO a in resultado)
                    {
                        a.TipoConsultaName = Utilitarios.GetEnumDescription2((TipoConsulta)a.TipoConsulta.Value);
                        a.FechaConsultaF = a.FechaConsulta != null ? a.FechaConsulta.Value.ToString("dd/MM/yyyy") : "-";
                        a.FechaRespuestaF = a.FechaRespuesta != null ? a.FechaRespuesta.Value.ToString("dd/MM/yyyy") : "-";
                    }

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ConsultaDTO> GetConsultas(int tipoid, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ConsultaDTO> GetConsultas(int tipoid, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override int AddRespuesta(ConsultaDTO objeto)
        {
            try
            {
                DateTime FECHA_ACTUAL = DateTime.Now;
                int ID = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = ctx.Consultas.FirstOrDefault(x => x.ConsultaId == objeto.ConsultaId);

                    registro.FechaRespuesta = FECHA_ACTUAL;
                    registro.RespuestaPortafolio = objeto.RespuestaPortafolio;
                    registro.Respondido = (int)EstadoConsulta.Respondida;

                    ctx.SaveChanges();

                    ID = registro.ConsultaId;

                    //Envio de correo
                    try
                    {

                        List<string> correos = new List<string>();
                        correos.Add(registro.EmailUsuarioConsultor);

                        var mailManager = new MailingManager();
                        var diccionario = new Dictionary<string, string>();

                        diccionario.Add("[Respuesta]", objeto.RespuestaPortafolio);
                        diccionario.Add("[Consulta]", registro.Consulta);
                        mailManager.ProcesarEnvioNotificacionesRespuesta((int)NotificationFlow.RespuestaConsulta, objeto.RespuestaPortafolio, diccionario, correos, registro.Consulta);
                        //mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.RespuestaConsulta, "", diccionario, correos);
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }

                    return ID;
                }
            }

            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: int AddOrEditConsulta(ConsultaDTO objeto)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationDetail> GetApplicationForUpdate()
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registro = (from u in ctx.Application
                                    where u.isActive == true && u.isApproved == true
                                    select new ApplicationDetail()
                                    {
                                        id = u.AppId,
                                        applicationId = u.applicationId,
                                        deploymentType = u.deploymentType,
                                        managed = u.managed,
                                        applicationName = u.applicationName,
                                        description = u.description,
                                        developmentProvider = u.developmentProvider,
                                        developmentType = u.developmentType,
                                        hasInterfaceId = u.hasInterfaceId,
                                        implementationType = u.implementationType,
                                        infrastructure = u.infrastructure,
                                        interfaceId = u.interfaceId,
                                        mainOffice = u.mainOffice,
                                        parentAPTCode = u.parentAPTCode,
                                        registerDate = u.registerDate,
                                        replacementApplication = u.replacementApplication,
                                        teamName = u.teamName,
                                        unit = u.unit,
                                        userEntity = u.userEntity,
                                        status = u.status,
                                        authenticationMethod = u.authenticationMethod,
                                        authorizationMethod = u.authorizationMethod,
                                        BIANdomain = u.BIANdomain,
                                        assetType = u.assetType,
                                        tobe = u.tobe,
                                        tierProduction = u.tierProduction,
                                        tierPreProduction = u.tierPreProduction,
                                        technicalClassification = u.technicalClassification,
                                        technicalSubclassification = u.technicalSubclassification,
                                        technologyCategory = u.technologyCategory,
                                        architecId = u.architectId,
                                        teamId = u.teamId,
                                        isFormalApplication = u.isFormalApplication,
                                        regularizationDate = u.regularizationDate,
                                        groupTicketRemedy = u.groupTicketRemedy,
                                        webDomain = u.webDomain,
                                        applicationCriticalityBIA = u.applicationCriticalityBIA,
                                        classification = u.classification,
                                        ProductoServicioRepresentativoName = u.starProduct,
                                        MenorRTOName = u.shorterApplicationResponseTime,
                                        MayorGradoInterrupcionName = u.highestDegreeInterruption,
                                        dateFirstRelease = u.dateFirstRelease,
                                        technicalSubClassification = u.technicalSubclassification,
                                        TIERProduccionName = u.tierProduction,
                                        TIERPreProduccionName = u.tierPreProduction,
                                        isApproved = u.isApproved
                                    }).ToList();

                    //Area y Dominio BIAN
                    if (registro != null)
                    {
                        foreach (ApplicationDetail app in registro)
                        {
                            var item = ctx.Unidad.FirstOrDefault(x => x.UnidadId == app.unit);
                            if (item != null) { app.AreaId = item.AreaId; }

                            var item2 = ctx.Area.FirstOrDefault(x => x.AreaId == app.AreaId);
                            if (item2 != null) { app.areaName = item2.Nombre; }

                            var item3 = ctx.Area.FirstOrDefault(x => x.AreaId == app.AreaId);
                            if (item3 != null) { app.DivisionId = item3.DivisionId; }

                            var item4 = ctx.Division.FirstOrDefault(x => x.DivisionId == app.DivisionId);
                            if (item4 != null) { app.divisionName = item4.Nombre; }

                            var item5 = ctx.Division.FirstOrDefault(x => x.DivisionId == app.DivisionId);
                            if (item5 != null) { app.GerenciaId = item5.GerenciaId; }

                            var item6 = ctx.Gerencia.FirstOrDefault(x => x.GerenciaId == app.GerenciaId);
                            if (item6 != null) { app.gerenciaName = item6.Nombre; }

                            var item7 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == app.BIANdomain);
                            if (item7 != null) { app.dominioBIANName = item7.Nombre; }

                            var item8 = ctx.TipoActivoInformacion.FirstOrDefault(x => x.TipoActivoInformacionId == app.assetType);
                            if (item8 != null) { app.tipoActivoName = item8.Nombre; }

                            var item9 = ctx.GrupoRemedy.FirstOrDefault(x => x.GrupoRemedyId == app.groupTicketRemedy);
                            if (item9 != null) { app.grupoTicketRemedyName = item9.Nombre; }

                            var item10 = ctx.Criticidad.FirstOrDefault(x => x.CriticidadId == app.applicationCriticalityBIA);
                            if (item10 != null) { app.criticidadBIANName = item10.DetalleCriticidad; }

                            var item14 = ctx.ClasificacionTecnica.FirstOrDefault(x => x.ClasificacionTecnicaId == app.technicalClassification);
                            if (item14 != null) { app.clasificacionTecnicaName = item14.Nombre; }

                            var item15 = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.SubClasificacionTecnicaId == app.technicalSubClassification);
                            if (item15 != null) { app.subClasificacionTecnicaName = item15.Nombre; }

                            var item16 = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == app.BIANdomain);
                            if (item16 != null) { app.AreaBianId = item16.AreaBianId; }

                            var item17 = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == app.AreaBianId);
                            if (item17 != null) { app.areaBIANName = item17.Nombre; }

                            var item18 = ctx.JefaturaAti.FirstOrDefault(x => x.JefaturaAtiId == app.mainOffice);
                            if (item18 != null) { app.jefaturaATIName = item18.Nombre; }

                            var item19 = ctx.PlataformaBcp.FirstOrDefault(x => x.PlataformaBcpId == app.tobe);
                            if (item19 != null) { app.TOBEName = item19.Nombre; }

                            var item20 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.technologyCategory);
                            if (item20 != null) { app.categoriaTecnologicaName = item20.Valor; }

                            var item27 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.authorizationMethod);
                            if (item27 != null) { app.authorizationMethodName = item27.Valor; }

                            var item28 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.authenticationMethod);
                            if (item28 != null) { app.authenticationMethodName = item28.Valor; }

                            var item30 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.deploymentType);
                            if (item30 != null) { app.deploymentTypeName = item30.Valor; }

                            var item31 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == app.userEntity);
                            if (item31 != null) { app.userEntityName = item31.Valor; }

                            if (app.status.HasValue)
                            {
                                string item32 = Utilitarios.GetEnumDescription2((ApplicationState)app.status.Value);
                                if (item32 != null) { app.statusName = item32; }
                            }
                            else
                            {
                                app.statusName = Utilitarios.GetEnumDescription2(ApplicationState.EnDesarrollo);
                            }


                            var item33 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.implementationType);
                            if (item33 != null) { app.implementationTypeName = item33.Valor; }


                            var item34 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId.ToString() == app.developmentType);
                            if (item34 != null) { app.developmentTypeName = item34.Valor; }


                            var item35 = ctx.Unidad.FirstOrDefault(x => x.UnidadId == app.unit);
                            if (item35 != null) { app.unitName = item35.Nombre; }

                            var item36 = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == app.infrastructure);
                            if (item36 != null) { app.infrastructureName = item36.Valor; }

                            var item37 = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == app.managed);
                            if (item37 != null) { app.managedName = item37.Nombre; }

                            if (app.unit.HasValue)
                            {
                                var unidad = ServiceManager<ActivosDAO>.Provider.GetUnidadById(app.unit.Value);
                                app.unitDetail = unidad != null ? unidad.Nombre : string.Empty;
                            }

                            if (app.teamId.HasValue)
                            {
                                var team = ServiceManager<ActivosDAO>.Provider.GetTeamSquadId(app.teamId.Value);
                                app.teamName = team.Nombre;
                            }
                            else
                                app.teamName = "NO APLICA";

                            if (!string.IsNullOrWhiteSpace(app.parentAPTCode))
                            {
                                var appPadre = ctx.Application.FirstOrDefault(x => x.applicationId == app.parentAPTCode);
                                if (appPadre != null)
                                {
                                    app.parentAPTCodeName = appPadre.applicationName;
                                }
                            }

                            if (!string.IsNullOrWhiteSpace(app.replacementApplication))
                            {
                                var appReemplazo = ctx.Application.FirstOrDefault(x => x.applicationId == app.replacementApplication);
                                if (appReemplazo != null)
                                    app.replacementApplicationName = appReemplazo.applicationName;
                            }
                        }
                    }
                    return registro;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationDetail> GetApplicationForUpdateSP()
        {
            try
            {
                var cadenaConexion = Constantes.CadenaConexion;

                DateTime? NullDate = null;

                List<ApplicationDetail> rpta = new List<ApplicationDetail>();

                using (SqlConnection cnx = new SqlConnection(cadenaConexion))
                {
                    cnx.Open();
                    using (var comando = new SqlCommand("[cvt].[USP_Reporte_Aplicaciones_Update]", cnx))
                    {
                        comando.CommandTimeout = 0;
                        comando.CommandType = System.Data.CommandType.StoredProcedure;

                        //comando.Parameters.Add(new SqlParameter("@fechaDia", DateTime.Now));

                        var reader = comando.ExecuteReader(CommandBehavior.CloseConnection);

                        while (reader.Read())
                        {
                            rpta.Add(new ApplicationDetail()
                            {


                                id = reader.IsDBNull(reader.GetOrdinal("AppId")) ? 0 : reader.GetInt32(reader.GetOrdinal("AppId")),
                                applicationId = reader.IsDBNull(reader.GetOrdinal("applicationId")) ? "" : reader.GetString(reader.GetOrdinal("applicationId")),

                                applicationName = reader.IsDBNull(reader.GetOrdinal("applicationName")) ? "" : reader.GetString(reader.GetOrdinal("applicationName")),
                                description = reader.IsDBNull(reader.GetOrdinal("description")) ? "" : reader.GetString(reader.GetOrdinal("description")),
                                developmentProvider = reader.IsDBNull(reader.GetOrdinal("developmentProvider")) ? "" : reader.GetString(reader.GetOrdinal("developmentProvider")),


                                interfaceId = reader.IsDBNull(reader.GetOrdinal("interfaceId")) ? "" : reader.GetString(reader.GetOrdinal("interfaceId")),

                                parentAPTCode = reader.IsDBNull(reader.GetOrdinal("parentAPTCode")) ? "" : reader.GetString(reader.GetOrdinal("parentAPTCode")),
                                registerDate = reader.IsDBNull(reader.GetOrdinal("registerDate")) ? NullDate : reader.GetDateTime(reader.GetOrdinal("registerDate")),
                                replacementApplication = reader.IsDBNull(reader.GetOrdinal("replacementApplication")) ? "" : reader.GetString(reader.GetOrdinal("replacementApplication")),

                                tierProduction = reader.IsDBNull(reader.GetOrdinal("tierProduction")) ? "" : reader.GetString(reader.GetOrdinal("tierProduction")),
                                tierPreProduction = reader.IsDBNull(reader.GetOrdinal("tierPreProduction")) ? "" : reader.GetString(reader.GetOrdinal("tierPreProduction")),

                                webDomain = reader.IsDBNull(reader.GetOrdinal("webDomain")) ? "" : reader.GetString(reader.GetOrdinal("webDomain")),

                                ProductoServicioRepresentativoName = reader.IsDBNull(reader.GetOrdinal("starProduct")) ? "" : reader.GetString(reader.GetOrdinal("starProduct")),
                                MenorRTOName = reader.IsDBNull(reader.GetOrdinal("shorterApplicationResponseTime")) ? "" : reader.GetString(reader.GetOrdinal("shorterApplicationResponseTime")),
                                MayorGradoInterrupcionName = reader.IsDBNull(reader.GetOrdinal("highestDegreeInterruption")) ? "" : reader.GetString(reader.GetOrdinal("highestDegreeInterruption")),
                                dateFirstRelease = reader.IsDBNull(reader.GetOrdinal("dateFirstRelease")) ? NullDate : reader.GetDateTime(reader.GetOrdinal("dateFirstRelease")),
                                TIERProduccionName = reader.IsDBNull(reader.GetOrdinal("tierProduction")) ? "" : reader.GetString(reader.GetOrdinal("tierProduction")),
                                TIERPreProduccionName = reader.IsDBNull(reader.GetOrdinal("tierPreProduction")) ? "" : reader.GetString(reader.GetOrdinal("tierPreProduction")),

                                gerenciaName = reader.IsDBNull(reader.GetOrdinal("centralManagement")) ? "" : reader.GetString(reader.GetOrdinal("centralManagement")),
                                divisionName = reader.IsDBNull(reader.GetOrdinal("Division")) ? "" : reader.GetString(reader.GetOrdinal("Division")),
                                areaName = reader.IsDBNull(reader.GetOrdinal("area")) ? "" : reader.GetString(reader.GetOrdinal("area")),
                                dominioBIANName = reader.IsDBNull(reader.GetOrdinal("BIANdomain")) ? "" : reader.GetString(reader.GetOrdinal("BIANdomain")),
                                tipoActivoName = reader.IsDBNull(reader.GetOrdinal("assetType")) ? "" : reader.GetString(reader.GetOrdinal("assetType")),
                                grupoTicketRemedyName = reader.IsDBNull(reader.GetOrdinal("groupTicketRemedy")) ? "" : reader.GetString(reader.GetOrdinal("groupTicketRemedy")),
                                criticidadBIANName = reader.IsDBNull(reader.GetOrdinal("applicationCriticalityBIA")) ? "" : reader.GetString(reader.GetOrdinal("applicationCriticalityBIA")),
                                clasificacionTecnicaName = reader.IsDBNull(reader.GetOrdinal("technicalClassification")) ? "" : reader.GetString(reader.GetOrdinal("technicalClassification")),
                                subClasificacionTecnicaName = reader.IsDBNull(reader.GetOrdinal("technicalSubclassification")) ? "" : reader.GetString(reader.GetOrdinal("technicalSubclassification")),
                                areaBIANName = reader.IsDBNull(reader.GetOrdinal("BIANarea")) ? "" : reader.GetString(reader.GetOrdinal("BIANarea")),
                                jefaturaATIName = reader.IsDBNull(reader.GetOrdinal("mainOffice")) ? "" : reader.GetString(reader.GetOrdinal("mainOffice")),
                                TOBEName = reader.IsDBNull(reader.GetOrdinal("tobe")) ? "" : reader.GetString(reader.GetOrdinal("tobe")),
                                categoriaTecnologicaName = reader.IsDBNull(reader.GetOrdinal("technologyCategory")) ? "" : reader.GetString(reader.GetOrdinal("technologyCategory")),
                                authorizationMethodName = reader.IsDBNull(reader.GetOrdinal("authorizationMethod")) ? "" : reader.GetString(reader.GetOrdinal("authorizationMethod")),
                                authenticationMethodName = reader.IsDBNull(reader.GetOrdinal("authenticationMethod")) ? "" : reader.GetString(reader.GetOrdinal("authenticationMethod")),
                                deploymentTypeName = reader.IsDBNull(reader.GetOrdinal("deploymentType")) ? "" : reader.GetString(reader.GetOrdinal("deploymentType")),
                                userEntityName = reader.IsDBNull(reader.GetOrdinal("userEntity")) ? "" : reader.GetString(reader.GetOrdinal("userEntity")),
                                statusName = reader.IsDBNull(reader.GetOrdinal("status")) ? "En Desarrollo" : reader.GetString(reader.GetOrdinal("status")),
                                implementationTypeName = reader.IsDBNull(reader.GetOrdinal("implementationType")) ? "" : reader.GetString(reader.GetOrdinal("implementationType")),
                                developmentTypeName = reader.IsDBNull(reader.GetOrdinal("developmentType")) ? "" : reader.GetString(reader.GetOrdinal("developmentType")),
                                unitName = reader.IsDBNull(reader.GetOrdinal("unit")) ? "" : reader.GetString(reader.GetOrdinal("unit")),
                                infrastructureName = reader.IsDBNull(reader.GetOrdinal("infrastructure")) ? "" : reader.GetString(reader.GetOrdinal("infrastructure")),
                                managedName = reader.IsDBNull(reader.GetOrdinal("managed")) ? "" : reader.GetString(reader.GetOrdinal("managed")),
                                teamName = reader.IsDBNull(reader.GetOrdinal("teamName")) ? "" : reader.GetString(reader.GetOrdinal("teamName"))
                            });

                        }
                        reader.Close();
                    }


                    return rpta;
                }
            }


            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTecnologiaDTO
                    , "Error en el metodo: GetGerenciaDivision()"
                    , new object[] { null });
            }
        }

        public override DataResultAplicacion EditApplicationStepTwo2UserIT(ApplicationDto objeto, List<ApplicationManagerCatalogDto> usuarios)
        {
            DbContextTransaction transaction = null;
            var mensajeBitacora = string.Empty;
            int? estadoInicial = 0;
            try
            {
                long ID = 0;
                int IDSol = 0;
                DateTime FECHA_ACTUAL = DateTime.Now;
                var dataResult = new DataResultAplicacion()
                {
                    AplicacionId = 0,
                    SolicitudId = 0,
                    EstadoTransaccion = true
                };

                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    ctx.Database.CommandTimeout = 0;

                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var entidad = ctx.Application.FirstOrDefault(x => x.AppId == objeto.AppId);
                        estadoInicial = entidad.status;

                        var gestionadoPor = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == entidad.managed);
                        var notificacionCambioUserIT = false;
                        var cuerpoCorreo = string.Empty;
                        ApplicationDtoTemporal entidadInicial = new ApplicationDtoTemporal();
                        entidadInicial.implementationType = entidad.implementationType;
                        entidadInicial.status = entidad.status;
                        entidadInicial.complianceLevel = entidad.complianceLevel;
                        entidadInicial.summaryStandard = entidad.summaryStandard;
                        entidadInicial.isFormalApplication = entidad.isFormalApplication;
                        entidadInicial.regularizationDate = entidad.regularizationDate;


                        if (entidad.implementationType != objeto.implementationType)
                        {
                            mensajeBitacora = mensajeBitacora + " - Tipo de implementación - tenía el valor: " + getImplementationTypeName(entidad.implementationType) +
                              " y fue reemplazado por el valor: " + getImplementationTypeName(objeto.implementationType) + "  ";
                            cuerpoCorreo = cuerpoCorreo + "- Tipo de implementación, con valor actual: " + getImplementationTypeName(entidad.implementationType) + ", actualizado al nuevo valor: " + getImplementationTypeName(objeto.implementationType) + "<br />";

                            entidad.implementationType = objeto.implementationType;
                            notificacionCambioUserIT = true;

                        }

                        if (entidad.status != objeto.status)
                        {
                            mensajeBitacora = mensajeBitacora + " - Estado de la aplicación - tenía el valor: " + getStatusName(entidad.status) +
                                " y fue reemplazado por el valor: " + getStatusName(objeto.status) + "  ";
                            cuerpoCorreo = cuerpoCorreo + "- Estado de la aplicación, con valor actual: " + getStatusName(entidad.status) + ", actualizado al nuevo valor: " + getStatusName(objeto.status) + "<br />";

                            entidad.status = objeto.status;
                            notificacionCambioUserIT = true;

                        }

                        if (entidad.complianceLevel != objeto.complianceLevel)
                        {
                            mensajeBitacora = mensajeBitacora + " - Nivel de cumplimiento de seguridad - tenía el valor: " + (Convert.ToString(entidad.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(entidad.complianceLevel)) +
                                " y fue reemplazado por el valor: " + (Convert.ToString(objeto.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(objeto.complianceLevel)) + "  ";
                            cuerpoCorreo = cuerpoCorreo + "- Nivel de cumplimiento de seguridad, con valor actual : " + (Convert.ToString(entidad.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(entidad.complianceLevel)) + ", actualizado al nuevo valor: " + (Convert.ToString(objeto.complianceLevel) == "" ? "Ningún valor" : Convert.ToString(objeto.complianceLevel)) + "<br />";

                            entidad.complianceLevel = objeto.complianceLevel;
                            notificacionCambioUserIT = true;

                        }

                        if (!string.IsNullOrWhiteSpace(entidad.summaryStandard) && !string.IsNullOrWhiteSpace(objeto.summaryStandard))
                        {
                            if (entidad.summaryStandard != objeto.summaryStandard)
                            {
                                mensajeBitacora = mensajeBitacora + " - Resumen de lineamientos de seguridad - tenía el valor: " + (Convert.ToString(entidad.summaryStandard) == "" ? "Ningún valor" : Convert.ToString(entidad.summaryStandard)) + " y fue reemplazado por el valor: " + (Convert.ToString(objeto.summaryStandard) == "" ? "Ningún valor" : Convert.ToString(objeto.summaryStandard)) + "  ";
                                cuerpoCorreo = cuerpoCorreo + "- Resumen de lineamientos de seguridad , con valor actual: " + (Convert.ToString(entidad.summaryStandard) == "" ? "Ningún valor" : Convert.ToString(entidad.summaryStandard)) + ", actualizado al nuevo valor: " + (Convert.ToString(objeto.summaryStandard) == "" ? "Ningún valor" : Convert.ToString(objeto.summaryStandard)) + "<br />";

                                entidad.summaryStandard = objeto.summaryStandard;
                                notificacionCambioUserIT = true;
                            }
                        }

                        if (entidad.isFormalApplication != objeto.isFormalApplication)
                        {
                            var informal = objeto.isFormalApplication.HasValue ? objeto.isFormalApplication.Value : false;
                            var informalDestino = objeto.isFormalApplication.HasValue ? objeto.isFormalApplication.Value : false;
                            var informalOrigen = entidad.isFormalApplication.HasValue ? entidad.isFormalApplication.Value : false;
                            mensajeBitacora = mensajeBitacora + " - Aplicación informal - tenía el valor: " + (informalOrigen ? "Sí" : "No") + " y fue reemplazado por el valor: " + (informalDestino ? "Sí" : "No") + "  ";
                            cuerpoCorreo = cuerpoCorreo + "- Aplicación informal, con valor actual: " + (informalOrigen ? "Sí" : "No") + ", actualizado al nuevo valor: " + (informalDestino ? "Sí" : "No") + "<br />";

                            entidad.isFormalApplication = objeto.isFormalApplication;
                            notificacionCambioUserIT = true;
                        }

                        if (entidad.regularizationDate != objeto.regularizationDate)
                        {
                            mensajeBitacora = mensajeBitacora + " - Fecha de formalización - tenía el valor: " + (entidad.regularizationDate.HasValue ? entidad.regularizationDate.Value.ToString("dd/MM/yyyy") : "Ningún valor") + " y fue reemplazado por el valor: " + (objeto.regularizationDate.HasValue ? objeto.regularizationDate.Value.ToString("dd/MM/yyyy") : "Ningún valor") + "  ";
                            cuerpoCorreo = cuerpoCorreo + "- Fecha de formalización, con valor actual: " + (entidad.regularizationDate.HasValue ? entidad.regularizationDate.Value.ToString("dd/MM/yyyy") : "Ningún valor") + ", actualizado al nuevo valor: " + (objeto.regularizationDate.HasValue ? objeto.regularizationDate.Value.ToString("dd/MM/yyyy") : "Ningún valor") + "<br />";

                            entidad.regularizationDate = objeto.regularizationDate;
                            notificacionCambioUserIT = true;

                        }

                        ctx.SaveChanges();

                        if (objeto.managed != entidad.managed)
                        {
                            var fin = false;
                            var gestionadoPorRequerido = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == objeto.managed);

                            var flagUserITFinal = gestionadoPorRequerido.FlagUserIT.HasValue ? gestionadoPorRequerido.FlagUserIT.Value : false;
                            var flagJefeEquipoFinal = gestionadoPorRequerido.FlagJefeEquipo.HasValue ? gestionadoPorRequerido.FlagJefeEquipo.Value : false;
                            var flagSubsidiariaFinal = gestionadoPorRequerido.FlagSubsidiarias.HasValue ? gestionadoPorRequerido.FlagSubsidiarias.Value : false;
                            var flagTribuFinal = gestionadoPorRequerido.FlagEquipoAgil.HasValue ? gestionadoPorRequerido.FlagEquipoAgil.Value : false;

                            if (!fin)
                            {
                                if (!fin)
                                {
                                    if (flagJefeEquipoFinal)
                                    {
                                        var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                        //Se crea una nueva solicitud y se asignan los flujos
                                        Solicitud solicitudJdE = new Solicitud();

                                        solicitudJdE.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudJdE.UsuarioCreacion = objeto.registerBy;
                                        solicitudJdE.FechaCreacion = DateTime.Now;
                                        solicitudJdE.AplicacionId = objeto.AppId;
                                        solicitudJdE.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudJdE.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudJdE.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudJdE.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudJdE);
                                        ctx.SaveChanges();
                                        IDSol = solicitudJdE.SolicitudAplicacionId;

                                        SolicitudCampos camposGestionado = new SolicitudCampos();
                                        camposGestionado.ApplicationId = entidad.applicationId;
                                        camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                        camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                        camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                        camposGestionado.EstadoPendiente = true;
                                        camposGestionado.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposGestionado);

                                        SolicitudCampos camposTTL = new SolicitudCampos();
                                        camposTTL.ApplicationId = entidad.applicationId;
                                        camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                        camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                        camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                        camposTTL.EstadoPendiente = true;
                                        camposTTL.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposTTL);
                                        ctx.SaveChanges();

                                        var flujoJdERequerido = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoDestino.ResponsableCorreo,
                                            ownerId = equipoDestino.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.JefeDeEquipo,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoJdERequerido);
                                        ctx.SaveChanges();

                                        var flujoDataJdERequerido = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoJdERequerido.FlowAppId,
                                            newValue = objeto.teamId.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJdERequerido);
                                        ctx.SaveChanges();

                                        var flujoDataJdERequerido2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoJdERequerido.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataJdERequerido2);
                                        ctx.SaveChanges();

                                        var flujoGobiernoUserIT = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = string.Empty,
                                            ownerId = string.Empty,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = true,
                                            isNotified = true,
                                            isApproved = true,
                                            typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoGobiernoUserIT);
                                        ctx.SaveChanges();

                                        var flujoDataGobiernoUserIT = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoGobiernoUserIT.FlowAppId,
                                            newValue = objeto.teamId.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataGobiernoUserIT);
                                        ctx.SaveChanges();

                                        var flujoDataGobiernoUserIT2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoGobiernoUserIT.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataGobiernoUserIT2);
                                        ctx.SaveChanges();

                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , equipoDestino.ResponsableCorreo
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , true
                                               , false);
                                    }
                                }

                                if (!fin)
                                {
                                    if (flagTribuFinal)
                                    {
                                        var equipoDestino = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == objeto.teamId);

                                        //Se crea una nueva solicitud y se asignan los flujos
                                        Solicitud solicitudTTL = new Solicitud();

                                        solicitudTTL.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                        solicitudTTL.UsuarioCreacion = objeto.registerBy;
                                        solicitudTTL.FechaCreacion = DateTime.Now;
                                        solicitudTTL.AplicacionId = objeto.AppId;
                                        solicitudTTL.EstadoSolicitud = (int)EstadoSolicitud.PendienteCustodio;
                                        solicitudTTL.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                        solicitudTTL.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                        solicitudTTL.VisiblePortafolio = false;

                                        ctx.Solicitud.Add(solicitudTTL);
                                        ctx.SaveChanges();
                                        IDSol = solicitudTTL.SolicitudAplicacionId;

                                        SolicitudCampos camposGestionado = new SolicitudCampos();
                                        camposGestionado.ApplicationId = entidad.applicationId;
                                        camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                        camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                        camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                        camposGestionado.EstadoPendiente = true;
                                        camposGestionado.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposGestionado);

                                        SolicitudCampos camposTTL = new SolicitudCampos();
                                        camposTTL.ApplicationId = entidad.applicationId;
                                        camposTTL.ColumnaId = (int)Campos.NombreEquipo;
                                        camposTTL.ValorAnterior = Convert.ToString(entidad.teamId);
                                        camposTTL.NuevoValor = Convert.ToString(objeto.teamId);
                                        camposTTL.EstadoPendiente = true;
                                        camposTTL.SolicitudId = IDSol;
                                        ctx.SolicitudCampos.Add(camposTTL);

                                        ctx.SaveChanges();

                                        var flujoTTLRequerido = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = equipoDestino.ResponsableCorreo,
                                            ownerId = equipoDestino.ResponsableMatricula,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = false,
                                            isNotified = false,
                                            typeRegister = (int)ApplicationManagerRole.TTL,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoTTLRequerido);
                                        ctx.SaveChanges();

                                        var flujoDataTTLRequerido = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoTTLRequerido.FlowAppId,
                                            newValue = objeto.teamId.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataTTLRequerido);
                                        ctx.SaveChanges();

                                        var flujoDataTTLRequerido2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoTTLRequerido.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataTTLRequerido2);
                                        ctx.SaveChanges();

                                        var flujoGobiernoUserIT = new ApplicationFlow()
                                        {
                                            AppId = entidad.AppId,
                                            createdBy = objeto.registerBy,
                                            dateCreation = DateTime.Now,
                                            FlowAppId = 0,
                                            isActive = true,
                                            ownerEmail = string.Empty,
                                            ownerId = string.Empty,
                                            typeFlow = (int)Flow.Modificacion,
                                            isCompleted = true,
                                            isNotified = true,
                                            isApproved = true,
                                            typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                            SolicitudAplicacionId = IDSol,
                                            RegistradoPor = objeto.NombreUsuarioModificacion
                                        };
                                        ctx.ApplicationFlow.Add(flujoGobiernoUserIT);
                                        ctx.SaveChanges();

                                        var flujoDataGobiernoUserIT = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.teamId.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.NombreEquipo,
                                            FlowAppId = flujoGobiernoUserIT.FlowAppId,
                                            newValue = objeto.teamId.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataGobiernoUserIT);
                                        ctx.SaveChanges();

                                        var flujoDataGobiernoUserIT2 = new ApplicationFlowData()
                                        {
                                            createdBy = objeto.registerBy,
                                            currentValue = entidad.managed.ToString(),
                                            dateCreation = DateTime.Now,
                                            fieldId = (int)Campos.GestionadoPor,
                                            FlowAppId = flujoGobiernoUserIT.FlowAppId,
                                            newValue = objeto.managed.ToString()
                                        };
                                        ctx.ApplicationFlowData.Add(flujoDataGobiernoUserIT2);
                                        ctx.SaveChanges();

                                        fin = true;

                                        EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , equipoDestino.ResponsableCorreo
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , true
                                               , false);
                                    }
                                }
                            }

                            if (!fin)
                            {
                                //Los dos no tienen responsables
                                //Se crea una nueva solicitud y se asignan los flujos
                                Solicitud solicitudSubsidiaria = new Solicitud();

                                solicitudSubsidiaria.TipoSolicitud = (int)TipoSolicitud.Modificacion;
                                solicitudSubsidiaria.UsuarioCreacion = objeto.registerBy;
                                solicitudSubsidiaria.FechaCreacion = DateTime.Now;
                                solicitudSubsidiaria.AplicacionId = objeto.AppId;
                                solicitudSubsidiaria.EstadoSolicitud = (int)EstadoSolicitud.Pendiente;
                                solicitudSubsidiaria.NombreUsuarioModificacion = objeto.NombreUsuarioModificacion;
                                solicitudSubsidiaria.NombreUsuarioCreacion = objeto.NombreUsuarioModificacion;
                                solicitudSubsidiaria.VisiblePortafolio = false;

                                ctx.Solicitud.Add(solicitudSubsidiaria);
                                ctx.SaveChanges();
                                IDSol = solicitudSubsidiaria.SolicitudAplicacionId;

                                SolicitudCampos camposGestionado = new SolicitudCampos();
                                camposGestionado.ApplicationId = entidad.applicationId;
                                camposGestionado.ColumnaId = (int)Campos.GestionadoPor;
                                camposGestionado.ValorAnterior = Convert.ToString(entidad.managed);
                                camposGestionado.NuevoValor = Convert.ToString(objeto.managed);
                                camposGestionado.EstadoPendiente = true;
                                camposGestionado.SolicitudId = IDSol;
                                ctx.SolicitudCampos.Add(camposGestionado);
                                ctx.SaveChanges();

                                var flujoGobiernoUserIT = new ApplicationFlow()
                                {
                                    AppId = entidad.AppId,
                                    createdBy = objeto.registerBy,
                                    dateCreation = DateTime.Now,
                                    FlowAppId = 0,
                                    isActive = true,
                                    ownerEmail = string.Empty,
                                    ownerId = string.Empty,
                                    typeFlow = (int)Flow.Modificacion,
                                    isCompleted = true,
                                    isNotified = true,
                                    isApproved = true,
                                    typeRegister = (int)ApplicationManagerRole.GobiernoUserIT,
                                    SolicitudAplicacionId = IDSol,
                                    RegistradoPor = objeto.NombreUsuarioModificacion
                                };
                                ctx.ApplicationFlow.Add(flujoGobiernoUserIT);
                                ctx.SaveChanges();

                                var flujoDataGobiernoUserIT2 = new ApplicationFlowData()
                                {
                                    createdBy = objeto.registerBy,
                                    currentValue = entidad.managed.ToString(),
                                    dateCreation = DateTime.Now,
                                    fieldId = (int)Campos.GestionadoPor,
                                    FlowAppId = flujoGobiernoUserIT.FlowAppId,
                                    newValue = objeto.managed.ToString()
                                };
                                ctx.ApplicationFlowData.Add(flujoDataGobiernoUserIT2);
                                ctx.SaveChanges();

                                EnviarNotificacionGestionadoPor((int)NotificationFlow.ActualizacionGestionadoPor
                                               , entidad.AppId
                                               , null
                                               , null
                                               , entidad.managed
                                               , objeto.managed
                                               , entidad.teamId
                                               , objeto.teamId
                                               , true
                                               , true);
                            }

                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                //diccionario.Add("[Campos]", camposModificado);
                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionCreaciónSolicitudModificación, entidad.applicationId, diccionario);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        dataResult.AplicacionId = ID;
                        dataResult.SolicitudId = IDSol;
                        transaction.Commit();

                        if (notificacionCambioUserIT)
                        {
                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[Cambios]", cuerpoCorreo);

                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ActualizacionPorGobiernoUserIT, entidad.applicationId, diccionario, null, true);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        if (estadoInicial == (int)ApplicationState.NoVigente)
                        {
                            if (objeto.status != (int)ApplicationState.Eliminada)
                                ReiniciarRegistroAplicacion(objeto.AppId, objeto.registerBy);
                        }


                        if (notificacionCambioUserIT)
                        {
                            try
                            {
                                if (objeto.complianceLevel != entidadInicial.complianceLevel || objeto.summaryStandard != entidadInicial.summaryStandard ||
                                    objeto.isFormalApplication != entidadInicial.isFormalApplication || objeto.regularizationDate != entidadInicial.regularizationDate || objeto.status != entidadInicial.status)
                                {
                                    var BitacoraMensaje = "";
                                    var dateAndTime = DateTime.Now;
                                    string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                                    var hour = dateAndTime.ToString("HH:mm:ss");
                                    BitacoraMensaje = "" + objeto.NombreUsuarioModificacion + "" + "(" + objeto.Matricula + ")" + " " +
                                        "actualizó la aplicación User IT " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName + " con los siguientes cambios: ";


                                    BitacoraMensaje = BitacoraMensaje + mensajeBitacora;

                                    BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                                    var registroBitacora = new BitacoraAcciones()
                                    {
                                        CodigoAPT = entidad.applicationId,
                                        DetalleBitacora = BitacoraMensaje,
                                        CreadoPor = objeto.registerBy,
                                        FechaCreacion = dateAndTime,
                                        NombreUsuarioCreacion = objeto.NombreUsuarioModificacion
                                    };

                                    ctx.BitacoraAcciones.Add(registroBitacora);
                                    ctx.SaveChanges();
                                }
                            }

                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }
                        }

                        return dataResult;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                transaction.Rollback();
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorTipoDTO
                    , "Error en el metodo: int EditApplicationStepTwo(TipoDTO objeto)"
                    , new object[] { null });
            }
        }

        public override List<CustomAutocomplete> GetApplicationReplaceByFilter(string filter, bool? flagAprobado, string codigoAPT)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var entidad = (from u in ctx.Application
                                   where (u.applicationId + " - " + u.applicationName).ToUpper().Contains(filter.ToUpper())
                                   && (u.applicationId != codigoAPT)
                                   && u.isActive == true && u.registrationSituation == (int)ApplicationSituationRegister.RegistroCompleto && u.isApproved == true
                                   orderby u.applicationId
                                   select new CustomAutocomplete()
                                   {
                                       Id = u.applicationId,
                                       IdAplicacion = u.AppId,
                                       Descripcion = u.applicationId + " - " + u.applicationName,
                                       value = u.applicationId + " - " + u.applicationName
                                   }).ToList();

                    return entidad;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<CustomAutocomplete> GetApplicationVigenteByFilter(string filtro)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<CustomAutocomplete> GetApplicationVigenteByFilter(string filtro)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetApplicationByUserWithActive(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Application
                                     join u2 in ctx.GestionadoPor on u.managed equals u2.GestionadoPorId
                                     join t in ctx.GestionadoPor on u.managed equals t.GestionadoPorId into lj1
                                     from t in lj1.DefaultIfEmpty()
                                     where (
                                     u.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                     ||
                                     u.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                     || string.IsNullOrEmpty(filter.applicationId))
                                     && u.registerBy == filter.Username
                                     && u.status == (filter.Status == -1 ? u.status : filter.Status)
                                     && u.status != (int)ApplicationState.Eliminada
                                     && u.isActive == true
                                     select new ApplicationList()
                                     {
                                         id = u.AppId,
                                         applicationId = u.applicationId,
                                         managedBy = u2.Nombre,
                                         name = u.applicationName,
                                         status = u.status,
                                         registerDate = u.registerDate,
                                         registrationSituation = u.registrationSituation,
                                         isApproved = u.isApproved,
                                         isObserved = u.isObserved,
                                         approvedDate = u.dateApproved,
                                         tipoactivo = t.Nombre

                                     });

                    totalRows = registros.Count();
                    registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                    var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                    return resultado;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override List<ApplicationFlowList> GetApplicationFlowByUserExportar(PaginationApplication filter, out int totalRows)
        {
            try
            {
                totalRows = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    if (filter.role.Contains("PAPP_Administrador"))
                    {
                        var registros = (from u in ctx.ApplicationFlow
                                         join u2 in ctx.Application on u.AppId equals u2.AppId
                                         join u3 in ctx.ApplicationManagerCatalog on u2.applicationId equals u3.applicationId
                                         join u4 in ctx.GestionadoPor on u2.managed equals u4.GestionadoPorId
                                         where (u2.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || u2.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || string.IsNullOrEmpty(filter.applicationId))
                                         && u.isActive == true
                                         && u2.isActive == true
                                         && u.isCompleted == (filter.statusRequest == -1 ? u.isCompleted : (filter.statusRequest == 1 ? true : false))
                                         && u2.managed == (filter.managedBy == -1 ? u2.managed : filter.managedBy)
                                         && u2.status == (filter.Status == -1 ? u2.status : filter.Status)
                                         && u3.applicationManagerId == (int)ApplicationManagerRole.Solicitante
                                         && u.typeFlow == (filter.flow == -1 ? u.typeFlow : filter.flow)
                                         && u.ownerId != ""
                                         select new ApplicationFlowList()
                                         {
                                             AppId = u2.AppId,
                                             FlowAppId = u.FlowAppId,
                                             applicationId = u2.applicationId,
                                             applicationName = u2.applicationName,
                                             comments = u.comments,
                                             dateCreation = u.dateCreation,
                                             isApproved = u.isApproved,
                                             isCompleted = u.isCompleted,
                                             isObserved=u.isObserved,
                                             status = u2.status,
                                             typeFlow = u.typeFlow,
                                             typeRegister = u.typeRegister,
                                             registeredBy = u3.managerName,
                                             managedBy = u4.Nombre,
                                             isActive = u2.isActive,
                                             assignedTo = u.ownerEmail,
                                             isApprovedApplication = u2.isApproved,
                                             dateApproved = u.dateApproved,
                                             dateRejected = u.dateRejected,
                                             dateTransfer = u.dateTransfer,
                                             ApprovedBy = u.approvedBy,
                                             ApprovedByName = u.approvedByName,
                                             RejectedBy = u.rejectedBy,
                                             RejectedByName = u.rejectedByName,
                                             ObservedBy = u.observedBy,
                                             ObservedByName = u.observedByName,
                                             TransferedBy = u.transferedBy,
                                             TransferedByName = u.transferedByName,
                                         }).Distinct();

                        totalRows = registros.Count();
                        registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                        var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                        return resultado;
                    }
                    else
                    {
                        var registros = (from u in ctx.ApplicationFlow
                                         join u2 in ctx.Application on u.AppId equals u2.AppId
                                         join u3 in ctx.ApplicationManagerCatalog on u2.applicationId equals u3.applicationId
                                         join u4 in ctx.GestionadoPor on u2.managed equals u4.GestionadoPorId
                                         where (u2.applicationName.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || u2.applicationId.ToUpper().Contains(filter.applicationId.ToUpper())
                                         || string.IsNullOrEmpty(filter.applicationId))
                                         && u.ownerId == filter.Username
                                         && u.isActive == true
                                         && u2.isActive == true
                                         && u.isCompleted == (filter.statusRequest == -1 ? u.isCompleted : (filter.statusRequest == 1 ? true : false))
                                         && u2.managed == (filter.managedBy == -1 ? u2.managed : filter.managedBy)
                                         && u2.status == (filter.Status == -1 ? u2.status : filter.Status)
                                         && u3.applicationManagerId == (int)ApplicationManagerRole.Solicitante
                                         && u.typeFlow == (filter.flow == -1 ? u.typeFlow : filter.flow)
                                         && u.ownerId != ""
                                         select new ApplicationFlowList()
                                         {
                                             AppId = u2.AppId,
                                             FlowAppId = u.FlowAppId,
                                             applicationId = u2.applicationId,
                                             applicationName = u2.applicationName,
                                             comments = u.comments,
                                             dateCreation = u.dateCreation,
                                             isApproved = u.isApproved,
                                             isCompleted = u.isCompleted,
                                             status = u2.status,
                                             typeFlow = u.typeFlow,
                                             typeRegister = u.typeRegister,
                                             registeredBy = u3.managerName,
                                             managedBy = u4.Nombre,
                                             isActive = u2.isActive,
                                             assignedTo = u.ownerEmail,
                                             isApprovedApplication = u2.isApproved,
                                             ApprovedBy = u.approvedBy,
                                             ApprovedByName = u.approvedByName,
                                             RejectedBy = u.rejectedBy,
                                             RejectedByName = u.rejectedByName,
                                             TransferedBy = u.transferedBy,
                                             TransferedByName = u.transferedByName,
                                         }).Distinct();

                        totalRows = registros.Count();
                        registros = registros.OrderBy(filter.sortName + " " + filter.sortOrder);
                        var resultado = registros.Skip((filter.pageNumber - 1) * filter.pageSize).Take(filter.pageSize).ToList();

                        return resultado;
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationFlowByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        public override int AprobarSolicitudReversionEliminacion(SolicitudDto objRegistro)
        {
            string CodigoApp = "";
            string NombreApp = "";
            string EmailSolicitante = "";
            string Matricula = "";
            string Nombre = "";
            DbContextTransaction transaction = null;
            try
            {
                var idRegistro = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var objSolicitud = ctx.Solicitud.First(x => x.SolicitudAplicacionId == objRegistro.Id);
                        EmailSolicitante = objSolicitud.EmailSolicitante;
                        if (objSolicitud != null)
                        {
                            objSolicitud.EstadoSolicitud = (int)EstadoSolicitud.Aprobada;
                            objSolicitud.FechaModificacion = DateTime.Now;
                            objSolicitud.UsuarioModificacion = objRegistro.UserName;
                            objSolicitud.NombreUsuarioModificacion = objRegistro.Usuario;
                            objSolicitud.NombreUsuarioAprobacion = objRegistro.Usuario;
                            objSolicitud.FlagAprobacion = true;
                            objSolicitud.FechaAprobacion = DateTime.Now;
                            objSolicitud.ObservacionesRechazo = objRegistro.Observaciones;


                            var objAplicacion = ctx.Application.First(x => x.AppId == objRegistro.AplicacionId);
                            objAplicacion.FechaReactivacion = DateTime.Now;
                            objAplicacion.EstadoReactivacion = (int)EstadoReactivacion.AplicaciónProcesoReactivacion;
                            objAplicacion.isReactivated = true;

                            var usuario = new ADUsuarios().GetUsersByEmail(objSolicitud.EmailSolicitante);

                            Nombre = usuario[0].displayName;
                            Matricula = usuario[0].matricula;

                            var appManager = ctx.ApplicationManagerCatalog.FirstOrDefault(x => x.applicationId == objAplicacion.applicationId && x.applicationManagerId == (int)ApplicationManagerRole.Solicitante && x.isActive == true);
                            if (appManager != null)
                            {
                                appManager.isActive = false;
                            }

                            var newManager = new ApplicationManagerCatalog();

                            newManager.applicationId = objAplicacion.applicationId;
                            newManager.username = Matricula;
                            newManager.managerName = Nombre;
                            newManager.isActive = true;
                            newManager.applicationManagerId = (int)ApplicationManagerRole.Solicitante;
                            newManager.dateCreation = DateTime.Now;
                            newManager.createdBy = objRegistro.Email;
                            newManager.email = objSolicitud.EmailSolicitante;

                            ctx.ApplicationManagerCatalog.Add(newManager);

                            if (objAplicacion != null)
                            {
                                objAplicacion.status = (int?)null;
                                objAplicacion.deploymentTypeOriginal = (int?)null;
                                objAplicacion.deploymentType = (int?)null;
                                objAplicacion.interfaceId = null;
                                objAplicacion.hasInterfaceId = (bool?)null;
                                objAplicacion.registerBy = Matricula;
                            }

                            ReiniciarRegistroAplicacion(objRegistro.AplicacionId, objRegistro.UserName, true);
                        }


                        ctx.SaveChanges();
                        transaction.Commit();
                    }

                    idRegistro = objRegistro.Id;



                }

                //Generacion de bitacora
                using (var ctx2 = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    try
                    {

                        var entidad = ctx2.Application.FirstOrDefault(x => x.AppId == objRegistro.AplicacionId);

                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El Administrador del Portafolio, " + objRegistro.Usuario + "" + "(" + objRegistro.Matricula + ")" + " " +
                            "aprobó la solicitud de reversión de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName
                              + " con los siguientes comentarios: " + objRegistro.Observaciones;


                        BitacoraMensaje = BitacoraMensaje + " , el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = objRegistro.UserName,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = objRegistro.Usuario
                        };

                        ctx2.BitacoraAcciones.Add(registroBitacora);
                        ctx2.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }
                }

                //Envio de correo
                try
                {
                    List<string> correos = new List<string>();
                    correos.Add(objRegistro.Email);

                    var mailManager = new MailingManager();
                    var diccionario = new Dictionary<string, string>();
                    diccionario.Add("[CodigoAPT]", CodigoApp);
                    diccionario.Add("[NombreAplicacion]", NombreApp);
                    diccionario.Add("[Comentarios]", objRegistro.Observaciones);
                    diccionario.Add("[FechaReactivacion]", DateTime.Now.ToString("dd/MM/yyyy"));
                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.AprobacionReversiónEliminaciónSolicitud, CodigoApp, diccionario, correos);
                }
                catch (Exception ex)
                {
                    log.Error(ex.Message, ex);
                }

                this.SincronizarConCVT(CodigoApp);

                return idRegistro;
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: AprobarSolicitudReversionEliminacion(SolicitudDto objRegistro)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {

                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: AprobarSolicitudReversionEliminacion(SolicitudDto objRegistro)"
                    , new object[] { null });
            }
        }

        public override bool GetPersona(string nombre)
        {

            try
            {
                var usuario = new ADUsuarios().GetUsersByName(nombre);

                if (usuario != null)
                {
                    return true;
                }
                else return false;
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: GetPersona(string nombre)"
                    , new object[] { null });
            }

        }

        public override int RechazarSolicitudReversionEliminacion(SolicitudDto objRegistro)
        {
            string CodigoApp = "";
            string NombreApp = "";
            string EmailSolicitante = "";
            DbContextTransaction transaction = null;
            try
            {
                var idRegistro = 0;
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    using (transaction = ctx.Database.BeginTransaction())
                    {
                        var objSolicitud = ctx.Solicitud.First(x => x.SolicitudAplicacionId == objRegistro.Id);
                        EmailSolicitante = objSolicitud.EmailSolicitante;
                        if (objSolicitud != null)
                        {
                            objSolicitud.EstadoSolicitud = (int)EstadoSolicitud.Rechazada;
                            objSolicitud.FechaModificacion = DateTime.Now;
                            objSolicitud.UsuarioModificacion = objRegistro.UserName;
                            objSolicitud.NombreUsuarioModificacion = objRegistro.Usuario;
                            objSolicitud.FlagAprobacion = false;
                            //objSolicitud.FechaAprobacion = DateTime.Now;
                            objSolicitud.ObservacionesRechazo = objRegistro.Observaciones;

                            var objAplicacion = ctx.Application.First(x => x.AppId == objRegistro.AplicacionId);
                            objAplicacion.FechaReactivacion = null;
                            objAplicacion.EstadoReactivacion = null;
                            objAplicacion.isReactivated = null;
                        }
                        ctx.SaveChanges();
                        transaction.Commit();
                    }

                    idRegistro = objRegistro.Id;
                }

                //Generacion de bitacora
                using (var ctx2 = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    try
                    {

                        var entidad = ctx2.Application.FirstOrDefault(x => x.AppId == objRegistro.AplicacionId);

                        CodigoApp = entidad.applicationId;
                        NombreApp = entidad.applicationName;

                        var BitacoraMensaje = "";
                        var dateAndTime = DateTime.Now;
                        string date = dateAndTime.ToString("dd'/'MM'/'yyyy");
                        var hour = dateAndTime.ToString("HH:mm:ss");
                        BitacoraMensaje = "El Administrador del Portafolio, " + objRegistro.Usuario + "" + "(" + objRegistro.Matricula + ")" + " " +
                            "rechazó la solicitud de reversión de eliminación para la aplicación " + "" + entidad.applicationId + "" + " - " + "" + entidad.applicationName
                            + " por los siguientes motivos: " + objRegistro.Observaciones;


                        BitacoraMensaje = BitacoraMensaje + " ,el día " + "" + date + "" + " a las " + "" + hour + "";

                        var registroBitacora = new BitacoraAcciones()
                        {
                            CodigoAPT = entidad.applicationId,
                            DetalleBitacora = BitacoraMensaje,
                            CreadoPor = objRegistro.UserName,
                            FechaCreacion = dateAndTime,
                            NombreUsuarioCreacion = objRegistro.Usuario
                        };

                        ctx2.BitacoraAcciones.Add(registroBitacora);
                        ctx2.SaveChanges();
                    }

                    catch (Exception ex)
                    {
                        log.Error(ex.Message, ex);
                    }
                }

                //Envio de correo
                try
                {
                    List<string> correos = new List<string>();
                    correos.Add(EmailSolicitante);
                    correos.Add(objRegistro.Email);

                    var mailManager = new MailingManager();
                    var diccionario = new Dictionary<string, string>();
                    diccionario.Add("[CodigoAPT]", CodigoApp);
                    diccionario.Add("[NombreAplicacion]", NombreApp);
                    diccionario.Add("[Comentarios]", objRegistro.Observaciones);
                    mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.RechazoReversiónEliminaciónSolicitud, CodigoApp, diccionario, correos);
                }
                catch (Exception ex)
                {
                    log.Error(ex.Message, ex);
                }
                return idRegistro;
            }
            catch (DbEntityValidationException ex)
            {

                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: AprobarSolicitudReversionEliminacion(SolicitudDto objRegistro)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {

                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: AprobarSolicitudReversionEliminacion(SolicitudDto objRegistro)"
                    , new object[] { null });
            }
        }

        private void EnviarCorreoConfirmacion(int id, int solicitud)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var entidad = ctx.Application.FirstOrDefault(x => x.AppId == id);
                    if (entidad != null)
                    {
                        var campos = (from u in ctx.Solicitud
                                      join u2 in ctx.SolicitudCampos on u.SolicitudAplicacionId equals u2.SolicitudId
                                      join u3 in ctx.InfoCampoPortafolio on u2.ColumnaId equals u3.InfoCampoPortafolioId
                                      where u.SolicitudAplicacionId == solicitud
                                      select new SolicitudDetalleDto()
                                      {
                                          ColumnaDetalle = u3.Nombre,
                                          Campo = u2.ColumnaId.Value,
                                          NuevoValor = u2.NuevoValor,
                                          ValorAnterior = u2.ValorAnterior,
                                      }).ToList();

                        var rolesDetalle = "<table border='1'><tr><td><strong>Campo</strong></td><td><strong>Valor anterior</strong></td><td><strong>Valor nuevo</strong></td></tr>{0}</table>";
                        var formato = "<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>";
                        var filas = string.Empty;

                        foreach (var item in campos)
                        {
                            switch (item.Campo)
                            {
                                case (int)Campos.AreaBIAN:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.AreaBian.FirstOrDefault(x => x.AreaBianId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.CategoriaTecnologica:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Valor;
                                        }
                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Valor;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.ClasificacionActivo:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Valor;
                                        }
                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Valor;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.ClasificacionTecnica:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.ClasificacionTecnica.FirstOrDefault(x => x.ClasificacionTecnicaId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.ClasificacionTecnica.FirstOrDefault(x => x.ClasificacionTecnicaId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.DominioBIAN:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.DominioBian.FirstOrDefault(x => x.DominioBianId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.EstadoAplicacion:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            item.DetalleActual = Utilitarios.GetEnumDescription2((ApplicationState)id);
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            item.DetalleNuevo = Utilitarios.GetEnumDescription2((ApplicationState)id);
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.GestionadoPor:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.ModeloEntrega:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Valor;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Valor;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.NombreEquipo:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.TeamSquad.FirstOrDefault(x => x.EquipoId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.SubClasificacionTecnica:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.SubClasificacionTecnicaId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.SubClasificacionTecnica.FirstOrDefault(x => x.SubClasificacionTecnicaId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.TipoActivoInformacion:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.TipoActivoInformacion.FirstOrDefault(x => x.TipoActivoInformacionId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.TipoActivoInformacion.FirstOrDefault(x => x.TipoActivoInformacionId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.TipoDesarrollo:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Valor;
                                        }
                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Valor;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.TipoImplementacion:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Valor;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.ParametricaDetalle.FirstOrDefault(x => x.ParametricaDetalleId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Valor;
                                        }

                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.TOBE:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.PlataformaBcp.FirstOrDefault(x => x.PlataformaBcpId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.PlataformaBcp.FirstOrDefault(x => x.PlataformaBcpId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }
                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                case (int)Campos.UnidadUsuaria:
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.ValorAnterior))
                                        {
                                            id = int.Parse(item.ValorAnterior);
                                            var area = ctx.Unidad.FirstOrDefault(x => x.UnidadId == id);
                                            if (area != null)
                                                item.DetalleActual = area.Nombre;
                                        }

                                        if (!string.IsNullOrWhiteSpace(item.NuevoValor))
                                        {
                                            id = int.Parse(item.NuevoValor);
                                            var area = ctx.Unidad.FirstOrDefault(x => x.UnidadId == id);
                                            if (area != null)
                                                item.DetalleNuevo = area.Nombre;
                                        }
                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                                default:
                                    {
                                        item.DetalleActual = item.ValorAnterior;
                                        item.DetalleNuevo = item.NuevoValor;
                                        filas = filas + string.Format(formato, item.ColumnaDetalle, item.DetalleActual, item.DetalleNuevo);
                                    }
                                    break;
                            }
                        }

                        var tabla = string.Empty;
                        tabla = string.Format(rolesDetalle, filas);

                        //Enviar Correos
                        try
                        {
                            var mailManager = new MailingManager();
                            var diccionario = new Dictionary<string, string>();
                            diccionario.Add("[CodigoAPT]", entidad.applicationId);
                            diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                            diccionario.Add("[Tabla]", tabla);

                            mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ConformidadActualizacionApp, entidad.applicationId, diccionario, null, true);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message, ex);
                        }
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        private void ReiniciarRegistroAplicacion(int id, string matricula, bool correoReactivacion = false)
        {
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var entidad = ctx.Application.FirstOrDefault(x => x.AppId == id);
                    if (entidad != null)
                    {
                        var gestionadoPor = ctx.GestionadoPor.FirstOrDefault(x => x.GestionadoPorId == entidad.managed);
                        entidad.registrationSituation = (int)ApplicationSituationRegister.RegistroParcial;
                        entidad.isApproved = false;
                        entidad.dateApproved = null;
                        entidad.approvedBy = string.Empty;
                        entidad.approvedByEmail = string.Empty;
                        entidad.aplicacionRevertida = true;
                        entidad.tierPreProduction = null;
                        entidad.tierProduction = null;
                        entidad.hasInterfaceId = null;
                        entidad.interfaceId = null;
                        entidad.deploymentType = null;
                        entidad.deploymentTypeOriginal = null;

                        //Desactivar los flujos existentes y los roles (salvo el solicitante que se actualiza con el usuario actual)
                        ctx.Database.ExecuteSqlCommand(string.Format("delete from app.ApplicationFlow where AppId={0}", id));
                        ctx.SaveChanges();

                        if (!correoReactivacion)
                        {
                            //Enviar Correos
                            try
                            {
                                var mailManager = new MailingManager();
                                var diccionario = new Dictionary<string, string>();
                                diccionario.Add("[CodigoAPT]", entidad.applicationId);
                                diccionario.Add("[NombreAplicacion]", entidad.applicationName);
                                diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)entidad.status.Value));
                                diccionario.Add("[FechaRegistro]", entidad.registerDate.Value.ToString("dd/MM/yyyy"));

                                mailManager.ProcesarEnvioNotificaciones((int)NotificationFlow.ReversionAplicacionNoVigente, entidad.applicationId, diccionario);
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message, ex);
                            }

                            ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationManagerCatalog set isActive=0 where applicationManagerId!=9 and applicationId='{0}'", entidad.applicationId));
                        }
                        else
                        {
                            ctx.Database.ExecuteSqlCommand(string.Format("update app.ApplicationManagerCatalog set isActive=0 where applicationManagerId!=9 and applicationId='{0}'", entidad.applicationId));
                        }
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationByUser(string filtro, int pageNumber, int pageSize, string sortName, string sortOrder, out int totalRows)"
                    , new object[] { null });
            }
        }

        private List<ApplicationManagerCatalogDto> DevolverRolesGestion()
        {
            var usuarios = new List<ApplicationManagerCatalogDto>();

            try
            {
                var parametroGobierno = ServiceManager<ParametroDAO>.Provider.ObtenerParametroApp("GRUPO_GOBIERNO_USERIT");
                var usuariosGobierno = new AzureGroupsManager().GetGroupMembersByName(parametroGobierno.Valor);
                if (usuariosGobierno != null)
                {
                    foreach (var item in usuariosGobierno)
                    {
                        usuarios.Add(new ApplicationManagerCatalogDto()
                        {
                            applicationManagerId = (int)ApplicationManagerRole.GobiernoUserIT,
                            email = item.mail,
                            username = item.matricula,
                            managerName = string.Empty
                        });
                    }
                }

            }
            catch (Exception)
            {

            }

            var rolesGestion = ServiceManager<ActivosDAO>.Provider.GetRolesGestion();
            var managerid = 0;
            foreach (var user in rolesGestion)
            {
                switch (user.RoleId)
                {
                    case (int)ERoles.GobiernoUserIT:
                        managerid = (int)ApplicationManagerRole.GobiernoUserIT;
                        break;
                }

                usuarios.Add(new ApplicationManagerCatalogDto()
                {
                    applicationManagerId = managerid,
                    email = user.Email,
                    username = user.Username,
                    managerName = string.Empty
                });
            }

            var tmpUsuarios = (from u in usuarios
                               select new
                               {
                                   u.applicationManagerId,
                                   u.username,
                                   u.email
                               }).Distinct().ToList();
            var usuariosFinales = (from u in tmpUsuarios
                                   select new ApplicationManagerCatalogDto()
                                   {
                                       applicationManagerId = u.applicationManagerId,
                                       email = u.email,
                                       username = u.username
                                   }).ToList();

            return usuariosFinales;
        }

        private List<ApplicationManagerCatalogDto> DevolverUsuariosGobiernoUserIT()
        {
            var usuarios = new List<ApplicationManagerCatalogDto>();

            try
            {
                var parametroGobierno = ServiceManager<ParametroDAO>.Provider.ObtenerParametroApp("GRUPO_GOBIERNO_USERIT");
                var usuariosGobierno = new AzureGroupsManager().GetGroupMembersByName(parametroGobierno.Valor);
                if (usuariosGobierno != null)
                {
                    foreach (var item in usuariosGobierno)
                    {
                        usuarios.Add(new ApplicationManagerCatalogDto()
                        {
                            applicationManagerId = (int)ApplicationManagerRole.GobiernoUserIT,
                            email = item.mail,
                            username = item.matricula,
                            managerName = string.Empty
                        });
                    }
                }

            }
            catch (Exception)
            {

            }

            var rolesGestion = ServiceManager<ActivosDAO>.Provider.GetRolesGestion();
            var managerid = 0;
            foreach (var user in rolesGestion)
            {
                switch (user.RoleId)
                {
                    case (int)ERoles.GobiernoUserIT:
                        managerid = (int)ApplicationManagerRole.GobiernoUserIT;
                        break;
                }

                usuarios.Add(new ApplicationManagerCatalogDto()
                {
                    applicationManagerId = managerid,
                    email = user.Email,
                    username = user.Username,
                    managerName = string.Empty
                });
            }

            var tmpUsuarios = (from u in usuarios
                               select new
                               {
                                   u.applicationManagerId,
                                   u.username,
                                   u.email
                               }).Distinct().ToList();
            var usuariosFinales = (from u in tmpUsuarios
                                   select new ApplicationManagerCatalogDto()
                                   {
                                       applicationManagerId = u.applicationManagerId,
                                       email = u.email,
                                       username = u.username
                                   }).ToList();

            return usuariosFinales;
        }

        private List<ApplicationManagerCatalogDto> DevolverUsuariosAdministradores()
        {
            var usuarios = new List<ApplicationManagerCatalogDto>();

            try
            {
                var parametroGobierno = ServiceManager<ParametroDAO>.Provider.ObtenerParametroApp("GRUPO_ADMINISTRADORES");
                var usuariosGobierno = new AzureGroupsManager().GetGroupMembersByName(parametroGobierno.Valor);
                if (usuariosGobierno != null)
                {
                    foreach (var item in usuariosGobierno)
                    {
                        usuarios.Add(new ApplicationManagerCatalogDto()
                        {
                            applicationManagerId = (int)ApplicationManagerRole.AdministradorPortafolio,
                            email = item.mail,
                            username = item.matricula,
                            managerName = string.Empty
                        });
                    }
                }

            }
            catch (Exception)
            {

            }

            var rolesGestion = ServiceManager<ActivosDAO>.Provider.GetRolesGestion();
            var managerid = 0;
            foreach (var user in rolesGestion)
            {
                switch (user.RoleId)
                {
                    case (int)ERoles.Administrador:
                        managerid = (int)ApplicationManagerRole.AdministradorPortafolio;
                        usuarios.Add(new ApplicationManagerCatalogDto()
                        {
                            applicationManagerId = managerid,
                            email = user.Email,
                            username = user.Username,
                            managerName = string.Empty
                        });
                        break;
                }
            }

            var tmpUsuarios = (from u in usuarios
                               select new
                               {
                                   u.applicationManagerId,
                                   u.username,
                                   u.email
                               }).Distinct().ToList();
            var usuariosFinales = (from u in tmpUsuarios
                                   select new ApplicationManagerCatalogDto()
                                   {
                                       applicationManagerId = u.applicationManagerId,
                                       email = u.email,
                                       username = u.username
                                   }).ToList();

            return usuariosFinales;
        }

        private void EnviarNotificacionGestionadoPor(int notificacion
            , int aplicacion
            , string buzonUno
            , string buzonDos
            , int? gestionadoInicial
            , int? gestionadoFinal
            , int? equipoInicial
            , int? equipoFinal
            , bool userIT
            , bool admin)
        {
            //Enviar Correos
            try
            {
                var mailManager = new MailingManager();
                var diccionario = new Dictionary<string, string>();
                var objeto = this.GetApplicationById(aplicacion);
                var correosPara = new List<string>();

                diccionario.Add("[CodigoAPT]", objeto.applicationId);
                diccionario.Add("[NombreAplicacion]", objeto.applicationName);
                diccionario.Add("[DescripcionAplicacion]", objeto.description);
                diccionario.Add("[EstadoAplicacion]", Utilitarios.GetEnumDescription2((ApplicationState)objeto.status.Value));

                if (gestionadoInicial.HasValue)
                {
                    diccionario.Add("[GestionadoInicial]", getManagedName(gestionadoInicial));
                }
                else
                    diccionario.Add("[GestionadoInicial]", "-");

                if (gestionadoFinal.HasValue)
                {
                    diccionario.Add("[GestionadoFinal]", getManagedName(gestionadoFinal));
                }
                else
                    diccionario.Add("[GestionadoFinal]", "-");

                if (equipoInicial.HasValue)
                {
                    diccionario.Add("[EquipoInicial]", getTeamName(equipoInicial));
                }
                else
                    diccionario.Add("[EquipoInicial]", "-");

                if (equipoFinal.HasValue)
                {
                    diccionario.Add("[EquipoFinal]", getTeamName(equipoFinal));
                }
                else
                    diccionario.Add("[EquipoFinal]", "-");

                if (!string.IsNullOrWhiteSpace(buzonUno))
                    correosPara.Add(buzonUno);
                if (!string.IsNullOrWhiteSpace(buzonDos))
                    correosPara.Add(buzonDos);

                if (userIT)
                {
                    var buzonesUserIT = DevolverUsuariosGobiernoUserIT();
                    foreach (var item in buzonesUserIT)
                        correosPara.Add(item.email);
                }

                if (admin)
                {
                    var buzonesAdmin = DevolverUsuariosAdministradores();
                    foreach (var item in buzonesAdmin)
                        correosPara.Add(item.email);
                }

                mailManager.ProcesarEnvioNotificacionesEspecifico(notificacion
                    , objeto.applicationId
                    , diccionario
                    , correosPara);
            }
            catch (Exception ex)
            {
                log.Error(ex.Message, ex);
            }
        }

        private void SincronizarConCVT(string codigoAPT)
        {
            try
            {
                var cadenaConexion = Constantes.CadenaConexion;
                using (SqlConnection cnx = new SqlConnection(cadenaConexion))
                {
                    cnx.Open();
                    using (var comando = new SqlCommand("[app].[USP_SincronizarAplicacion]", cnx))
                    {
                        comando.CommandTimeout = 0;
                        comando.CommandType = System.Data.CommandType.StoredProcedure;
                        comando.Parameters.Add(new SqlParameter("@codigoAPT", codigoAPT));
                        comando.ExecuteNonQuery();
                    }
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
            }
        }

        public override List<ApplicationList> GetOwnersEliminacionPendientes()
        {
            var date = DateTime.Now.AddDays(1);
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Solicitud
                                     join u2 in ctx.Application on u.AplicacionId equals u2.AppId
                                     join u3 in ctx.Unidad on u2.unit equals u3.UnidadId
                                     where u.TipoSolicitud == (int)TipoSolicitud.Eliminacion && u.EstadoSolicitud == (int)EstadoSolicitud.PendienteCustodio
                                     select new ApplicationList()
                                     {
                                         id = u2.AppId,
                                         applicationId = u2.applicationId,
                                         name = u2.applicationName,
                                         registerDate = u.FechaCreacion,
                                         OwnerEmail = u3.ResponsableCorreo,
                                         Owner = u3.Responsable
                                     });

                    return registros.ToList();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetPortafolioEliminacionPendientes()
        {
            var date = DateTime.Now.AddDays(1);
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Solicitud
                                     join u2 in ctx.Application on u.AplicacionId equals u2.AppId
                                     join u3 in ctx.Unidad on u2.unit equals u3.UnidadId
                                     where u.TipoSolicitud == (int)TipoSolicitud.Eliminacion && u.EstadoSolicitud == (int)EstadoSolicitud.Pendiente
                                     select new ApplicationList()
                                     {
                                         id = u2.AppId,
                                         applicationId = u2.applicationId,
                                         name = u2.applicationName,
                                         registerDate = u.FechaCreacion,
                                         OwnerEmail = u3.ResponsableCorreo,
                                         Owner = u3.Responsable
                                     });

                    return registros.ToList();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetSolicitanteEliminacionPendientes()
        {
            var date = DateTime.Now.AddDays(1);
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Solicitud
                                     join u2 in ctx.Application on u.AplicacionId equals u2.AppId
                                     where u.TipoSolicitud == (int)TipoSolicitud.Eliminacion && u.EstadoSolicitud == (int)EstadoSolicitud.Observada
                                     select new ApplicationList()
                                     {
                                         id = u2.AppId,
                                         applicationId = u2.applicationId,
                                         name = u2.applicationName,
                                         registerDate = u.FechaCreacion,
                                         OwnerEmail = u.EmailSolicitante,
                                         Motivo = u.ObservacionesRechazo
                                     });

                    return registros.ToList();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetPortafolioReactivacionPendientes()
        {
            var date = DateTime.Now.AddDays(1);
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Solicitud
                                     join u2 in ctx.Application on u.AplicacionId equals u2.AppId
                                     join u3 in ctx.Unidad on u2.unit equals u3.UnidadId
                                     where u.TipoSolicitud == (int)TipoSolicitud.RevertirEliminacion && u.EstadoSolicitud == (int)EstadoSolicitud.Pendiente
                                     select new ApplicationList()
                                     {
                                         id = u2.AppId,
                                         applicationId = u2.applicationId,
                                         name = u2.applicationName,
                                         registerDate = u.FechaCreacion,
                                         OwnerEmail = u3.ResponsableCorreo,
                                         Owner = u3.Responsable
                                     });

                    return registros.ToList();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
        }

        public override List<ApplicationList> GetSolicitanteReactivacionPendientes()
        {
            var date = DateTime.Now.AddDays(1);
            try
            {
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u2 in ctx.Application
                                     where u2.isReactivated == true && u2.EstadoReactivacion == (int)EstadoReactivacion.AplicaciónProcesoReactivacion
                                     select new ApplicationList()
                                     {
                                         id = u2.AppId,
                                         applicationId = u2.applicationId,
                                         name = u2.applicationName,
                                         registerDate = u2.FechaReactivacion
                                     });

                    return registros.ToList();
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorAplicacionDTO
                    , "Error en el metodo: List<ActivosDTO> GetApplicationsToNotify()"
                    , new object[] { null });
            }
        }

        public override ConsultaDTO GetConsultaById(int id)
        {
            try
            {                
                using (var ctx = GestionCMDB_ProdEntities.ConnectToSqlServer())
                {
                    var registros = (from u in ctx.Consultas
                                     where u.ConsultaId == id                                     
                                     select new ConsultaDTO()
                                     {
                                         ConsultaId = u.ConsultaId,
                                         FechaConsulta = u.FechaConsulta,
                                         TipoConsulta = u.TipoConsulta,
                                         Consulta = u.Consulta,
                                         FechaRespuesta = u.FechaRespuesta,
                                         RespuestaPortafolio = u.RespuestaPortafolio,
                                         NombreUsuarioConsultor = u.NombreUsuarioConsultor,
                                         MatriculaUsuarioConsultor = u.MatriculaUsuarioConsultor,
                                         EmailUsuarioConsultor = u.EmailUsuarioConsultor,
                                         Respondido = u.Respondido,
                                         applicationId = u.applicationId

                                     }).FirstOrDefault();                   

                    return registros;
                }
            }
            catch (DbEntityValidationException ex)
            {
                log.ErrorEntity(ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ConsultaDTO> GetConsultaById(int id)"
                    , new object[] { null });
            }
            catch (Exception ex)
            {
                log.Error("Error ", ex);
                throw new CVTException(CVTExceptionIds.ErrorActivosDTO
                    , "Error en el metodo: List<ConsultaDTO> GetConsultaById(int id)"
                    , new object[] { null });
            }
        }
    }
}